/*
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * UploadFilePart
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2023-07-14T12:44:49.389+03:00")
public class UploadFilePart {
  @SerializedName("partNo")
  private Long partNo = null;

  @SerializedName("startOffset")
  private Long startOffset = null;

  @SerializedName("endOffset")
  private Long endOffset = null;

  /**
   * part status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    PENDING("PENDING"),
    
    COMPLETE("COMPLETE");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("locked")
  private Boolean locked = null;

  public UploadFilePart partNo(Long partNo) {
    this.partNo = partNo;
    return this;
  }

   /**
   * File part id
   * @return partNo
  **/
  @ApiModelProperty(example = "1", value = "File part id")
  public Long getPartNo() {
    return partNo;
  }

  public void setPartNo(Long partNo) {
    this.partNo = partNo;
  }

  public UploadFilePart startOffset(Long startOffset) {
    this.startOffset = startOffset;
    return this;
  }

   /**
   * Indexes on byte range. zero-based and inclusive
   * @return startOffset
  **/
  @ApiModelProperty(example = "0", value = "Indexes on byte range. zero-based and inclusive")
  public Long getStartOffset() {
    return startOffset;
  }

  public void setStartOffset(Long startOffset) {
    this.startOffset = startOffset;
  }

  public UploadFilePart endOffset(Long endOffset) {
    this.endOffset = endOffset;
    return this;
  }

   /**
   * Indexes on byte range. zero-based and inclusive
   * @return endOffset
  **/
  @ApiModelProperty(example = "69", value = "Indexes on byte range. zero-based and inclusive")
  public Long getEndOffset() {
    return endOffset;
  }

  public void setEndOffset(Long endOffset) {
    this.endOffset = endOffset;
  }

  public UploadFilePart status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * part status
   * @return status
  **/
  @ApiModelProperty(value = "part status")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public UploadFilePart locked(Boolean locked) {
    this.locked = locked;
    return this;
  }

   /**
   * When a part is being uploaded it is being locked, by setting the locked flag to true. No changes/uploads can happen on this part from other requests.
   * @return locked
  **/
  @ApiModelProperty(value = "When a part is being uploaded it is being locked, by setting the locked flag to true. No changes/uploads can happen on this part from other requests.")
  public Boolean getLocked() {
    return locked;
  }

  public void setLocked(Boolean locked) {
    this.locked = locked;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UploadFilePart uploadFilePart = (UploadFilePart) o;
    return Objects.equals(this.partNo, uploadFilePart.partNo) &&
        Objects.equals(this.startOffset, uploadFilePart.startOffset) &&
        Objects.equals(this.endOffset, uploadFilePart.endOffset) &&
        Objects.equals(this.status, uploadFilePart.status) &&
        Objects.equals(this.locked, uploadFilePart.locked);
  }

  @Override
  public int hashCode() {
    return Objects.hash(partNo, startOffset, endOffset, status, locked);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UploadFilePart {\n");
    
    sb.append("    partNo: ").append(toIndentedString(partNo)).append("\n");
    sb.append("    startOffset: ").append(toIndentedString(startOffset)).append("\n");
    sb.append("    endOffset: ").append(toIndentedString(endOffset)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    locked: ").append(toIndentedString(locked)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

