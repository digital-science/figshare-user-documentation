/*
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AccountReport;
import io.swagger.client.model.Article;
import io.swagger.client.model.ArticleComplete;
import io.swagger.client.model.ArticleCompletePrivate;
import io.swagger.client.model.ArticleConfidentiality;
import io.swagger.client.model.ArticleCreate;
import io.swagger.client.model.ArticleDOI;
import io.swagger.client.model.ArticleEmbargo;
import io.swagger.client.model.ArticleEmbargoUpdater;
import io.swagger.client.model.ArticleHandle;
import io.swagger.client.model.ArticleSearch;
import io.swagger.client.model.ArticleUpdate;
import io.swagger.client.model.ArticleVersions;
import io.swagger.client.model.ArticleWithProject;
import io.swagger.client.model.Author;
import io.swagger.client.model.AuthorsCreator;
import io.swagger.client.model.CategoriesCreator;
import io.swagger.client.model.Category;
import io.swagger.client.model.ConfidentialityCreator;
import io.swagger.client.model.ErrorMessage;
import io.swagger.client.model.FileCreator;
import io.swagger.client.model.FileId;
import io.swagger.client.model.Location;
import io.swagger.client.model.LocationWarnings;
import io.swagger.client.model.LocationWarningsUpdate;
import io.swagger.client.model.PrivateArticleSearch;
import io.swagger.client.model.PrivateFile;
import io.swagger.client.model.PrivateLink;
import io.swagger.client.model.PrivateLinkCreator;
import io.swagger.client.model.PrivateLinkResponse;
import io.swagger.client.model.PublicFile;
import io.swagger.client.model.Resource;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ArticlesApi {
    private ApiClient apiClient;

    public ArticlesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ArticlesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for accountArticleReport
     * @param groupId A group ID to filter by (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call accountArticleReportCall(Long groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/articles/export";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (groupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "group_id", groupId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call accountArticleReportValidateBeforeCall(Long groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = accountArticleReportCall(groupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Account Article Report
     * Return status on all reports generated for the account from the oauth credentials
     * @param groupId A group ID to filter by (optional)
     * @return List&lt;AccountReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AccountReport> accountArticleReport(Long groupId) throws ApiException {
        ApiResponse<List<AccountReport>> resp = accountArticleReportWithHttpInfo(groupId);
        return resp.getData();
    }

    /**
     * Account Article Report
     * Return status on all reports generated for the account from the oauth credentials
     * @param groupId A group ID to filter by (optional)
     * @return ApiResponse&lt;List&lt;AccountReport&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AccountReport>> accountArticleReportWithHttpInfo(Long groupId) throws ApiException {
        com.squareup.okhttp.Call call = accountArticleReportValidateBeforeCall(groupId, null, null);
        Type localVarReturnType = new TypeToken<List<AccountReport>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Account Article Report (asynchronously)
     * Return status on all reports generated for the account from the oauth credentials
     * @param groupId A group ID to filter by (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call accountArticleReportAsync(Long groupId, final ApiCallback<List<AccountReport>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = accountArticleReportValidateBeforeCall(groupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AccountReport>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for accountArticleReportGenerate
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call accountArticleReportGenerateCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/articles/export";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call accountArticleReportGenerateValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = accountArticleReportGenerateCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Initiate a new Report
     * Initiate a new Article Report for this Account. There is a limit of 1 report per day.
     * @return AccountReport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountReport accountArticleReportGenerate() throws ApiException {
        ApiResponse<AccountReport> resp = accountArticleReportGenerateWithHttpInfo();
        return resp.getData();
    }

    /**
     * Initiate a new Report
     * Initiate a new Article Report for this Account. There is a limit of 1 report per day.
     * @return ApiResponse&lt;AccountReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountReport> accountArticleReportGenerateWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = accountArticleReportGenerateValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<AccountReport>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Initiate a new Report (asynchronously)
     * Initiate a new Article Report for this Account. There is a limit of 1 report per day.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call accountArticleReportGenerateAsync(final ApiCallback<AccountReport> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = accountArticleReportGenerateValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountReport>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for articleDetails
     * @param articleId Article Unique identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call articleDetailsCall(Long articleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/articles/{article_id}"
            .replaceAll("\\{" + "article_id" + "\\}", apiClient.escapeString(articleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call articleDetailsValidateBeforeCall(Long articleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling articleDetails(Async)");
        }
        
        
        com.squareup.okhttp.Call call = articleDetailsCall(articleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * View article details
     * View an article
     * @param articleId Article Unique identifier (required)
     * @return ArticleComplete
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ArticleComplete articleDetails(Long articleId) throws ApiException {
        ApiResponse<ArticleComplete> resp = articleDetailsWithHttpInfo(articleId);
        return resp.getData();
    }

    /**
     * View article details
     * View an article
     * @param articleId Article Unique identifier (required)
     * @return ApiResponse&lt;ArticleComplete&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ArticleComplete> articleDetailsWithHttpInfo(Long articleId) throws ApiException {
        com.squareup.okhttp.Call call = articleDetailsValidateBeforeCall(articleId, null, null);
        Type localVarReturnType = new TypeToken<ArticleComplete>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * View article details (asynchronously)
     * View an article
     * @param articleId Article Unique identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call articleDetailsAsync(Long articleId, final ApiCallback<ArticleComplete> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = articleDetailsValidateBeforeCall(articleId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ArticleComplete>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for articleFileDetails
     * @param articleId Article Unique identifier (required)
     * @param fileId File Unique identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call articleFileDetailsCall(Long articleId, Long fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/articles/{article_id}/files/{file_id}"
            .replaceAll("\\{" + "article_id" + "\\}", apiClient.escapeString(articleId.toString()))
            .replaceAll("\\{" + "file_id" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call articleFileDetailsValidateBeforeCall(Long articleId, Long fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling articleFileDetails(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling articleFileDetails(Async)");
        }
        
        
        com.squareup.okhttp.Call call = articleFileDetailsCall(articleId, fileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Article file details
     * File by id
     * @param articleId Article Unique identifier (required)
     * @param fileId File Unique identifier (required)
     * @return PublicFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PublicFile articleFileDetails(Long articleId, Long fileId) throws ApiException {
        ApiResponse<PublicFile> resp = articleFileDetailsWithHttpInfo(articleId, fileId);
        return resp.getData();
    }

    /**
     * Article file details
     * File by id
     * @param articleId Article Unique identifier (required)
     * @param fileId File Unique identifier (required)
     * @return ApiResponse&lt;PublicFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PublicFile> articleFileDetailsWithHttpInfo(Long articleId, Long fileId) throws ApiException {
        com.squareup.okhttp.Call call = articleFileDetailsValidateBeforeCall(articleId, fileId, null, null);
        Type localVarReturnType = new TypeToken<PublicFile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Article file details (asynchronously)
     * File by id
     * @param articleId Article Unique identifier (required)
     * @param fileId File Unique identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call articleFileDetailsAsync(Long articleId, Long fileId, final ApiCallback<PublicFile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = articleFileDetailsValidateBeforeCall(articleId, fileId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PublicFile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for articleFiles
     * @param articleId Article Unique identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call articleFilesCall(Long articleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/articles/{article_id}/files"
            .replaceAll("\\{" + "article_id" + "\\}", apiClient.escapeString(articleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call articleFilesValidateBeforeCall(Long articleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling articleFiles(Async)");
        }
        
        
        com.squareup.okhttp.Call call = articleFilesCall(articleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List article files
     * Files list for article
     * @param articleId Article Unique identifier (required)
     * @return List&lt;PublicFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<PublicFile> articleFiles(Long articleId) throws ApiException {
        ApiResponse<List<PublicFile>> resp = articleFilesWithHttpInfo(articleId);
        return resp.getData();
    }

    /**
     * List article files
     * Files list for article
     * @param articleId Article Unique identifier (required)
     * @return ApiResponse&lt;List&lt;PublicFile&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<PublicFile>> articleFilesWithHttpInfo(Long articleId) throws ApiException {
        com.squareup.okhttp.Call call = articleFilesValidateBeforeCall(articleId, null, null);
        Type localVarReturnType = new TypeToken<List<PublicFile>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List article files (asynchronously)
     * Files list for article
     * @param articleId Article Unique identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call articleFilesAsync(Long articleId, final ApiCallback<List<PublicFile>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = articleFilesValidateBeforeCall(articleId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<PublicFile>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for articleVersionConfidentiality
     * @param articleId Article Unique identifier (required)
     * @param vNumber Version Number (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call articleVersionConfidentialityCall(Long articleId, Long vNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/articles/{article_id}/versions/{v_number}/confidentiality"
            .replaceAll("\\{" + "article_id" + "\\}", apiClient.escapeString(articleId.toString()))
            .replaceAll("\\{" + "v_number" + "\\}", apiClient.escapeString(vNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call articleVersionConfidentialityValidateBeforeCall(Long articleId, Long vNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling articleVersionConfidentiality(Async)");
        }
        
        // verify the required parameter 'vNumber' is set
        if (vNumber == null) {
            throw new ApiException("Missing the required parameter 'vNumber' when calling articleVersionConfidentiality(Async)");
        }
        
        
        com.squareup.okhttp.Call call = articleVersionConfidentialityCall(articleId, vNumber, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Public Article Confidentiality for article version
     * Confidentiality for article version. The confidentiality feature is now deprecated. This has been replaced by the new extended embargo functionality and all items that used to be confidential have now been migrated to items with a permanent embargo on files. All API endpoints related to this functionality will remain for backwards compatibility, but will now be attached to the new extended embargo workflows.
     * @param articleId Article Unique identifier (required)
     * @param vNumber Version Number (required)
     * @return ArticleConfidentiality
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ArticleConfidentiality articleVersionConfidentiality(Long articleId, Long vNumber) throws ApiException {
        ApiResponse<ArticleConfidentiality> resp = articleVersionConfidentialityWithHttpInfo(articleId, vNumber);
        return resp.getData();
    }

    /**
     * Public Article Confidentiality for article version
     * Confidentiality for article version. The confidentiality feature is now deprecated. This has been replaced by the new extended embargo functionality and all items that used to be confidential have now been migrated to items with a permanent embargo on files. All API endpoints related to this functionality will remain for backwards compatibility, but will now be attached to the new extended embargo workflows.
     * @param articleId Article Unique identifier (required)
     * @param vNumber Version Number (required)
     * @return ApiResponse&lt;ArticleConfidentiality&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ArticleConfidentiality> articleVersionConfidentialityWithHttpInfo(Long articleId, Long vNumber) throws ApiException {
        com.squareup.okhttp.Call call = articleVersionConfidentialityValidateBeforeCall(articleId, vNumber, null, null);
        Type localVarReturnType = new TypeToken<ArticleConfidentiality>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Public Article Confidentiality for article version (asynchronously)
     * Confidentiality for article version. The confidentiality feature is now deprecated. This has been replaced by the new extended embargo functionality and all items that used to be confidential have now been migrated to items with a permanent embargo on files. All API endpoints related to this functionality will remain for backwards compatibility, but will now be attached to the new extended embargo workflows.
     * @param articleId Article Unique identifier (required)
     * @param vNumber Version Number (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call articleVersionConfidentialityAsync(Long articleId, Long vNumber, final ApiCallback<ArticleConfidentiality> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = articleVersionConfidentialityValidateBeforeCall(articleId, vNumber, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ArticleConfidentiality>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for articleVersionDetails
     * @param articleId Article Unique identifier (required)
     * @param vNumber Article Version Number (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call articleVersionDetailsCall(Long articleId, Long vNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/articles/{article_id}/versions/{v_number}"
            .replaceAll("\\{" + "article_id" + "\\}", apiClient.escapeString(articleId.toString()))
            .replaceAll("\\{" + "v_number" + "\\}", apiClient.escapeString(vNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call articleVersionDetailsValidateBeforeCall(Long articleId, Long vNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling articleVersionDetails(Async)");
        }
        
        // verify the required parameter 'vNumber' is set
        if (vNumber == null) {
            throw new ApiException("Missing the required parameter 'vNumber' when calling articleVersionDetails(Async)");
        }
        
        
        com.squareup.okhttp.Call call = articleVersionDetailsCall(articleId, vNumber, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Article details for version
     * Article with specified version
     * @param articleId Article Unique identifier (required)
     * @param vNumber Article Version Number (required)
     * @return ArticleComplete
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ArticleComplete articleVersionDetails(Long articleId, Long vNumber) throws ApiException {
        ApiResponse<ArticleComplete> resp = articleVersionDetailsWithHttpInfo(articleId, vNumber);
        return resp.getData();
    }

    /**
     * Article details for version
     * Article with specified version
     * @param articleId Article Unique identifier (required)
     * @param vNumber Article Version Number (required)
     * @return ApiResponse&lt;ArticleComplete&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ArticleComplete> articleVersionDetailsWithHttpInfo(Long articleId, Long vNumber) throws ApiException {
        com.squareup.okhttp.Call call = articleVersionDetailsValidateBeforeCall(articleId, vNumber, null, null);
        Type localVarReturnType = new TypeToken<ArticleComplete>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Article details for version (asynchronously)
     * Article with specified version
     * @param articleId Article Unique identifier (required)
     * @param vNumber Article Version Number (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call articleVersionDetailsAsync(Long articleId, Long vNumber, final ApiCallback<ArticleComplete> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = articleVersionDetailsValidateBeforeCall(articleId, vNumber, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ArticleComplete>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for articleVersionEmbargo
     * @param articleId Article Unique identifier (required)
     * @param vNumber Version Number (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call articleVersionEmbargoCall(Long articleId, Long vNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/articles/{article_id}/versions/{v_number}/embargo"
            .replaceAll("\\{" + "article_id" + "\\}", apiClient.escapeString(articleId.toString()))
            .replaceAll("\\{" + "v_number" + "\\}", apiClient.escapeString(vNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call articleVersionEmbargoValidateBeforeCall(Long articleId, Long vNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling articleVersionEmbargo(Async)");
        }
        
        // verify the required parameter 'vNumber' is set
        if (vNumber == null) {
            throw new ApiException("Missing the required parameter 'vNumber' when calling articleVersionEmbargo(Async)");
        }
        
        
        com.squareup.okhttp.Call call = articleVersionEmbargoCall(articleId, vNumber, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Public Article Embargo for article version
     * Embargo for article version
     * @param articleId Article Unique identifier (required)
     * @param vNumber Version Number (required)
     * @return ArticleEmbargo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ArticleEmbargo articleVersionEmbargo(Long articleId, Long vNumber) throws ApiException {
        ApiResponse<ArticleEmbargo> resp = articleVersionEmbargoWithHttpInfo(articleId, vNumber);
        return resp.getData();
    }

    /**
     * Public Article Embargo for article version
     * Embargo for article version
     * @param articleId Article Unique identifier (required)
     * @param vNumber Version Number (required)
     * @return ApiResponse&lt;ArticleEmbargo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ArticleEmbargo> articleVersionEmbargoWithHttpInfo(Long articleId, Long vNumber) throws ApiException {
        com.squareup.okhttp.Call call = articleVersionEmbargoValidateBeforeCall(articleId, vNumber, null, null);
        Type localVarReturnType = new TypeToken<ArticleEmbargo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Public Article Embargo for article version (asynchronously)
     * Embargo for article version
     * @param articleId Article Unique identifier (required)
     * @param vNumber Version Number (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call articleVersionEmbargoAsync(Long articleId, Long vNumber, final ApiCallback<ArticleEmbargo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = articleVersionEmbargoValidateBeforeCall(articleId, vNumber, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ArticleEmbargo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for articleVersionUpdate
     * @param articleId Article unique identifier (required)
     * @param versionId Article version identifier (required)
     * @param article Article description (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call articleVersionUpdateCall(Long articleId, Long versionId, ArticleUpdate article, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = article;
        
        // create path and map variables
        String localVarPath = "/account/articles/{article_id}/versions/{version_id}/"
            .replaceAll("\\{" + "article_id" + "\\}", apiClient.escapeString(articleId.toString()))
            .replaceAll("\\{" + "version_id" + "\\}", apiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call articleVersionUpdateValidateBeforeCall(Long articleId, Long versionId, ArticleUpdate article, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling articleVersionUpdate(Async)");
        }
        
        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling articleVersionUpdate(Async)");
        }
        
        // verify the required parameter 'article' is set
        if (article == null) {
            throw new ApiException("Missing the required parameter 'article' when calling articleVersionUpdate(Async)");
        }
        
        
        com.squareup.okhttp.Call call = articleVersionUpdateCall(articleId, versionId, article, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update article version
     * Updating an article version by passing body parameters; request can also be made with the PATCH method.
     * @param articleId Article unique identifier (required)
     * @param versionId Article version identifier (required)
     * @param article Article description (required)
     * @return LocationWarningsUpdate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LocationWarningsUpdate articleVersionUpdate(Long articleId, Long versionId, ArticleUpdate article) throws ApiException {
        ApiResponse<LocationWarningsUpdate> resp = articleVersionUpdateWithHttpInfo(articleId, versionId, article);
        return resp.getData();
    }

    /**
     * Update article version
     * Updating an article version by passing body parameters; request can also be made with the PATCH method.
     * @param articleId Article unique identifier (required)
     * @param versionId Article version identifier (required)
     * @param article Article description (required)
     * @return ApiResponse&lt;LocationWarningsUpdate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LocationWarningsUpdate> articleVersionUpdateWithHttpInfo(Long articleId, Long versionId, ArticleUpdate article) throws ApiException {
        com.squareup.okhttp.Call call = articleVersionUpdateValidateBeforeCall(articleId, versionId, article, null, null);
        Type localVarReturnType = new TypeToken<LocationWarningsUpdate>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update article version (asynchronously)
     * Updating an article version by passing body parameters; request can also be made with the PATCH method.
     * @param articleId Article unique identifier (required)
     * @param versionId Article version identifier (required)
     * @param article Article description (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call articleVersionUpdateAsync(Long articleId, Long versionId, ArticleUpdate article, final ApiCallback<LocationWarningsUpdate> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = articleVersionUpdateValidateBeforeCall(articleId, versionId, article, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LocationWarningsUpdate>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for articleVersionUpdateThumb
     * @param articleId Article unique identifier (required)
     * @param versionId Article version identifier (required)
     * @param fileId File ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call articleVersionUpdateThumbCall(Long articleId, Long versionId, FileId fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = fileId;
        
        // create path and map variables
        String localVarPath = "/account/articles/{article_id}/versions/{version_id}/update_thumb"
            .replaceAll("\\{" + "article_id" + "\\}", apiClient.escapeString(articleId.toString()))
            .replaceAll("\\{" + "version_id" + "\\}", apiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call articleVersionUpdateThumbValidateBeforeCall(Long articleId, Long versionId, FileId fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling articleVersionUpdateThumb(Async)");
        }
        
        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling articleVersionUpdateThumb(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling articleVersionUpdateThumb(Async)");
        }
        
        
        com.squareup.okhttp.Call call = articleVersionUpdateThumbCall(articleId, versionId, fileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update article version thumbnail
     * For a given public article version update the article thumbnail by choosing one of the associated files
     * @param articleId Article unique identifier (required)
     * @param versionId Article version identifier (required)
     * @param fileId File ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void articleVersionUpdateThumb(Long articleId, Long versionId, FileId fileId) throws ApiException {
        articleVersionUpdateThumbWithHttpInfo(articleId, versionId, fileId);
    }

    /**
     * Update article version thumbnail
     * For a given public article version update the article thumbnail by choosing one of the associated files
     * @param articleId Article unique identifier (required)
     * @param versionId Article version identifier (required)
     * @param fileId File ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> articleVersionUpdateThumbWithHttpInfo(Long articleId, Long versionId, FileId fileId) throws ApiException {
        com.squareup.okhttp.Call call = articleVersionUpdateThumbValidateBeforeCall(articleId, versionId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update article version thumbnail (asynchronously)
     * For a given public article version update the article thumbnail by choosing one of the associated files
     * @param articleId Article unique identifier (required)
     * @param versionId Article version identifier (required)
     * @param fileId File ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call articleVersionUpdateThumbAsync(Long articleId, Long versionId, FileId fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = articleVersionUpdateThumbValidateBeforeCall(articleId, versionId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for articleVersions
     * @param articleId Article Unique identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call articleVersionsCall(Long articleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/articles/{article_id}/versions"
            .replaceAll("\\{" + "article_id" + "\\}", apiClient.escapeString(articleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call articleVersionsValidateBeforeCall(Long articleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling articleVersions(Async)");
        }
        
        
        com.squareup.okhttp.Call call = articleVersionsCall(articleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List article versions
     * List public article versions
     * @param articleId Article Unique identifier (required)
     * @return List&lt;ArticleVersions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ArticleVersions> articleVersions(Long articleId) throws ApiException {
        ApiResponse<List<ArticleVersions>> resp = articleVersionsWithHttpInfo(articleId);
        return resp.getData();
    }

    /**
     * List article versions
     * List public article versions
     * @param articleId Article Unique identifier (required)
     * @return ApiResponse&lt;List&lt;ArticleVersions&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ArticleVersions>> articleVersionsWithHttpInfo(Long articleId) throws ApiException {
        com.squareup.okhttp.Call call = articleVersionsValidateBeforeCall(articleId, null, null);
        Type localVarReturnType = new TypeToken<List<ArticleVersions>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List article versions (asynchronously)
     * List public article versions
     * @param articleId Article Unique identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call articleVersionsAsync(Long articleId, final ApiCallback<List<ArticleVersions>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = articleVersionsValidateBeforeCall(articleId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ArticleVersions>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for articlesList
     * @param xCursor Unique hash used for bypassing the item retrieval limit of 9,000 entities. When using this parameter, please note that the offset parameter will not be available, but the limit parameter will still work as expected. (optional)
     * @param page Page number. Used for pagination with page_size (optional)
     * @param pageSize The number of results included on a page. Used for pagination with page (optional, default to 10)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @param order The field by which to order. Default varies by endpoint/resource. (optional, default to published_date)
     * @param orderDirection  (optional, default to desc)
     * @param institution only return articles from this institution (optional)
     * @param publishedSince Filter by article publishing date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD (optional)
     * @param modifiedSince Filter by article modified date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD (optional)
     * @param group only return articles from this group (optional)
     * @param resourceDoi only return articles with this resource_doi (optional)
     * @param itemType Only return articles with the respective type. Mapping for item_type is: 1 - Figure, 2 - Media, 3 - Dataset, 5 - Poster, 6 - Journal contribution, 7 - Presentation, 8 - Thesis, 9 - Software, 11 - Online resource, 12 - Preprint, 13 - Book, 14 - Conference contribution, 15 - Chapter, 16 - Peer review, 17 - Educational resource, 18 - Report, 19 - Standard, 20 - Composition, 21 - Funding, 22 - Physical object, 23 - Data management plan, 24 - Workflow, 25 - Monograph, 26 - Performance, 27 - Event, 28 - Service, 29 - Model (optional)
     * @param doi only return articles with this doi (optional)
     * @param handle only return articles with this handle (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call articlesListCall(UUID xCursor, Long page, Long pageSize, Long limit, Long offset, String order, String orderDirection, Long institution, String publishedSince, String modifiedSince, Long group, String resourceDoi, Long itemType, String doi, String handle, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/articles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page_size", pageSize));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "order", order));
        if (orderDirection != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "order_direction", orderDirection));
        if (institution != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "institution", institution));
        if (publishedSince != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "published_since", publishedSince));
        if (modifiedSince != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "modified_since", modifiedSince));
        if (group != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "group", group));
        if (resourceDoi != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "resource_doi", resourceDoi));
        if (itemType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "item_type", itemType));
        if (doi != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "doi", doi));
        if (handle != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "handle", handle));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xCursor != null)
        localVarHeaderParams.put("X-Cursor", apiClient.parameterToString(xCursor));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call articlesListValidateBeforeCall(UUID xCursor, Long page, Long pageSize, Long limit, Long offset, String order, String orderDirection, Long institution, String publishedSince, String modifiedSince, Long group, String resourceDoi, Long itemType, String doi, String handle, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = articlesListCall(xCursor, page, pageSize, limit, offset, order, orderDirection, institution, publishedSince, modifiedSince, group, resourceDoi, itemType, doi, handle, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Public Articles
     * Returns a list of public articles
     * @param xCursor Unique hash used for bypassing the item retrieval limit of 9,000 entities. When using this parameter, please note that the offset parameter will not be available, but the limit parameter will still work as expected. (optional)
     * @param page Page number. Used for pagination with page_size (optional)
     * @param pageSize The number of results included on a page. Used for pagination with page (optional, default to 10)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @param order The field by which to order. Default varies by endpoint/resource. (optional, default to published_date)
     * @param orderDirection  (optional, default to desc)
     * @param institution only return articles from this institution (optional)
     * @param publishedSince Filter by article publishing date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD (optional)
     * @param modifiedSince Filter by article modified date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD (optional)
     * @param group only return articles from this group (optional)
     * @param resourceDoi only return articles with this resource_doi (optional)
     * @param itemType Only return articles with the respective type. Mapping for item_type is: 1 - Figure, 2 - Media, 3 - Dataset, 5 - Poster, 6 - Journal contribution, 7 - Presentation, 8 - Thesis, 9 - Software, 11 - Online resource, 12 - Preprint, 13 - Book, 14 - Conference contribution, 15 - Chapter, 16 - Peer review, 17 - Educational resource, 18 - Report, 19 - Standard, 20 - Composition, 21 - Funding, 22 - Physical object, 23 - Data management plan, 24 - Workflow, 25 - Monograph, 26 - Performance, 27 - Event, 28 - Service, 29 - Model (optional)
     * @param doi only return articles with this doi (optional)
     * @param handle only return articles with this handle (optional)
     * @return List&lt;Article&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Article> articlesList(UUID xCursor, Long page, Long pageSize, Long limit, Long offset, String order, String orderDirection, Long institution, String publishedSince, String modifiedSince, Long group, String resourceDoi, Long itemType, String doi, String handle) throws ApiException {
        ApiResponse<List<Article>> resp = articlesListWithHttpInfo(xCursor, page, pageSize, limit, offset, order, orderDirection, institution, publishedSince, modifiedSince, group, resourceDoi, itemType, doi, handle);
        return resp.getData();
    }

    /**
     * Public Articles
     * Returns a list of public articles
     * @param xCursor Unique hash used for bypassing the item retrieval limit of 9,000 entities. When using this parameter, please note that the offset parameter will not be available, but the limit parameter will still work as expected. (optional)
     * @param page Page number. Used for pagination with page_size (optional)
     * @param pageSize The number of results included on a page. Used for pagination with page (optional, default to 10)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @param order The field by which to order. Default varies by endpoint/resource. (optional, default to published_date)
     * @param orderDirection  (optional, default to desc)
     * @param institution only return articles from this institution (optional)
     * @param publishedSince Filter by article publishing date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD (optional)
     * @param modifiedSince Filter by article modified date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD (optional)
     * @param group only return articles from this group (optional)
     * @param resourceDoi only return articles with this resource_doi (optional)
     * @param itemType Only return articles with the respective type. Mapping for item_type is: 1 - Figure, 2 - Media, 3 - Dataset, 5 - Poster, 6 - Journal contribution, 7 - Presentation, 8 - Thesis, 9 - Software, 11 - Online resource, 12 - Preprint, 13 - Book, 14 - Conference contribution, 15 - Chapter, 16 - Peer review, 17 - Educational resource, 18 - Report, 19 - Standard, 20 - Composition, 21 - Funding, 22 - Physical object, 23 - Data management plan, 24 - Workflow, 25 - Monograph, 26 - Performance, 27 - Event, 28 - Service, 29 - Model (optional)
     * @param doi only return articles with this doi (optional)
     * @param handle only return articles with this handle (optional)
     * @return ApiResponse&lt;List&lt;Article&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Article>> articlesListWithHttpInfo(UUID xCursor, Long page, Long pageSize, Long limit, Long offset, String order, String orderDirection, Long institution, String publishedSince, String modifiedSince, Long group, String resourceDoi, Long itemType, String doi, String handle) throws ApiException {
        com.squareup.okhttp.Call call = articlesListValidateBeforeCall(xCursor, page, pageSize, limit, offset, order, orderDirection, institution, publishedSince, modifiedSince, group, resourceDoi, itemType, doi, handle, null, null);
        Type localVarReturnType = new TypeToken<List<Article>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Public Articles (asynchronously)
     * Returns a list of public articles
     * @param xCursor Unique hash used for bypassing the item retrieval limit of 9,000 entities. When using this parameter, please note that the offset parameter will not be available, but the limit parameter will still work as expected. (optional)
     * @param page Page number. Used for pagination with page_size (optional)
     * @param pageSize The number of results included on a page. Used for pagination with page (optional, default to 10)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @param order The field by which to order. Default varies by endpoint/resource. (optional, default to published_date)
     * @param orderDirection  (optional, default to desc)
     * @param institution only return articles from this institution (optional)
     * @param publishedSince Filter by article publishing date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD (optional)
     * @param modifiedSince Filter by article modified date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD (optional)
     * @param group only return articles from this group (optional)
     * @param resourceDoi only return articles with this resource_doi (optional)
     * @param itemType Only return articles with the respective type. Mapping for item_type is: 1 - Figure, 2 - Media, 3 - Dataset, 5 - Poster, 6 - Journal contribution, 7 - Presentation, 8 - Thesis, 9 - Software, 11 - Online resource, 12 - Preprint, 13 - Book, 14 - Conference contribution, 15 - Chapter, 16 - Peer review, 17 - Educational resource, 18 - Report, 19 - Standard, 20 - Composition, 21 - Funding, 22 - Physical object, 23 - Data management plan, 24 - Workflow, 25 - Monograph, 26 - Performance, 27 - Event, 28 - Service, 29 - Model (optional)
     * @param doi only return articles with this doi (optional)
     * @param handle only return articles with this handle (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call articlesListAsync(UUID xCursor, Long page, Long pageSize, Long limit, Long offset, String order, String orderDirection, Long institution, String publishedSince, String modifiedSince, Long group, String resourceDoi, Long itemType, String doi, String handle, final ApiCallback<List<Article>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = articlesListValidateBeforeCall(xCursor, page, pageSize, limit, offset, order, orderDirection, institution, publishedSince, modifiedSince, group, resourceDoi, itemType, doi, handle, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Article>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for articlesSearch
     * @param xCursor Unique hash used for bypassing the item retrieval limit of 9,000 entities. When using this parameter, please note that the offset parameter will not be available, but the limit parameter will still work as expected. (optional)
     * @param search Search Parameters (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call articlesSearchCall(UUID xCursor, ArticleSearch search, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = search;
        
        // create path and map variables
        String localVarPath = "/articles/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xCursor != null)
        localVarHeaderParams.put("X-Cursor", apiClient.parameterToString(xCursor));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call articlesSearchValidateBeforeCall(UUID xCursor, ArticleSearch search, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = articlesSearchCall(xCursor, search, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Public Articles Search
     * Returns a list of public articles, filtered by the search parameters
     * @param xCursor Unique hash used for bypassing the item retrieval limit of 9,000 entities. When using this parameter, please note that the offset parameter will not be available, but the limit parameter will still work as expected. (optional)
     * @param search Search Parameters (optional)
     * @return List&lt;ArticleWithProject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ArticleWithProject> articlesSearch(UUID xCursor, ArticleSearch search) throws ApiException {
        ApiResponse<List<ArticleWithProject>> resp = articlesSearchWithHttpInfo(xCursor, search);
        return resp.getData();
    }

    /**
     * Public Articles Search
     * Returns a list of public articles, filtered by the search parameters
     * @param xCursor Unique hash used for bypassing the item retrieval limit of 9,000 entities. When using this parameter, please note that the offset parameter will not be available, but the limit parameter will still work as expected. (optional)
     * @param search Search Parameters (optional)
     * @return ApiResponse&lt;List&lt;ArticleWithProject&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ArticleWithProject>> articlesSearchWithHttpInfo(UUID xCursor, ArticleSearch search) throws ApiException {
        com.squareup.okhttp.Call call = articlesSearchValidateBeforeCall(xCursor, search, null, null);
        Type localVarReturnType = new TypeToken<List<ArticleWithProject>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Public Articles Search (asynchronously)
     * Returns a list of public articles, filtered by the search parameters
     * @param xCursor Unique hash used for bypassing the item retrieval limit of 9,000 entities. When using this parameter, please note that the offset parameter will not be available, but the limit parameter will still work as expected. (optional)
     * @param search Search Parameters (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call articlesSearchAsync(UUID xCursor, ArticleSearch search, final ApiCallback<List<ArticleWithProject>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = articlesSearchValidateBeforeCall(xCursor, search, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ArticleWithProject>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateArticleAuthorDelete
     * @param articleId Article unique identifier (required)
     * @param authorId Article Author unique identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateArticleAuthorDeleteCall(Long articleId, Long authorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/articles/{article_id}/authors/{author_id}"
            .replaceAll("\\{" + "article_id" + "\\}", apiClient.escapeString(articleId.toString()))
            .replaceAll("\\{" + "author_id" + "\\}", apiClient.escapeString(authorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateArticleAuthorDeleteValidateBeforeCall(Long articleId, Long authorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling privateArticleAuthorDelete(Async)");
        }
        
        // verify the required parameter 'authorId' is set
        if (authorId == null) {
            throw new ApiException("Missing the required parameter 'authorId' when calling privateArticleAuthorDelete(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateArticleAuthorDeleteCall(articleId, authorId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete article author
     * De-associate author from article
     * @param articleId Article unique identifier (required)
     * @param authorId Article Author unique identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void privateArticleAuthorDelete(Long articleId, Long authorId) throws ApiException {
        privateArticleAuthorDeleteWithHttpInfo(articleId, authorId);
    }

    /**
     * Delete article author
     * De-associate author from article
     * @param articleId Article unique identifier (required)
     * @param authorId Article Author unique identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> privateArticleAuthorDeleteWithHttpInfo(Long articleId, Long authorId) throws ApiException {
        com.squareup.okhttp.Call call = privateArticleAuthorDeleteValidateBeforeCall(articleId, authorId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete article author (asynchronously)
     * De-associate author from article
     * @param articleId Article unique identifier (required)
     * @param authorId Article Author unique identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateArticleAuthorDeleteAsync(Long articleId, Long authorId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateArticleAuthorDeleteValidateBeforeCall(articleId, authorId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for privateArticleAuthorsAdd
     * @param articleId Article unique identifier (required)
     * @param authors Authors description (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateArticleAuthorsAddCall(Long articleId, AuthorsCreator authors, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = authors;
        
        // create path and map variables
        String localVarPath = "/account/articles/{article_id}/authors"
            .replaceAll("\\{" + "article_id" + "\\}", apiClient.escapeString(articleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateArticleAuthorsAddValidateBeforeCall(Long articleId, AuthorsCreator authors, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling privateArticleAuthorsAdd(Async)");
        }
        
        // verify the required parameter 'authors' is set
        if (authors == null) {
            throw new ApiException("Missing the required parameter 'authors' when calling privateArticleAuthorsAdd(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateArticleAuthorsAddCall(articleId, authors, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add article authors
     * Associate new authors with the article. This will add new authors to the list of already associated authors
     * @param articleId Article unique identifier (required)
     * @param authors Authors description (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void privateArticleAuthorsAdd(Long articleId, AuthorsCreator authors) throws ApiException {
        privateArticleAuthorsAddWithHttpInfo(articleId, authors);
    }

    /**
     * Add article authors
     * Associate new authors with the article. This will add new authors to the list of already associated authors
     * @param articleId Article unique identifier (required)
     * @param authors Authors description (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> privateArticleAuthorsAddWithHttpInfo(Long articleId, AuthorsCreator authors) throws ApiException {
        com.squareup.okhttp.Call call = privateArticleAuthorsAddValidateBeforeCall(articleId, authors, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add article authors (asynchronously)
     * Associate new authors with the article. This will add new authors to the list of already associated authors
     * @param articleId Article unique identifier (required)
     * @param authors Authors description (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateArticleAuthorsAddAsync(Long articleId, AuthorsCreator authors, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateArticleAuthorsAddValidateBeforeCall(articleId, authors, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for privateArticleAuthorsList
     * @param articleId Article unique identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateArticleAuthorsListCall(Long articleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/articles/{article_id}/authors"
            .replaceAll("\\{" + "article_id" + "\\}", apiClient.escapeString(articleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateArticleAuthorsListValidateBeforeCall(Long articleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling privateArticleAuthorsList(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateArticleAuthorsListCall(articleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List article authors
     * List article authors
     * @param articleId Article unique identifier (required)
     * @return List&lt;Author&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Author> privateArticleAuthorsList(Long articleId) throws ApiException {
        ApiResponse<List<Author>> resp = privateArticleAuthorsListWithHttpInfo(articleId);
        return resp.getData();
    }

    /**
     * List article authors
     * List article authors
     * @param articleId Article unique identifier (required)
     * @return ApiResponse&lt;List&lt;Author&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Author>> privateArticleAuthorsListWithHttpInfo(Long articleId) throws ApiException {
        com.squareup.okhttp.Call call = privateArticleAuthorsListValidateBeforeCall(articleId, null, null);
        Type localVarReturnType = new TypeToken<List<Author>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List article authors (asynchronously)
     * List article authors
     * @param articleId Article unique identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateArticleAuthorsListAsync(Long articleId, final ApiCallback<List<Author>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateArticleAuthorsListValidateBeforeCall(articleId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Author>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateArticleAuthorsReplace
     * @param articleId Article unique identifier (required)
     * @param authors Authors description (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateArticleAuthorsReplaceCall(Long articleId, AuthorsCreator authors, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = authors;
        
        // create path and map variables
        String localVarPath = "/account/articles/{article_id}/authors"
            .replaceAll("\\{" + "article_id" + "\\}", apiClient.escapeString(articleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateArticleAuthorsReplaceValidateBeforeCall(Long articleId, AuthorsCreator authors, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling privateArticleAuthorsReplace(Async)");
        }
        
        // verify the required parameter 'authors' is set
        if (authors == null) {
            throw new ApiException("Missing the required parameter 'authors' when calling privateArticleAuthorsReplace(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateArticleAuthorsReplaceCall(articleId, authors, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Replace article authors
     * Associate new authors with the article. This will remove all already associated authors and add these new ones
     * @param articleId Article unique identifier (required)
     * @param authors Authors description (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void privateArticleAuthorsReplace(Long articleId, AuthorsCreator authors) throws ApiException {
        privateArticleAuthorsReplaceWithHttpInfo(articleId, authors);
    }

    /**
     * Replace article authors
     * Associate new authors with the article. This will remove all already associated authors and add these new ones
     * @param articleId Article unique identifier (required)
     * @param authors Authors description (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> privateArticleAuthorsReplaceWithHttpInfo(Long articleId, AuthorsCreator authors) throws ApiException {
        com.squareup.okhttp.Call call = privateArticleAuthorsReplaceValidateBeforeCall(articleId, authors, null, null);
        return apiClient.execute(call);
    }

    /**
     * Replace article authors (asynchronously)
     * Associate new authors with the article. This will remove all already associated authors and add these new ones
     * @param articleId Article unique identifier (required)
     * @param authors Authors description (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateArticleAuthorsReplaceAsync(Long articleId, AuthorsCreator authors, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateArticleAuthorsReplaceValidateBeforeCall(articleId, authors, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for privateArticleCategoriesAdd
     * @param articleId Article unique identifier (required)
     * @param categories  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateArticleCategoriesAddCall(Long articleId, CategoriesCreator categories, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = categories;
        
        // create path and map variables
        String localVarPath = "/account/articles/{article_id}/categories"
            .replaceAll("\\{" + "article_id" + "\\}", apiClient.escapeString(articleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateArticleCategoriesAddValidateBeforeCall(Long articleId, CategoriesCreator categories, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling privateArticleCategoriesAdd(Async)");
        }
        
        // verify the required parameter 'categories' is set
        if (categories == null) {
            throw new ApiException("Missing the required parameter 'categories' when calling privateArticleCategoriesAdd(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateArticleCategoriesAddCall(articleId, categories, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add article categories
     * Associate new categories with the article. This will add new categories to the list of already associated categories
     * @param articleId Article unique identifier (required)
     * @param categories  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void privateArticleCategoriesAdd(Long articleId, CategoriesCreator categories) throws ApiException {
        privateArticleCategoriesAddWithHttpInfo(articleId, categories);
    }

    /**
     * Add article categories
     * Associate new categories with the article. This will add new categories to the list of already associated categories
     * @param articleId Article unique identifier (required)
     * @param categories  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> privateArticleCategoriesAddWithHttpInfo(Long articleId, CategoriesCreator categories) throws ApiException {
        com.squareup.okhttp.Call call = privateArticleCategoriesAddValidateBeforeCall(articleId, categories, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add article categories (asynchronously)
     * Associate new categories with the article. This will add new categories to the list of already associated categories
     * @param articleId Article unique identifier (required)
     * @param categories  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateArticleCategoriesAddAsync(Long articleId, CategoriesCreator categories, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateArticleCategoriesAddValidateBeforeCall(articleId, categories, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for privateArticleCategoriesList
     * @param articleId Article unique identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateArticleCategoriesListCall(Long articleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/articles/{article_id}/categories"
            .replaceAll("\\{" + "article_id" + "\\}", apiClient.escapeString(articleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateArticleCategoriesListValidateBeforeCall(Long articleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling privateArticleCategoriesList(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateArticleCategoriesListCall(articleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List article categories
     * List article categories
     * @param articleId Article unique identifier (required)
     * @return List&lt;Category&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Category> privateArticleCategoriesList(Long articleId) throws ApiException {
        ApiResponse<List<Category>> resp = privateArticleCategoriesListWithHttpInfo(articleId);
        return resp.getData();
    }

    /**
     * List article categories
     * List article categories
     * @param articleId Article unique identifier (required)
     * @return ApiResponse&lt;List&lt;Category&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Category>> privateArticleCategoriesListWithHttpInfo(Long articleId) throws ApiException {
        com.squareup.okhttp.Call call = privateArticleCategoriesListValidateBeforeCall(articleId, null, null);
        Type localVarReturnType = new TypeToken<List<Category>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List article categories (asynchronously)
     * List article categories
     * @param articleId Article unique identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateArticleCategoriesListAsync(Long articleId, final ApiCallback<List<Category>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateArticleCategoriesListValidateBeforeCall(articleId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Category>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateArticleCategoriesReplace
     * @param articleId Article unique identifier (required)
     * @param categories  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateArticleCategoriesReplaceCall(Long articleId, CategoriesCreator categories, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = categories;
        
        // create path and map variables
        String localVarPath = "/account/articles/{article_id}/categories"
            .replaceAll("\\{" + "article_id" + "\\}", apiClient.escapeString(articleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateArticleCategoriesReplaceValidateBeforeCall(Long articleId, CategoriesCreator categories, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling privateArticleCategoriesReplace(Async)");
        }
        
        // verify the required parameter 'categories' is set
        if (categories == null) {
            throw new ApiException("Missing the required parameter 'categories' when calling privateArticleCategoriesReplace(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateArticleCategoriesReplaceCall(articleId, categories, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Replace article categories
     * Associate new categories with the article. This will remove all already associated categories and add these new ones
     * @param articleId Article unique identifier (required)
     * @param categories  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void privateArticleCategoriesReplace(Long articleId, CategoriesCreator categories) throws ApiException {
        privateArticleCategoriesReplaceWithHttpInfo(articleId, categories);
    }

    /**
     * Replace article categories
     * Associate new categories with the article. This will remove all already associated categories and add these new ones
     * @param articleId Article unique identifier (required)
     * @param categories  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> privateArticleCategoriesReplaceWithHttpInfo(Long articleId, CategoriesCreator categories) throws ApiException {
        com.squareup.okhttp.Call call = privateArticleCategoriesReplaceValidateBeforeCall(articleId, categories, null, null);
        return apiClient.execute(call);
    }

    /**
     * Replace article categories (asynchronously)
     * Associate new categories with the article. This will remove all already associated categories and add these new ones
     * @param articleId Article unique identifier (required)
     * @param categories  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateArticleCategoriesReplaceAsync(Long articleId, CategoriesCreator categories, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateArticleCategoriesReplaceValidateBeforeCall(articleId, categories, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for privateArticleCategoryDelete
     * @param articleId Article unique identifier (required)
     * @param categoryId Category unique identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateArticleCategoryDeleteCall(Long articleId, Long categoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/articles/{article_id}/categories/{category_id}"
            .replaceAll("\\{" + "article_id" + "\\}", apiClient.escapeString(articleId.toString()))
            .replaceAll("\\{" + "category_id" + "\\}", apiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateArticleCategoryDeleteValidateBeforeCall(Long articleId, Long categoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling privateArticleCategoryDelete(Async)");
        }
        
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling privateArticleCategoryDelete(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateArticleCategoryDeleteCall(articleId, categoryId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete article category
     * De-associate category from article
     * @param articleId Article unique identifier (required)
     * @param categoryId Category unique identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void privateArticleCategoryDelete(Long articleId, Long categoryId) throws ApiException {
        privateArticleCategoryDeleteWithHttpInfo(articleId, categoryId);
    }

    /**
     * Delete article category
     * De-associate category from article
     * @param articleId Article unique identifier (required)
     * @param categoryId Category unique identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> privateArticleCategoryDeleteWithHttpInfo(Long articleId, Long categoryId) throws ApiException {
        com.squareup.okhttp.Call call = privateArticleCategoryDeleteValidateBeforeCall(articleId, categoryId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete article category (asynchronously)
     * De-associate category from article
     * @param articleId Article unique identifier (required)
     * @param categoryId Category unique identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateArticleCategoryDeleteAsync(Long articleId, Long categoryId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateArticleCategoryDeleteValidateBeforeCall(articleId, categoryId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for privateArticleConfidentialityDelete
     * @param articleId Article unique identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateArticleConfidentialityDeleteCall(Long articleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/articles/{article_id}/confidentiality"
            .replaceAll("\\{" + "article_id" + "\\}", apiClient.escapeString(articleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateArticleConfidentialityDeleteValidateBeforeCall(Long articleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling privateArticleConfidentialityDelete(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateArticleConfidentialityDeleteCall(articleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete article confidentiality
     * Delete confidentiality settings. The confidentiality feature is now deprecated. This has been replaced by the new extended embargo functionality and all items that used to be confidential have now been migrated to items with a permanent embargo on files. All API endpoints related to this functionality will remain for backwards compatibility, but will now be attached to the new extended embargo workflows.
     * @param articleId Article unique identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void privateArticleConfidentialityDelete(Long articleId) throws ApiException {
        privateArticleConfidentialityDeleteWithHttpInfo(articleId);
    }

    /**
     * Delete article confidentiality
     * Delete confidentiality settings. The confidentiality feature is now deprecated. This has been replaced by the new extended embargo functionality and all items that used to be confidential have now been migrated to items with a permanent embargo on files. All API endpoints related to this functionality will remain for backwards compatibility, but will now be attached to the new extended embargo workflows.
     * @param articleId Article unique identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> privateArticleConfidentialityDeleteWithHttpInfo(Long articleId) throws ApiException {
        com.squareup.okhttp.Call call = privateArticleConfidentialityDeleteValidateBeforeCall(articleId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete article confidentiality (asynchronously)
     * Delete confidentiality settings. The confidentiality feature is now deprecated. This has been replaced by the new extended embargo functionality and all items that used to be confidential have now been migrated to items with a permanent embargo on files. All API endpoints related to this functionality will remain for backwards compatibility, but will now be attached to the new extended embargo workflows.
     * @param articleId Article unique identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateArticleConfidentialityDeleteAsync(Long articleId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateArticleConfidentialityDeleteValidateBeforeCall(articleId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for privateArticleConfidentialityDetails
     * @param articleId Article unique identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateArticleConfidentialityDetailsCall(Long articleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/articles/{article_id}/confidentiality"
            .replaceAll("\\{" + "article_id" + "\\}", apiClient.escapeString(articleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateArticleConfidentialityDetailsValidateBeforeCall(Long articleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling privateArticleConfidentialityDetails(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateArticleConfidentialityDetailsCall(articleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Article confidentiality details
     * View confidentiality settings. The confidentiality feature is now deprecated. This has been replaced by the new extended embargo functionality and all items that used to be confidential have now been migrated to items with a permanent embargo on files. All API endpoints related to this functionality will remain for backwards compatibility, but will now be attached to the new extended embargo workflows.
     * @param articleId Article unique identifier (required)
     * @return ArticleConfidentiality
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ArticleConfidentiality privateArticleConfidentialityDetails(Long articleId) throws ApiException {
        ApiResponse<ArticleConfidentiality> resp = privateArticleConfidentialityDetailsWithHttpInfo(articleId);
        return resp.getData();
    }

    /**
     * Article confidentiality details
     * View confidentiality settings. The confidentiality feature is now deprecated. This has been replaced by the new extended embargo functionality and all items that used to be confidential have now been migrated to items with a permanent embargo on files. All API endpoints related to this functionality will remain for backwards compatibility, but will now be attached to the new extended embargo workflows.
     * @param articleId Article unique identifier (required)
     * @return ApiResponse&lt;ArticleConfidentiality&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ArticleConfidentiality> privateArticleConfidentialityDetailsWithHttpInfo(Long articleId) throws ApiException {
        com.squareup.okhttp.Call call = privateArticleConfidentialityDetailsValidateBeforeCall(articleId, null, null);
        Type localVarReturnType = new TypeToken<ArticleConfidentiality>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Article confidentiality details (asynchronously)
     * View confidentiality settings. The confidentiality feature is now deprecated. This has been replaced by the new extended embargo functionality and all items that used to be confidential have now been migrated to items with a permanent embargo on files. All API endpoints related to this functionality will remain for backwards compatibility, but will now be attached to the new extended embargo workflows.
     * @param articleId Article unique identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateArticleConfidentialityDetailsAsync(Long articleId, final ApiCallback<ArticleConfidentiality> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateArticleConfidentialityDetailsValidateBeforeCall(articleId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ArticleConfidentiality>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateArticleConfidentialityUpdate
     * @param articleId Article unique identifier (required)
     * @param reason  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateArticleConfidentialityUpdateCall(Long articleId, ConfidentialityCreator reason, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = reason;
        
        // create path and map variables
        String localVarPath = "/account/articles/{article_id}/confidentiality"
            .replaceAll("\\{" + "article_id" + "\\}", apiClient.escapeString(articleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateArticleConfidentialityUpdateValidateBeforeCall(Long articleId, ConfidentialityCreator reason, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling privateArticleConfidentialityUpdate(Async)");
        }
        
        // verify the required parameter 'reason' is set
        if (reason == null) {
            throw new ApiException("Missing the required parameter 'reason' when calling privateArticleConfidentialityUpdate(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateArticleConfidentialityUpdateCall(articleId, reason, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update article confidentiality
     * Update confidentiality settings. The confidentiality feature is now deprecated. This has been replaced by the new extended embargo functionality and all items that used to be confidential have now been migrated to items with a permanent embargo on files. All API endpoints related to this functionality will remain for backwards compatibility, but will now be attached to the new extended embargo workflows.
     * @param articleId Article unique identifier (required)
     * @param reason  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void privateArticleConfidentialityUpdate(Long articleId, ConfidentialityCreator reason) throws ApiException {
        privateArticleConfidentialityUpdateWithHttpInfo(articleId, reason);
    }

    /**
     * Update article confidentiality
     * Update confidentiality settings. The confidentiality feature is now deprecated. This has been replaced by the new extended embargo functionality and all items that used to be confidential have now been migrated to items with a permanent embargo on files. All API endpoints related to this functionality will remain for backwards compatibility, but will now be attached to the new extended embargo workflows.
     * @param articleId Article unique identifier (required)
     * @param reason  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> privateArticleConfidentialityUpdateWithHttpInfo(Long articleId, ConfidentialityCreator reason) throws ApiException {
        com.squareup.okhttp.Call call = privateArticleConfidentialityUpdateValidateBeforeCall(articleId, reason, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update article confidentiality (asynchronously)
     * Update confidentiality settings. The confidentiality feature is now deprecated. This has been replaced by the new extended embargo functionality and all items that used to be confidential have now been migrated to items with a permanent embargo on files. All API endpoints related to this functionality will remain for backwards compatibility, but will now be attached to the new extended embargo workflows.
     * @param articleId Article unique identifier (required)
     * @param reason  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateArticleConfidentialityUpdateAsync(Long articleId, ConfidentialityCreator reason, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateArticleConfidentialityUpdateValidateBeforeCall(articleId, reason, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for privateArticleCreate
     * @param article Article description (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateArticleCreateCall(ArticleCreate article, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = article;
        
        // create path and map variables
        String localVarPath = "/account/articles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateArticleCreateValidateBeforeCall(ArticleCreate article, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'article' is set
        if (article == null) {
            throw new ApiException("Missing the required parameter 'article' when calling privateArticleCreate(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateArticleCreateCall(article, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create new Article
     * Create a new Article by sending article information
     * @param article Article description (required)
     * @return LocationWarnings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LocationWarnings privateArticleCreate(ArticleCreate article) throws ApiException {
        ApiResponse<LocationWarnings> resp = privateArticleCreateWithHttpInfo(article);
        return resp.getData();
    }

    /**
     * Create new Article
     * Create a new Article by sending article information
     * @param article Article description (required)
     * @return ApiResponse&lt;LocationWarnings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LocationWarnings> privateArticleCreateWithHttpInfo(ArticleCreate article) throws ApiException {
        com.squareup.okhttp.Call call = privateArticleCreateValidateBeforeCall(article, null, null);
        Type localVarReturnType = new TypeToken<LocationWarnings>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create new Article (asynchronously)
     * Create a new Article by sending article information
     * @param article Article description (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateArticleCreateAsync(ArticleCreate article, final ApiCallback<LocationWarnings> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateArticleCreateValidateBeforeCall(article, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LocationWarnings>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateArticleDelete
     * @param articleId Article unique identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateArticleDeleteCall(Long articleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/articles/{article_id}"
            .replaceAll("\\{" + "article_id" + "\\}", apiClient.escapeString(articleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateArticleDeleteValidateBeforeCall(Long articleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling privateArticleDelete(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateArticleDeleteCall(articleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete article
     * Delete an article
     * @param articleId Article unique identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void privateArticleDelete(Long articleId) throws ApiException {
        privateArticleDeleteWithHttpInfo(articleId);
    }

    /**
     * Delete article
     * Delete an article
     * @param articleId Article unique identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> privateArticleDeleteWithHttpInfo(Long articleId) throws ApiException {
        com.squareup.okhttp.Call call = privateArticleDeleteValidateBeforeCall(articleId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete article (asynchronously)
     * Delete an article
     * @param articleId Article unique identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateArticleDeleteAsync(Long articleId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateArticleDeleteValidateBeforeCall(articleId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for privateArticleDetails
     * @param articleId Article unique identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateArticleDetailsCall(Long articleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/articles/{article_id}"
            .replaceAll("\\{" + "article_id" + "\\}", apiClient.escapeString(articleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateArticleDetailsValidateBeforeCall(Long articleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling privateArticleDetails(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateArticleDetailsCall(articleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Article details
     * View a private article
     * @param articleId Article unique identifier (required)
     * @return ArticleCompletePrivate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ArticleCompletePrivate privateArticleDetails(Long articleId) throws ApiException {
        ApiResponse<ArticleCompletePrivate> resp = privateArticleDetailsWithHttpInfo(articleId);
        return resp.getData();
    }

    /**
     * Article details
     * View a private article
     * @param articleId Article unique identifier (required)
     * @return ApiResponse&lt;ArticleCompletePrivate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ArticleCompletePrivate> privateArticleDetailsWithHttpInfo(Long articleId) throws ApiException {
        com.squareup.okhttp.Call call = privateArticleDetailsValidateBeforeCall(articleId, null, null);
        Type localVarReturnType = new TypeToken<ArticleCompletePrivate>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Article details (asynchronously)
     * View a private article
     * @param articleId Article unique identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateArticleDetailsAsync(Long articleId, final ApiCallback<ArticleCompletePrivate> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateArticleDetailsValidateBeforeCall(articleId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ArticleCompletePrivate>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateArticleEmbargoDelete
     * @param articleId Article unique identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateArticleEmbargoDeleteCall(Long articleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/articles/{article_id}/embargo"
            .replaceAll("\\{" + "article_id" + "\\}", apiClient.escapeString(articleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateArticleEmbargoDeleteValidateBeforeCall(Long articleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling privateArticleEmbargoDelete(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateArticleEmbargoDeleteCall(articleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Article Embargo
     * Will lift the embargo for the specified article
     * @param articleId Article unique identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void privateArticleEmbargoDelete(Long articleId) throws ApiException {
        privateArticleEmbargoDeleteWithHttpInfo(articleId);
    }

    /**
     * Delete Article Embargo
     * Will lift the embargo for the specified article
     * @param articleId Article unique identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> privateArticleEmbargoDeleteWithHttpInfo(Long articleId) throws ApiException {
        com.squareup.okhttp.Call call = privateArticleEmbargoDeleteValidateBeforeCall(articleId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete Article Embargo (asynchronously)
     * Will lift the embargo for the specified article
     * @param articleId Article unique identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateArticleEmbargoDeleteAsync(Long articleId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateArticleEmbargoDeleteValidateBeforeCall(articleId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for privateArticleEmbargoDetails
     * @param articleId Article unique identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateArticleEmbargoDetailsCall(Long articleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/articles/{article_id}/embargo"
            .replaceAll("\\{" + "article_id" + "\\}", apiClient.escapeString(articleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateArticleEmbargoDetailsValidateBeforeCall(Long articleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling privateArticleEmbargoDetails(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateArticleEmbargoDetailsCall(articleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Article Embargo Details
     * View a private article embargo details
     * @param articleId Article unique identifier (required)
     * @return ArticleEmbargo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ArticleEmbargo privateArticleEmbargoDetails(Long articleId) throws ApiException {
        ApiResponse<ArticleEmbargo> resp = privateArticleEmbargoDetailsWithHttpInfo(articleId);
        return resp.getData();
    }

    /**
     * Article Embargo Details
     * View a private article embargo details
     * @param articleId Article unique identifier (required)
     * @return ApiResponse&lt;ArticleEmbargo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ArticleEmbargo> privateArticleEmbargoDetailsWithHttpInfo(Long articleId) throws ApiException {
        com.squareup.okhttp.Call call = privateArticleEmbargoDetailsValidateBeforeCall(articleId, null, null);
        Type localVarReturnType = new TypeToken<ArticleEmbargo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Article Embargo Details (asynchronously)
     * View a private article embargo details
     * @param articleId Article unique identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateArticleEmbargoDetailsAsync(Long articleId, final ApiCallback<ArticleEmbargo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateArticleEmbargoDetailsValidateBeforeCall(articleId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ArticleEmbargo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateArticleEmbargoUpdate
     * @param articleId Article unique identifier (required)
     * @param embargo Embargo description (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateArticleEmbargoUpdateCall(Long articleId, ArticleEmbargoUpdater embargo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = embargo;
        
        // create path and map variables
        String localVarPath = "/account/articles/{article_id}/embargo"
            .replaceAll("\\{" + "article_id" + "\\}", apiClient.escapeString(articleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateArticleEmbargoUpdateValidateBeforeCall(Long articleId, ArticleEmbargoUpdater embargo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling privateArticleEmbargoUpdate(Async)");
        }
        
        // verify the required parameter 'embargo' is set
        if (embargo == null) {
            throw new ApiException("Missing the required parameter 'embargo' when calling privateArticleEmbargoUpdate(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateArticleEmbargoUpdateCall(articleId, embargo, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update Article Embargo
     * Note: setting an article under whole embargo does not imply that the article will be published when the embargo will expire. You must explicitly call the publish endpoint to enable this functionality.
     * @param articleId Article unique identifier (required)
     * @param embargo Embargo description (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void privateArticleEmbargoUpdate(Long articleId, ArticleEmbargoUpdater embargo) throws ApiException {
        privateArticleEmbargoUpdateWithHttpInfo(articleId, embargo);
    }

    /**
     * Update Article Embargo
     * Note: setting an article under whole embargo does not imply that the article will be published when the embargo will expire. You must explicitly call the publish endpoint to enable this functionality.
     * @param articleId Article unique identifier (required)
     * @param embargo Embargo description (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> privateArticleEmbargoUpdateWithHttpInfo(Long articleId, ArticleEmbargoUpdater embargo) throws ApiException {
        com.squareup.okhttp.Call call = privateArticleEmbargoUpdateValidateBeforeCall(articleId, embargo, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update Article Embargo (asynchronously)
     * Note: setting an article under whole embargo does not imply that the article will be published when the embargo will expire. You must explicitly call the publish endpoint to enable this functionality.
     * @param articleId Article unique identifier (required)
     * @param embargo Embargo description (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateArticleEmbargoUpdateAsync(Long articleId, ArticleEmbargoUpdater embargo, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateArticleEmbargoUpdateValidateBeforeCall(articleId, embargo, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for privateArticleFile
     * @param articleId Article unique identifier (required)
     * @param fileId File unique identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateArticleFileCall(Long articleId, Long fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/articles/{article_id}/files/{file_id}"
            .replaceAll("\\{" + "article_id" + "\\}", apiClient.escapeString(articleId.toString()))
            .replaceAll("\\{" + "file_id" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateArticleFileValidateBeforeCall(Long articleId, Long fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling privateArticleFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling privateArticleFile(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateArticleFileCall(articleId, fileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Single File
     * View details of file for specified article
     * @param articleId Article unique identifier (required)
     * @param fileId File unique identifier (required)
     * @return PrivateFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PrivateFile privateArticleFile(Long articleId, Long fileId) throws ApiException {
        ApiResponse<PrivateFile> resp = privateArticleFileWithHttpInfo(articleId, fileId);
        return resp.getData();
    }

    /**
     * Single File
     * View details of file for specified article
     * @param articleId Article unique identifier (required)
     * @param fileId File unique identifier (required)
     * @return ApiResponse&lt;PrivateFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PrivateFile> privateArticleFileWithHttpInfo(Long articleId, Long fileId) throws ApiException {
        com.squareup.okhttp.Call call = privateArticleFileValidateBeforeCall(articleId, fileId, null, null);
        Type localVarReturnType = new TypeToken<PrivateFile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Single File (asynchronously)
     * View details of file for specified article
     * @param articleId Article unique identifier (required)
     * @param fileId File unique identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateArticleFileAsync(Long articleId, Long fileId, final ApiCallback<PrivateFile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateArticleFileValidateBeforeCall(articleId, fileId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PrivateFile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateArticleFileDelete
     * @param articleId Article unique identifier (required)
     * @param fileId File unique identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateArticleFileDeleteCall(Long articleId, Long fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/articles/{article_id}/files/{file_id}"
            .replaceAll("\\{" + "article_id" + "\\}", apiClient.escapeString(articleId.toString()))
            .replaceAll("\\{" + "file_id" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateArticleFileDeleteValidateBeforeCall(Long articleId, Long fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling privateArticleFileDelete(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling privateArticleFileDelete(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateArticleFileDeleteCall(articleId, fileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * File Delete
     * Complete file upload
     * @param articleId Article unique identifier (required)
     * @param fileId File unique identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void privateArticleFileDelete(Long articleId, Long fileId) throws ApiException {
        privateArticleFileDeleteWithHttpInfo(articleId, fileId);
    }

    /**
     * File Delete
     * Complete file upload
     * @param articleId Article unique identifier (required)
     * @param fileId File unique identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> privateArticleFileDeleteWithHttpInfo(Long articleId, Long fileId) throws ApiException {
        com.squareup.okhttp.Call call = privateArticleFileDeleteValidateBeforeCall(articleId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * File Delete (asynchronously)
     * Complete file upload
     * @param articleId Article unique identifier (required)
     * @param fileId File unique identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateArticleFileDeleteAsync(Long articleId, Long fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateArticleFileDeleteValidateBeforeCall(articleId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for privateArticleFilesList
     * @param articleId Article unique identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateArticleFilesListCall(Long articleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/articles/{article_id}/files"
            .replaceAll("\\{" + "article_id" + "\\}", apiClient.escapeString(articleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateArticleFilesListValidateBeforeCall(Long articleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling privateArticleFilesList(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateArticleFilesListCall(articleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List article files
     * List private files
     * @param articleId Article unique identifier (required)
     * @return List&lt;PrivateFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<PrivateFile> privateArticleFilesList(Long articleId) throws ApiException {
        ApiResponse<List<PrivateFile>> resp = privateArticleFilesListWithHttpInfo(articleId);
        return resp.getData();
    }

    /**
     * List article files
     * List private files
     * @param articleId Article unique identifier (required)
     * @return ApiResponse&lt;List&lt;PrivateFile&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<PrivateFile>> privateArticleFilesListWithHttpInfo(Long articleId) throws ApiException {
        com.squareup.okhttp.Call call = privateArticleFilesListValidateBeforeCall(articleId, null, null);
        Type localVarReturnType = new TypeToken<List<PrivateFile>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List article files (asynchronously)
     * List private files
     * @param articleId Article unique identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateArticleFilesListAsync(Long articleId, final ApiCallback<List<PrivateFile>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateArticleFilesListValidateBeforeCall(articleId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<PrivateFile>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateArticlePrivateLink
     * @param articleId Article unique identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateArticlePrivateLinkCall(Long articleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/articles/{article_id}/private_links"
            .replaceAll("\\{" + "article_id" + "\\}", apiClient.escapeString(articleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateArticlePrivateLinkValidateBeforeCall(Long articleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling privateArticlePrivateLink(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateArticlePrivateLinkCall(articleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List private links
     * List private links
     * @param articleId Article unique identifier (required)
     * @return List&lt;PrivateLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<PrivateLink> privateArticlePrivateLink(Long articleId) throws ApiException {
        ApiResponse<List<PrivateLink>> resp = privateArticlePrivateLinkWithHttpInfo(articleId);
        return resp.getData();
    }

    /**
     * List private links
     * List private links
     * @param articleId Article unique identifier (required)
     * @return ApiResponse&lt;List&lt;PrivateLink&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<PrivateLink>> privateArticlePrivateLinkWithHttpInfo(Long articleId) throws ApiException {
        com.squareup.okhttp.Call call = privateArticlePrivateLinkValidateBeforeCall(articleId, null, null);
        Type localVarReturnType = new TypeToken<List<PrivateLink>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List private links (asynchronously)
     * List private links
     * @param articleId Article unique identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateArticlePrivateLinkAsync(Long articleId, final ApiCallback<List<PrivateLink>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateArticlePrivateLinkValidateBeforeCall(articleId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<PrivateLink>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateArticlePrivateLinkCreate
     * @param articleId Article unique identifier (required)
     * @param privateLink  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateArticlePrivateLinkCreateCall(Long articleId, PrivateLinkCreator privateLink, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = privateLink;
        
        // create path and map variables
        String localVarPath = "/account/articles/{article_id}/private_links"
            .replaceAll("\\{" + "article_id" + "\\}", apiClient.escapeString(articleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateArticlePrivateLinkCreateValidateBeforeCall(Long articleId, PrivateLinkCreator privateLink, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling privateArticlePrivateLinkCreate(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateArticlePrivateLinkCreateCall(articleId, privateLink, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create private link
     * Create new private link for this article
     * @param articleId Article unique identifier (required)
     * @param privateLink  (optional)
     * @return PrivateLinkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PrivateLinkResponse privateArticlePrivateLinkCreate(Long articleId, PrivateLinkCreator privateLink) throws ApiException {
        ApiResponse<PrivateLinkResponse> resp = privateArticlePrivateLinkCreateWithHttpInfo(articleId, privateLink);
        return resp.getData();
    }

    /**
     * Create private link
     * Create new private link for this article
     * @param articleId Article unique identifier (required)
     * @param privateLink  (optional)
     * @return ApiResponse&lt;PrivateLinkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PrivateLinkResponse> privateArticlePrivateLinkCreateWithHttpInfo(Long articleId, PrivateLinkCreator privateLink) throws ApiException {
        com.squareup.okhttp.Call call = privateArticlePrivateLinkCreateValidateBeforeCall(articleId, privateLink, null, null);
        Type localVarReturnType = new TypeToken<PrivateLinkResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create private link (asynchronously)
     * Create new private link for this article
     * @param articleId Article unique identifier (required)
     * @param privateLink  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateArticlePrivateLinkCreateAsync(Long articleId, PrivateLinkCreator privateLink, final ApiCallback<PrivateLinkResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateArticlePrivateLinkCreateValidateBeforeCall(articleId, privateLink, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PrivateLinkResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateArticlePrivateLinkDelete
     * @param articleId Article unique identifier (required)
     * @param linkId Private link token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateArticlePrivateLinkDeleteCall(Long articleId, String linkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/articles/{article_id}/private_links/{link_id}"
            .replaceAll("\\{" + "article_id" + "\\}", apiClient.escapeString(articleId.toString()))
            .replaceAll("\\{" + "link_id" + "\\}", apiClient.escapeString(linkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateArticlePrivateLinkDeleteValidateBeforeCall(Long articleId, String linkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling privateArticlePrivateLinkDelete(Async)");
        }
        
        // verify the required parameter 'linkId' is set
        if (linkId == null) {
            throw new ApiException("Missing the required parameter 'linkId' when calling privateArticlePrivateLinkDelete(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateArticlePrivateLinkDeleteCall(articleId, linkId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Disable private link
     * Disable/delete private link for this article
     * @param articleId Article unique identifier (required)
     * @param linkId Private link token (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void privateArticlePrivateLinkDelete(Long articleId, String linkId) throws ApiException {
        privateArticlePrivateLinkDeleteWithHttpInfo(articleId, linkId);
    }

    /**
     * Disable private link
     * Disable/delete private link for this article
     * @param articleId Article unique identifier (required)
     * @param linkId Private link token (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> privateArticlePrivateLinkDeleteWithHttpInfo(Long articleId, String linkId) throws ApiException {
        com.squareup.okhttp.Call call = privateArticlePrivateLinkDeleteValidateBeforeCall(articleId, linkId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Disable private link (asynchronously)
     * Disable/delete private link for this article
     * @param articleId Article unique identifier (required)
     * @param linkId Private link token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateArticlePrivateLinkDeleteAsync(Long articleId, String linkId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateArticlePrivateLinkDeleteValidateBeforeCall(articleId, linkId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for privateArticlePrivateLinkUpdate
     * @param articleId Article unique identifier (required)
     * @param linkId Private link token (required)
     * @param privateLink  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateArticlePrivateLinkUpdateCall(Long articleId, String linkId, PrivateLinkCreator privateLink, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = privateLink;
        
        // create path and map variables
        String localVarPath = "/account/articles/{article_id}/private_links/{link_id}"
            .replaceAll("\\{" + "article_id" + "\\}", apiClient.escapeString(articleId.toString()))
            .replaceAll("\\{" + "link_id" + "\\}", apiClient.escapeString(linkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateArticlePrivateLinkUpdateValidateBeforeCall(Long articleId, String linkId, PrivateLinkCreator privateLink, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling privateArticlePrivateLinkUpdate(Async)");
        }
        
        // verify the required parameter 'linkId' is set
        if (linkId == null) {
            throw new ApiException("Missing the required parameter 'linkId' when calling privateArticlePrivateLinkUpdate(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateArticlePrivateLinkUpdateCall(articleId, linkId, privateLink, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update private link
     * Update existing private link for this article
     * @param articleId Article unique identifier (required)
     * @param linkId Private link token (required)
     * @param privateLink  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void privateArticlePrivateLinkUpdate(Long articleId, String linkId, PrivateLinkCreator privateLink) throws ApiException {
        privateArticlePrivateLinkUpdateWithHttpInfo(articleId, linkId, privateLink);
    }

    /**
     * Update private link
     * Update existing private link for this article
     * @param articleId Article unique identifier (required)
     * @param linkId Private link token (required)
     * @param privateLink  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> privateArticlePrivateLinkUpdateWithHttpInfo(Long articleId, String linkId, PrivateLinkCreator privateLink) throws ApiException {
        com.squareup.okhttp.Call call = privateArticlePrivateLinkUpdateValidateBeforeCall(articleId, linkId, privateLink, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update private link (asynchronously)
     * Update existing private link for this article
     * @param articleId Article unique identifier (required)
     * @param linkId Private link token (required)
     * @param privateLink  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateArticlePrivateLinkUpdateAsync(Long articleId, String linkId, PrivateLinkCreator privateLink, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateArticlePrivateLinkUpdateValidateBeforeCall(articleId, linkId, privateLink, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for privateArticlePublish
     * @param articleId Article unique identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateArticlePublishCall(Long articleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/articles/{article_id}/publish"
            .replaceAll("\\{" + "article_id" + "\\}", apiClient.escapeString(articleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateArticlePublishValidateBeforeCall(Long articleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling privateArticlePublish(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateArticlePublishCall(articleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Private Article Publish
     * - If the whole article is under embargo, it will not be published immediately, but when the embargo expires or is lifted. - When an article is published, a new public version will be generated. Any further updates to the article will affect the private article data. In order to make these changes publicly visible, an explicit publish operation is needed.
     * @param articleId Article unique identifier (required)
     * @return Location
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Location privateArticlePublish(Long articleId) throws ApiException {
        ApiResponse<Location> resp = privateArticlePublishWithHttpInfo(articleId);
        return resp.getData();
    }

    /**
     * Private Article Publish
     * - If the whole article is under embargo, it will not be published immediately, but when the embargo expires or is lifted. - When an article is published, a new public version will be generated. Any further updates to the article will affect the private article data. In order to make these changes publicly visible, an explicit publish operation is needed.
     * @param articleId Article unique identifier (required)
     * @return ApiResponse&lt;Location&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Location> privateArticlePublishWithHttpInfo(Long articleId) throws ApiException {
        com.squareup.okhttp.Call call = privateArticlePublishValidateBeforeCall(articleId, null, null);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Private Article Publish (asynchronously)
     * - If the whole article is under embargo, it will not be published immediately, but when the embargo expires or is lifted. - When an article is published, a new public version will be generated. Any further updates to the article will affect the private article data. In order to make these changes publicly visible, an explicit publish operation is needed.
     * @param articleId Article unique identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateArticlePublishAsync(Long articleId, final ApiCallback<Location> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateArticlePublishValidateBeforeCall(articleId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateArticleReserveDoi
     * @param articleId Article unique identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateArticleReserveDoiCall(Long articleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/articles/{article_id}/reserve_doi"
            .replaceAll("\\{" + "article_id" + "\\}", apiClient.escapeString(articleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateArticleReserveDoiValidateBeforeCall(Long articleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling privateArticleReserveDoi(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateArticleReserveDoiCall(articleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Private Article Reserve DOI
     * Reserve DOI for article
     * @param articleId Article unique identifier (required)
     * @return ArticleDOI
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ArticleDOI privateArticleReserveDoi(Long articleId) throws ApiException {
        ApiResponse<ArticleDOI> resp = privateArticleReserveDoiWithHttpInfo(articleId);
        return resp.getData();
    }

    /**
     * Private Article Reserve DOI
     * Reserve DOI for article
     * @param articleId Article unique identifier (required)
     * @return ApiResponse&lt;ArticleDOI&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ArticleDOI> privateArticleReserveDoiWithHttpInfo(Long articleId) throws ApiException {
        com.squareup.okhttp.Call call = privateArticleReserveDoiValidateBeforeCall(articleId, null, null);
        Type localVarReturnType = new TypeToken<ArticleDOI>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Private Article Reserve DOI (asynchronously)
     * Reserve DOI for article
     * @param articleId Article unique identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateArticleReserveDoiAsync(Long articleId, final ApiCallback<ArticleDOI> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateArticleReserveDoiValidateBeforeCall(articleId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ArticleDOI>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateArticleReserveHandle
     * @param articleId Article unique identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateArticleReserveHandleCall(Long articleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/articles/{article_id}/reserve_handle"
            .replaceAll("\\{" + "article_id" + "\\}", apiClient.escapeString(articleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateArticleReserveHandleValidateBeforeCall(Long articleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling privateArticleReserveHandle(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateArticleReserveHandleCall(articleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Private Article Reserve Handle
     * Reserve Handle for article
     * @param articleId Article unique identifier (required)
     * @return ArticleHandle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ArticleHandle privateArticleReserveHandle(Long articleId) throws ApiException {
        ApiResponse<ArticleHandle> resp = privateArticleReserveHandleWithHttpInfo(articleId);
        return resp.getData();
    }

    /**
     * Private Article Reserve Handle
     * Reserve Handle for article
     * @param articleId Article unique identifier (required)
     * @return ApiResponse&lt;ArticleHandle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ArticleHandle> privateArticleReserveHandleWithHttpInfo(Long articleId) throws ApiException {
        com.squareup.okhttp.Call call = privateArticleReserveHandleValidateBeforeCall(articleId, null, null);
        Type localVarReturnType = new TypeToken<ArticleHandle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Private Article Reserve Handle (asynchronously)
     * Reserve Handle for article
     * @param articleId Article unique identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateArticleReserveHandleAsync(Long articleId, final ApiCallback<ArticleHandle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateArticleReserveHandleValidateBeforeCall(articleId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ArticleHandle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateArticleResource
     * @param articleId Article unique identifier (required)
     * @param resource Resource data (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateArticleResourceCall(Long articleId, Resource resource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = resource;
        
        // create path and map variables
        String localVarPath = "/account/articles/{article_id}/resource"
            .replaceAll("\\{" + "article_id" + "\\}", apiClient.escapeString(articleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateArticleResourceValidateBeforeCall(Long articleId, Resource resource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling privateArticleResource(Async)");
        }
        
        // verify the required parameter 'resource' is set
        if (resource == null) {
            throw new ApiException("Missing the required parameter 'resource' when calling privateArticleResource(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateArticleResourceCall(articleId, resource, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Private Article Resource
     * Edit article resource data.
     * @param articleId Article unique identifier (required)
     * @param resource Resource data (required)
     * @return Location
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Location privateArticleResource(Long articleId, Resource resource) throws ApiException {
        ApiResponse<Location> resp = privateArticleResourceWithHttpInfo(articleId, resource);
        return resp.getData();
    }

    /**
     * Private Article Resource
     * Edit article resource data.
     * @param articleId Article unique identifier (required)
     * @param resource Resource data (required)
     * @return ApiResponse&lt;Location&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Location> privateArticleResourceWithHttpInfo(Long articleId, Resource resource) throws ApiException {
        com.squareup.okhttp.Call call = privateArticleResourceValidateBeforeCall(articleId, resource, null, null);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Private Article Resource (asynchronously)
     * Edit article resource data.
     * @param articleId Article unique identifier (required)
     * @param resource Resource data (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateArticleResourceAsync(Long articleId, Resource resource, final ApiCallback<Location> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateArticleResourceValidateBeforeCall(articleId, resource, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateArticleUpdate
     * @param articleId Article unique identifier (required)
     * @param article Article description (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateArticleUpdateCall(Long articleId, ArticleUpdate article, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = article;
        
        // create path and map variables
        String localVarPath = "/account/articles/{article_id}"
            .replaceAll("\\{" + "article_id" + "\\}", apiClient.escapeString(articleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateArticleUpdateValidateBeforeCall(Long articleId, ArticleUpdate article, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling privateArticleUpdate(Async)");
        }
        
        // verify the required parameter 'article' is set
        if (article == null) {
            throw new ApiException("Missing the required parameter 'article' when calling privateArticleUpdate(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateArticleUpdateCall(articleId, article, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update article
     * Updating an article by passing body parameters; request can also be made with the PATCH method.
     * @param articleId Article unique identifier (required)
     * @param article Article description (required)
     * @return LocationWarningsUpdate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LocationWarningsUpdate privateArticleUpdate(Long articleId, ArticleUpdate article) throws ApiException {
        ApiResponse<LocationWarningsUpdate> resp = privateArticleUpdateWithHttpInfo(articleId, article);
        return resp.getData();
    }

    /**
     * Update article
     * Updating an article by passing body parameters; request can also be made with the PATCH method.
     * @param articleId Article unique identifier (required)
     * @param article Article description (required)
     * @return ApiResponse&lt;LocationWarningsUpdate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LocationWarningsUpdate> privateArticleUpdateWithHttpInfo(Long articleId, ArticleUpdate article) throws ApiException {
        com.squareup.okhttp.Call call = privateArticleUpdateValidateBeforeCall(articleId, article, null, null);
        Type localVarReturnType = new TypeToken<LocationWarningsUpdate>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update article (asynchronously)
     * Updating an article by passing body parameters; request can also be made with the PATCH method.
     * @param articleId Article unique identifier (required)
     * @param article Article description (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateArticleUpdateAsync(Long articleId, ArticleUpdate article, final ApiCallback<LocationWarningsUpdate> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateArticleUpdateValidateBeforeCall(articleId, article, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LocationWarningsUpdate>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateArticleUploadComplete
     * @param articleId Article unique identifier (required)
     * @param fileId File unique identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateArticleUploadCompleteCall(Long articleId, Long fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/articles/{article_id}/files/{file_id}"
            .replaceAll("\\{" + "article_id" + "\\}", apiClient.escapeString(articleId.toString()))
            .replaceAll("\\{" + "file_id" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateArticleUploadCompleteValidateBeforeCall(Long articleId, Long fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling privateArticleUploadComplete(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling privateArticleUploadComplete(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateArticleUploadCompleteCall(articleId, fileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Complete Upload
     * Complete file upload
     * @param articleId Article unique identifier (required)
     * @param fileId File unique identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void privateArticleUploadComplete(Long articleId, Long fileId) throws ApiException {
        privateArticleUploadCompleteWithHttpInfo(articleId, fileId);
    }

    /**
     * Complete Upload
     * Complete file upload
     * @param articleId Article unique identifier (required)
     * @param fileId File unique identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> privateArticleUploadCompleteWithHttpInfo(Long articleId, Long fileId) throws ApiException {
        com.squareup.okhttp.Call call = privateArticleUploadCompleteValidateBeforeCall(articleId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Complete Upload (asynchronously)
     * Complete file upload
     * @param articleId Article unique identifier (required)
     * @param fileId File unique identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateArticleUploadCompleteAsync(Long articleId, Long fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateArticleUploadCompleteValidateBeforeCall(articleId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for privateArticleUploadInitiate
     * @param articleId Article unique identifier (required)
     * @param file  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateArticleUploadInitiateCall(Long articleId, FileCreator file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = file;
        
        // create path and map variables
        String localVarPath = "/account/articles/{article_id}/files"
            .replaceAll("\\{" + "article_id" + "\\}", apiClient.escapeString(articleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateArticleUploadInitiateValidateBeforeCall(Long articleId, FileCreator file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling privateArticleUploadInitiate(Async)");
        }
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling privateArticleUploadInitiate(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateArticleUploadInitiateCall(articleId, file, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Initiate Upload
     * Initiate a new file upload within the article. Either use the link property to point to an existing file that resides elsewhere and will not be uploaded to Figshare or use the other 3 parameters (md5, name, size).
     * @param articleId Article unique identifier (required)
     * @param file  (required)
     * @return Location
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Location privateArticleUploadInitiate(Long articleId, FileCreator file) throws ApiException {
        ApiResponse<Location> resp = privateArticleUploadInitiateWithHttpInfo(articleId, file);
        return resp.getData();
    }

    /**
     * Initiate Upload
     * Initiate a new file upload within the article. Either use the link property to point to an existing file that resides elsewhere and will not be uploaded to Figshare or use the other 3 parameters (md5, name, size).
     * @param articleId Article unique identifier (required)
     * @param file  (required)
     * @return ApiResponse&lt;Location&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Location> privateArticleUploadInitiateWithHttpInfo(Long articleId, FileCreator file) throws ApiException {
        com.squareup.okhttp.Call call = privateArticleUploadInitiateValidateBeforeCall(articleId, file, null, null);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Initiate Upload (asynchronously)
     * Initiate a new file upload within the article. Either use the link property to point to an existing file that resides elsewhere and will not be uploaded to Figshare or use the other 3 parameters (md5, name, size).
     * @param articleId Article unique identifier (required)
     * @param file  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateArticleUploadInitiateAsync(Long articleId, FileCreator file, final ApiCallback<Location> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateArticleUploadInitiateValidateBeforeCall(articleId, file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateArticlesList
     * @param page Page number. Used for pagination with page_size (optional)
     * @param pageSize The number of results included on a page. Used for pagination with page (optional, default to 10)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateArticlesListCall(Long page, Long pageSize, Long limit, Long offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/articles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page_size", pageSize));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateArticlesListValidateBeforeCall(Long page, Long pageSize, Long limit, Long offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = privateArticlesListCall(page, pageSize, limit, offset, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Private Articles
     * Get Own Articles
     * @param page Page number. Used for pagination with page_size (optional)
     * @param pageSize The number of results included on a page. Used for pagination with page (optional, default to 10)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @return List&lt;Article&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Article> privateArticlesList(Long page, Long pageSize, Long limit, Long offset) throws ApiException {
        ApiResponse<List<Article>> resp = privateArticlesListWithHttpInfo(page, pageSize, limit, offset);
        return resp.getData();
    }

    /**
     * Private Articles
     * Get Own Articles
     * @param page Page number. Used for pagination with page_size (optional)
     * @param pageSize The number of results included on a page. Used for pagination with page (optional, default to 10)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @return ApiResponse&lt;List&lt;Article&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Article>> privateArticlesListWithHttpInfo(Long page, Long pageSize, Long limit, Long offset) throws ApiException {
        com.squareup.okhttp.Call call = privateArticlesListValidateBeforeCall(page, pageSize, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<List<Article>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Private Articles (asynchronously)
     * Get Own Articles
     * @param page Page number. Used for pagination with page_size (optional)
     * @param pageSize The number of results included on a page. Used for pagination with page (optional, default to 10)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateArticlesListAsync(Long page, Long pageSize, Long limit, Long offset, final ApiCallback<List<Article>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateArticlesListValidateBeforeCall(page, pageSize, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Article>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateArticlesSearch
     * @param search Search Parameters (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateArticlesSearchCall(PrivateArticleSearch search, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = search;
        
        // create path and map variables
        String localVarPath = "/account/articles/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateArticlesSearchValidateBeforeCall(PrivateArticleSearch search, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'search' is set
        if (search == null) {
            throw new ApiException("Missing the required parameter 'search' when calling privateArticlesSearch(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateArticlesSearchCall(search, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Private Articles search
     * Returns a list of private articles filtered by the search parameters
     * @param search Search Parameters (required)
     * @return List&lt;ArticleWithProject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ArticleWithProject> privateArticlesSearch(PrivateArticleSearch search) throws ApiException {
        ApiResponse<List<ArticleWithProject>> resp = privateArticlesSearchWithHttpInfo(search);
        return resp.getData();
    }

    /**
     * Private Articles search
     * Returns a list of private articles filtered by the search parameters
     * @param search Search Parameters (required)
     * @return ApiResponse&lt;List&lt;ArticleWithProject&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ArticleWithProject>> privateArticlesSearchWithHttpInfo(PrivateArticleSearch search) throws ApiException {
        com.squareup.okhttp.Call call = privateArticlesSearchValidateBeforeCall(search, null, null);
        Type localVarReturnType = new TypeToken<List<ArticleWithProject>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Private Articles search (asynchronously)
     * Returns a list of private articles filtered by the search parameters
     * @param search Search Parameters (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateArticlesSearchAsync(PrivateArticleSearch search, final ApiCallback<List<ArticleWithProject>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateArticlesSearchValidateBeforeCall(search, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ArticleWithProject>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
