/*
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Article;
import io.swagger.client.model.ArticleProjectCreate;
import io.swagger.client.model.CreateProjectResponse;
import io.swagger.client.model.ErrorMessage;
import io.swagger.client.model.Location;
import io.swagger.client.model.PrivateFile;
import io.swagger.client.model.Project;
import io.swagger.client.model.ProjectArticle;
import io.swagger.client.model.ProjectCollaborator;
import io.swagger.client.model.ProjectCollaboratorInvite;
import io.swagger.client.model.ProjectComplete;
import io.swagger.client.model.ProjectCompletePrivate;
import io.swagger.client.model.ProjectCreate;
import io.swagger.client.model.ProjectNote;
import io.swagger.client.model.ProjectNoteCreate;
import io.swagger.client.model.ProjectNotePrivate;
import io.swagger.client.model.ProjectPrivate;
import io.swagger.client.model.ProjectUpdate;
import io.swagger.client.model.ProjectsSearch;
import io.swagger.client.model.ResponseMessage;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProjectsApi {
    private ApiClient apiClient;

    public ProjectsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for privateProjectArticleDelete
     * @param projectId Project unique identifier (required)
     * @param articleId Project Article unique identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateProjectArticleDeleteCall(Long projectId, Long articleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/projects/{project_id}/articles/{article_id}"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "article_id" + "\\}", apiClient.escapeString(articleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateProjectArticleDeleteValidateBeforeCall(Long projectId, Long articleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling privateProjectArticleDelete(Async)");
        }
        
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling privateProjectArticleDelete(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateProjectArticleDeleteCall(projectId, articleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete project article
     * Delete project article
     * @param projectId Project unique identifier (required)
     * @param articleId Project Article unique identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void privateProjectArticleDelete(Long projectId, Long articleId) throws ApiException {
        privateProjectArticleDeleteWithHttpInfo(projectId, articleId);
    }

    /**
     * Delete project article
     * Delete project article
     * @param projectId Project unique identifier (required)
     * @param articleId Project Article unique identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> privateProjectArticleDeleteWithHttpInfo(Long projectId, Long articleId) throws ApiException {
        com.squareup.okhttp.Call call = privateProjectArticleDeleteValidateBeforeCall(projectId, articleId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete project article (asynchronously)
     * Delete project article
     * @param projectId Project unique identifier (required)
     * @param articleId Project Article unique identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateProjectArticleDeleteAsync(Long projectId, Long articleId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateProjectArticleDeleteValidateBeforeCall(projectId, articleId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for privateProjectArticleDetails
     * @param projectId Project unique identifier (required)
     * @param articleId Project Article unique identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateProjectArticleDetailsCall(Long projectId, Long articleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/projects/{project_id}/articles/{article_id}"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "article_id" + "\\}", apiClient.escapeString(articleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateProjectArticleDetailsValidateBeforeCall(Long projectId, Long articleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling privateProjectArticleDetails(Async)");
        }
        
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling privateProjectArticleDetails(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateProjectArticleDetailsCall(projectId, articleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Project article details
     * Project article details
     * @param projectId Project unique identifier (required)
     * @param articleId Project Article unique identifier (required)
     * @return ProjectArticle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProjectArticle privateProjectArticleDetails(Long projectId, Long articleId) throws ApiException {
        ApiResponse<ProjectArticle> resp = privateProjectArticleDetailsWithHttpInfo(projectId, articleId);
        return resp.getData();
    }

    /**
     * Project article details
     * Project article details
     * @param projectId Project unique identifier (required)
     * @param articleId Project Article unique identifier (required)
     * @return ApiResponse&lt;ProjectArticle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProjectArticle> privateProjectArticleDetailsWithHttpInfo(Long projectId, Long articleId) throws ApiException {
        com.squareup.okhttp.Call call = privateProjectArticleDetailsValidateBeforeCall(projectId, articleId, null, null);
        Type localVarReturnType = new TypeToken<ProjectArticle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Project article details (asynchronously)
     * Project article details
     * @param projectId Project unique identifier (required)
     * @param articleId Project Article unique identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateProjectArticleDetailsAsync(Long projectId, Long articleId, final ApiCallback<ProjectArticle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateProjectArticleDetailsValidateBeforeCall(projectId, articleId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProjectArticle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateProjectArticleFile
     * @param projectId Project unique identifier (required)
     * @param articleId Project Article unique identifier (required)
     * @param fileId File unique identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateProjectArticleFileCall(Long projectId, Long articleId, Long fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/projects/{project_id}/articles/{article_id}/files/{file_id}"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "article_id" + "\\}", apiClient.escapeString(articleId.toString()))
            .replaceAll("\\{" + "file_id" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateProjectArticleFileValidateBeforeCall(Long projectId, Long articleId, Long fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling privateProjectArticleFile(Async)");
        }
        
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling privateProjectArticleFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling privateProjectArticleFile(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateProjectArticleFileCall(projectId, articleId, fileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Project article file details
     * Project article file details
     * @param projectId Project unique identifier (required)
     * @param articleId Project Article unique identifier (required)
     * @param fileId File unique identifier (required)
     * @return PrivateFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PrivateFile privateProjectArticleFile(Long projectId, Long articleId, Long fileId) throws ApiException {
        ApiResponse<PrivateFile> resp = privateProjectArticleFileWithHttpInfo(projectId, articleId, fileId);
        return resp.getData();
    }

    /**
     * Project article file details
     * Project article file details
     * @param projectId Project unique identifier (required)
     * @param articleId Project Article unique identifier (required)
     * @param fileId File unique identifier (required)
     * @return ApiResponse&lt;PrivateFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PrivateFile> privateProjectArticleFileWithHttpInfo(Long projectId, Long articleId, Long fileId) throws ApiException {
        com.squareup.okhttp.Call call = privateProjectArticleFileValidateBeforeCall(projectId, articleId, fileId, null, null);
        Type localVarReturnType = new TypeToken<PrivateFile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Project article file details (asynchronously)
     * Project article file details
     * @param projectId Project unique identifier (required)
     * @param articleId Project Article unique identifier (required)
     * @param fileId File unique identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateProjectArticleFileAsync(Long projectId, Long articleId, Long fileId, final ApiCallback<PrivateFile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateProjectArticleFileValidateBeforeCall(projectId, articleId, fileId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PrivateFile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateProjectArticleFiles
     * @param projectId Project unique identifier (required)
     * @param articleId Project Article unique identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateProjectArticleFilesCall(Long projectId, Long articleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/projects/{project_id}/articles/{article_id}/files"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "article_id" + "\\}", apiClient.escapeString(articleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateProjectArticleFilesValidateBeforeCall(Long projectId, Long articleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling privateProjectArticleFiles(Async)");
        }
        
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling privateProjectArticleFiles(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateProjectArticleFilesCall(projectId, articleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Project article list files
     * List article files
     * @param projectId Project unique identifier (required)
     * @param articleId Project Article unique identifier (required)
     * @return List&lt;PrivateFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<PrivateFile> privateProjectArticleFiles(Long projectId, Long articleId) throws ApiException {
        ApiResponse<List<PrivateFile>> resp = privateProjectArticleFilesWithHttpInfo(projectId, articleId);
        return resp.getData();
    }

    /**
     * Project article list files
     * List article files
     * @param projectId Project unique identifier (required)
     * @param articleId Project Article unique identifier (required)
     * @return ApiResponse&lt;List&lt;PrivateFile&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<PrivateFile>> privateProjectArticleFilesWithHttpInfo(Long projectId, Long articleId) throws ApiException {
        com.squareup.okhttp.Call call = privateProjectArticleFilesValidateBeforeCall(projectId, articleId, null, null);
        Type localVarReturnType = new TypeToken<List<PrivateFile>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Project article list files (asynchronously)
     * List article files
     * @param projectId Project unique identifier (required)
     * @param articleId Project Article unique identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateProjectArticleFilesAsync(Long projectId, Long articleId, final ApiCallback<List<PrivateFile>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateProjectArticleFilesValidateBeforeCall(projectId, articleId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<PrivateFile>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateProjectArticlesCreate
     * @param projectId Project unique identifier (required)
     * @param article Article description (required)
     * @param page Page number. Used for pagination with page_size (optional)
     * @param pageSize The number of results included on a page. Used for pagination with page (optional, default to 10)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateProjectArticlesCreateCall(Long projectId, ArticleProjectCreate article, Long page, Long pageSize, Long limit, Long offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = article;
        
        // create path and map variables
        String localVarPath = "/account/projects/{project_id}/articles"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page_size", pageSize));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateProjectArticlesCreateValidateBeforeCall(Long projectId, ArticleProjectCreate article, Long page, Long pageSize, Long limit, Long offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling privateProjectArticlesCreate(Async)");
        }
        
        // verify the required parameter 'article' is set
        if (article == null) {
            throw new ApiException("Missing the required parameter 'article' when calling privateProjectArticlesCreate(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateProjectArticlesCreateCall(projectId, article, page, pageSize, limit, offset, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create project article
     * Create a new Article and associate it with this project
     * @param projectId Project unique identifier (required)
     * @param article Article description (required)
     * @param page Page number. Used for pagination with page_size (optional)
     * @param pageSize The number of results included on a page. Used for pagination with page (optional, default to 10)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @return Location
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Location privateProjectArticlesCreate(Long projectId, ArticleProjectCreate article, Long page, Long pageSize, Long limit, Long offset) throws ApiException {
        ApiResponse<Location> resp = privateProjectArticlesCreateWithHttpInfo(projectId, article, page, pageSize, limit, offset);
        return resp.getData();
    }

    /**
     * Create project article
     * Create a new Article and associate it with this project
     * @param projectId Project unique identifier (required)
     * @param article Article description (required)
     * @param page Page number. Used for pagination with page_size (optional)
     * @param pageSize The number of results included on a page. Used for pagination with page (optional, default to 10)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @return ApiResponse&lt;Location&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Location> privateProjectArticlesCreateWithHttpInfo(Long projectId, ArticleProjectCreate article, Long page, Long pageSize, Long limit, Long offset) throws ApiException {
        com.squareup.okhttp.Call call = privateProjectArticlesCreateValidateBeforeCall(projectId, article, page, pageSize, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create project article (asynchronously)
     * Create a new Article and associate it with this project
     * @param projectId Project unique identifier (required)
     * @param article Article description (required)
     * @param page Page number. Used for pagination with page_size (optional)
     * @param pageSize The number of results included on a page. Used for pagination with page (optional, default to 10)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateProjectArticlesCreateAsync(Long projectId, ArticleProjectCreate article, Long page, Long pageSize, Long limit, Long offset, final ApiCallback<Location> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateProjectArticlesCreateValidateBeforeCall(projectId, article, page, pageSize, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateProjectArticlesList
     * @param projectId Project unique identifier (required)
     * @param page Page number. Used for pagination with page_size (optional)
     * @param pageSize The number of results included on a page. Used for pagination with page (optional, default to 10)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateProjectArticlesListCall(Long projectId, Long page, Long pageSize, Long limit, Long offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/projects/{project_id}/articles"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page_size", pageSize));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateProjectArticlesListValidateBeforeCall(Long projectId, Long page, Long pageSize, Long limit, Long offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling privateProjectArticlesList(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateProjectArticlesListCall(projectId, page, pageSize, limit, offset, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List project articles
     * List project articles
     * @param projectId Project unique identifier (required)
     * @param page Page number. Used for pagination with page_size (optional)
     * @param pageSize The number of results included on a page. Used for pagination with page (optional, default to 10)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @return List&lt;Article&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Article> privateProjectArticlesList(Long projectId, Long page, Long pageSize, Long limit, Long offset) throws ApiException {
        ApiResponse<List<Article>> resp = privateProjectArticlesListWithHttpInfo(projectId, page, pageSize, limit, offset);
        return resp.getData();
    }

    /**
     * List project articles
     * List project articles
     * @param projectId Project unique identifier (required)
     * @param page Page number. Used for pagination with page_size (optional)
     * @param pageSize The number of results included on a page. Used for pagination with page (optional, default to 10)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @return ApiResponse&lt;List&lt;Article&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Article>> privateProjectArticlesListWithHttpInfo(Long projectId, Long page, Long pageSize, Long limit, Long offset) throws ApiException {
        com.squareup.okhttp.Call call = privateProjectArticlesListValidateBeforeCall(projectId, page, pageSize, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<List<Article>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List project articles (asynchronously)
     * List project articles
     * @param projectId Project unique identifier (required)
     * @param page Page number. Used for pagination with page_size (optional)
     * @param pageSize The number of results included on a page. Used for pagination with page (optional, default to 10)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateProjectArticlesListAsync(Long projectId, Long page, Long pageSize, Long limit, Long offset, final ApiCallback<List<Article>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateProjectArticlesListValidateBeforeCall(projectId, page, pageSize, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Article>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateProjectCollaboratorDelete
     * @param projectId Project unique identifier (required)
     * @param userId User unique identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateProjectCollaboratorDeleteCall(Long projectId, Long userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/projects/{project_id}/collaborators/{user_id}"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateProjectCollaboratorDeleteValidateBeforeCall(Long projectId, Long userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling privateProjectCollaboratorDelete(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling privateProjectCollaboratorDelete(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateProjectCollaboratorDeleteCall(projectId, userId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Remove project collaborator
     * Remove project collaborator
     * @param projectId Project unique identifier (required)
     * @param userId User unique identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void privateProjectCollaboratorDelete(Long projectId, Long userId) throws ApiException {
        privateProjectCollaboratorDeleteWithHttpInfo(projectId, userId);
    }

    /**
     * Remove project collaborator
     * Remove project collaborator
     * @param projectId Project unique identifier (required)
     * @param userId User unique identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> privateProjectCollaboratorDeleteWithHttpInfo(Long projectId, Long userId) throws ApiException {
        com.squareup.okhttp.Call call = privateProjectCollaboratorDeleteValidateBeforeCall(projectId, userId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Remove project collaborator (asynchronously)
     * Remove project collaborator
     * @param projectId Project unique identifier (required)
     * @param userId User unique identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateProjectCollaboratorDeleteAsync(Long projectId, Long userId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateProjectCollaboratorDeleteValidateBeforeCall(projectId, userId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for privateProjectCollaboratorsInvite
     * @param projectId Project unique identifier (required)
     * @param collaborator viewer or collaborator role. User user_id or email of user (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateProjectCollaboratorsInviteCall(Long projectId, ProjectCollaboratorInvite collaborator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = collaborator;
        
        // create path and map variables
        String localVarPath = "/account/projects/{project_id}/collaborators"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateProjectCollaboratorsInviteValidateBeforeCall(Long projectId, ProjectCollaboratorInvite collaborator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling privateProjectCollaboratorsInvite(Async)");
        }
        
        // verify the required parameter 'collaborator' is set
        if (collaborator == null) {
            throw new ApiException("Missing the required parameter 'collaborator' when calling privateProjectCollaboratorsInvite(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateProjectCollaboratorsInviteCall(projectId, collaborator, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Invite project collaborators
     * Invite users to collaborate on project or view the project
     * @param projectId Project unique identifier (required)
     * @param collaborator viewer or collaborator role. User user_id or email of user (required)
     * @return ResponseMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseMessage privateProjectCollaboratorsInvite(Long projectId, ProjectCollaboratorInvite collaborator) throws ApiException {
        ApiResponse<ResponseMessage> resp = privateProjectCollaboratorsInviteWithHttpInfo(projectId, collaborator);
        return resp.getData();
    }

    /**
     * Invite project collaborators
     * Invite users to collaborate on project or view the project
     * @param projectId Project unique identifier (required)
     * @param collaborator viewer or collaborator role. User user_id or email of user (required)
     * @return ApiResponse&lt;ResponseMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseMessage> privateProjectCollaboratorsInviteWithHttpInfo(Long projectId, ProjectCollaboratorInvite collaborator) throws ApiException {
        com.squareup.okhttp.Call call = privateProjectCollaboratorsInviteValidateBeforeCall(projectId, collaborator, null, null);
        Type localVarReturnType = new TypeToken<ResponseMessage>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Invite project collaborators (asynchronously)
     * Invite users to collaborate on project or view the project
     * @param projectId Project unique identifier (required)
     * @param collaborator viewer or collaborator role. User user_id or email of user (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateProjectCollaboratorsInviteAsync(Long projectId, ProjectCollaboratorInvite collaborator, final ApiCallback<ResponseMessage> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateProjectCollaboratorsInviteValidateBeforeCall(projectId, collaborator, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseMessage>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateProjectCollaboratorsList
     * @param projectId Project unique identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateProjectCollaboratorsListCall(Long projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/projects/{project_id}/collaborators"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateProjectCollaboratorsListValidateBeforeCall(Long projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling privateProjectCollaboratorsList(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateProjectCollaboratorsListCall(projectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List project collaborators
     * List Project collaborators and invited users
     * @param projectId Project unique identifier (required)
     * @return List&lt;ProjectCollaborator&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ProjectCollaborator> privateProjectCollaboratorsList(Long projectId) throws ApiException {
        ApiResponse<List<ProjectCollaborator>> resp = privateProjectCollaboratorsListWithHttpInfo(projectId);
        return resp.getData();
    }

    /**
     * List project collaborators
     * List Project collaborators and invited users
     * @param projectId Project unique identifier (required)
     * @return ApiResponse&lt;List&lt;ProjectCollaborator&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ProjectCollaborator>> privateProjectCollaboratorsListWithHttpInfo(Long projectId) throws ApiException {
        com.squareup.okhttp.Call call = privateProjectCollaboratorsListValidateBeforeCall(projectId, null, null);
        Type localVarReturnType = new TypeToken<List<ProjectCollaborator>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List project collaborators (asynchronously)
     * List Project collaborators and invited users
     * @param projectId Project unique identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateProjectCollaboratorsListAsync(Long projectId, final ApiCallback<List<ProjectCollaborator>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateProjectCollaboratorsListValidateBeforeCall(projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ProjectCollaborator>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateProjectCreate
     * @param project Project  description (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateProjectCreateCall(ProjectCreate project, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = project;
        
        // create path and map variables
        String localVarPath = "/account/projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateProjectCreateValidateBeforeCall(ProjectCreate project, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling privateProjectCreate(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateProjectCreateCall(project, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create project
     * Create a new project
     * @param project Project  description (required)
     * @return CreateProjectResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateProjectResponse privateProjectCreate(ProjectCreate project) throws ApiException {
        ApiResponse<CreateProjectResponse> resp = privateProjectCreateWithHttpInfo(project);
        return resp.getData();
    }

    /**
     * Create project
     * Create a new project
     * @param project Project  description (required)
     * @return ApiResponse&lt;CreateProjectResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateProjectResponse> privateProjectCreateWithHttpInfo(ProjectCreate project) throws ApiException {
        com.squareup.okhttp.Call call = privateProjectCreateValidateBeforeCall(project, null, null);
        Type localVarReturnType = new TypeToken<CreateProjectResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create project (asynchronously)
     * Create a new project
     * @param project Project  description (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateProjectCreateAsync(ProjectCreate project, final ApiCallback<CreateProjectResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateProjectCreateValidateBeforeCall(project, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateProjectResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateProjectDelete
     * @param projectId Project unique identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateProjectDeleteCall(Long projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/projects/{project_id}"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateProjectDeleteValidateBeforeCall(Long projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling privateProjectDelete(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateProjectDeleteCall(projectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete project
     * A project can be deleted only if: - it is not public - it does not have public articles.  When an individual project is deleted, all the articles are moved to my data of each owner.  When a group project is deleted, all the articles and files are deleted as well. Only project owner, group admin and above can delete a project. 
     * @param projectId Project unique identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void privateProjectDelete(Long projectId) throws ApiException {
        privateProjectDeleteWithHttpInfo(projectId);
    }

    /**
     * Delete project
     * A project can be deleted only if: - it is not public - it does not have public articles.  When an individual project is deleted, all the articles are moved to my data of each owner.  When a group project is deleted, all the articles and files are deleted as well. Only project owner, group admin and above can delete a project. 
     * @param projectId Project unique identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> privateProjectDeleteWithHttpInfo(Long projectId) throws ApiException {
        com.squareup.okhttp.Call call = privateProjectDeleteValidateBeforeCall(projectId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete project (asynchronously)
     * A project can be deleted only if: - it is not public - it does not have public articles.  When an individual project is deleted, all the articles are moved to my data of each owner.  When a group project is deleted, all the articles and files are deleted as well. Only project owner, group admin and above can delete a project. 
     * @param projectId Project unique identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateProjectDeleteAsync(Long projectId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateProjectDeleteValidateBeforeCall(projectId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for privateProjectDetails
     * @param projectId Project unique identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateProjectDetailsCall(Long projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/projects/{project_id}"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateProjectDetailsValidateBeforeCall(Long projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling privateProjectDetails(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateProjectDetailsCall(projectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * View project details
     * View a private project
     * @param projectId Project unique identifier (required)
     * @return ProjectCompletePrivate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProjectCompletePrivate privateProjectDetails(Long projectId) throws ApiException {
        ApiResponse<ProjectCompletePrivate> resp = privateProjectDetailsWithHttpInfo(projectId);
        return resp.getData();
    }

    /**
     * View project details
     * View a private project
     * @param projectId Project unique identifier (required)
     * @return ApiResponse&lt;ProjectCompletePrivate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProjectCompletePrivate> privateProjectDetailsWithHttpInfo(Long projectId) throws ApiException {
        com.squareup.okhttp.Call call = privateProjectDetailsValidateBeforeCall(projectId, null, null);
        Type localVarReturnType = new TypeToken<ProjectCompletePrivate>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * View project details (asynchronously)
     * View a private project
     * @param projectId Project unique identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateProjectDetailsAsync(Long projectId, final ApiCallback<ProjectCompletePrivate> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateProjectDetailsValidateBeforeCall(projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProjectCompletePrivate>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateProjectLeave
     * @param projectId Project unique identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateProjectLeaveCall(Long projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/projects/{project_id}/leave"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateProjectLeaveValidateBeforeCall(Long projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling privateProjectLeave(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateProjectLeaveCall(projectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Private Project Leave
     * Please note: project&#39;s owner cannot leave the project.
     * @param projectId Project unique identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void privateProjectLeave(Long projectId) throws ApiException {
        privateProjectLeaveWithHttpInfo(projectId);
    }

    /**
     * Private Project Leave
     * Please note: project&#39;s owner cannot leave the project.
     * @param projectId Project unique identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> privateProjectLeaveWithHttpInfo(Long projectId) throws ApiException {
        com.squareup.okhttp.Call call = privateProjectLeaveValidateBeforeCall(projectId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Private Project Leave (asynchronously)
     * Please note: project&#39;s owner cannot leave the project.
     * @param projectId Project unique identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateProjectLeaveAsync(Long projectId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateProjectLeaveValidateBeforeCall(projectId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for privateProjectNote
     * @param projectId Project unique identifier (required)
     * @param noteId Note unique identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateProjectNoteCall(Long projectId, Long noteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/projects/{project_id}/notes/{note_id}"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "note_id" + "\\}", apiClient.escapeString(noteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateProjectNoteValidateBeforeCall(Long projectId, Long noteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling privateProjectNote(Async)");
        }
        
        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling privateProjectNote(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateProjectNoteCall(projectId, noteId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Project note details
     * 
     * @param projectId Project unique identifier (required)
     * @param noteId Note unique identifier (required)
     * @return ProjectNotePrivate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProjectNotePrivate privateProjectNote(Long projectId, Long noteId) throws ApiException {
        ApiResponse<ProjectNotePrivate> resp = privateProjectNoteWithHttpInfo(projectId, noteId);
        return resp.getData();
    }

    /**
     * Project note details
     * 
     * @param projectId Project unique identifier (required)
     * @param noteId Note unique identifier (required)
     * @return ApiResponse&lt;ProjectNotePrivate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProjectNotePrivate> privateProjectNoteWithHttpInfo(Long projectId, Long noteId) throws ApiException {
        com.squareup.okhttp.Call call = privateProjectNoteValidateBeforeCall(projectId, noteId, null, null);
        Type localVarReturnType = new TypeToken<ProjectNotePrivate>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Project note details (asynchronously)
     * 
     * @param projectId Project unique identifier (required)
     * @param noteId Note unique identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateProjectNoteAsync(Long projectId, Long noteId, final ApiCallback<ProjectNotePrivate> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateProjectNoteValidateBeforeCall(projectId, noteId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProjectNotePrivate>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateProjectNoteDelete
     * @param projectId Project unique identifier (required)
     * @param noteId Note unique identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateProjectNoteDeleteCall(Long projectId, Long noteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/projects/{project_id}/notes/{note_id}"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "note_id" + "\\}", apiClient.escapeString(noteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateProjectNoteDeleteValidateBeforeCall(Long projectId, Long noteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling privateProjectNoteDelete(Async)");
        }
        
        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling privateProjectNoteDelete(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateProjectNoteDeleteCall(projectId, noteId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete project note
     * 
     * @param projectId Project unique identifier (required)
     * @param noteId Note unique identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void privateProjectNoteDelete(Long projectId, Long noteId) throws ApiException {
        privateProjectNoteDeleteWithHttpInfo(projectId, noteId);
    }

    /**
     * Delete project note
     * 
     * @param projectId Project unique identifier (required)
     * @param noteId Note unique identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> privateProjectNoteDeleteWithHttpInfo(Long projectId, Long noteId) throws ApiException {
        com.squareup.okhttp.Call call = privateProjectNoteDeleteValidateBeforeCall(projectId, noteId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete project note (asynchronously)
     * 
     * @param projectId Project unique identifier (required)
     * @param noteId Note unique identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateProjectNoteDeleteAsync(Long projectId, Long noteId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateProjectNoteDeleteValidateBeforeCall(projectId, noteId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for privateProjectNoteUpdate
     * @param projectId Project unique identifier (required)
     * @param noteId Note unique identifier (required)
     * @param note Note message (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateProjectNoteUpdateCall(Long projectId, Long noteId, ProjectNoteCreate note, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = note;
        
        // create path and map variables
        String localVarPath = "/account/projects/{project_id}/notes/{note_id}"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "note_id" + "\\}", apiClient.escapeString(noteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateProjectNoteUpdateValidateBeforeCall(Long projectId, Long noteId, ProjectNoteCreate note, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling privateProjectNoteUpdate(Async)");
        }
        
        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling privateProjectNoteUpdate(Async)");
        }
        
        // verify the required parameter 'note' is set
        if (note == null) {
            throw new ApiException("Missing the required parameter 'note' when calling privateProjectNoteUpdate(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateProjectNoteUpdateCall(projectId, noteId, note, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update project note
     * 
     * @param projectId Project unique identifier (required)
     * @param noteId Note unique identifier (required)
     * @param note Note message (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void privateProjectNoteUpdate(Long projectId, Long noteId, ProjectNoteCreate note) throws ApiException {
        privateProjectNoteUpdateWithHttpInfo(projectId, noteId, note);
    }

    /**
     * Update project note
     * 
     * @param projectId Project unique identifier (required)
     * @param noteId Note unique identifier (required)
     * @param note Note message (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> privateProjectNoteUpdateWithHttpInfo(Long projectId, Long noteId, ProjectNoteCreate note) throws ApiException {
        com.squareup.okhttp.Call call = privateProjectNoteUpdateValidateBeforeCall(projectId, noteId, note, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update project note (asynchronously)
     * 
     * @param projectId Project unique identifier (required)
     * @param noteId Note unique identifier (required)
     * @param note Note message (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateProjectNoteUpdateAsync(Long projectId, Long noteId, ProjectNoteCreate note, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateProjectNoteUpdateValidateBeforeCall(projectId, noteId, note, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for privateProjectNotesCreate
     * @param projectId Project unique identifier (required)
     * @param note Note message (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateProjectNotesCreateCall(Long projectId, ProjectNoteCreate note, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = note;
        
        // create path and map variables
        String localVarPath = "/account/projects/{project_id}/notes"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateProjectNotesCreateValidateBeforeCall(Long projectId, ProjectNoteCreate note, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling privateProjectNotesCreate(Async)");
        }
        
        // verify the required parameter 'note' is set
        if (note == null) {
            throw new ApiException("Missing the required parameter 'note' when calling privateProjectNotesCreate(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateProjectNotesCreateCall(projectId, note, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create project note
     * Create a new project note
     * @param projectId Project unique identifier (required)
     * @param note Note message (required)
     * @return Location
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Location privateProjectNotesCreate(Long projectId, ProjectNoteCreate note) throws ApiException {
        ApiResponse<Location> resp = privateProjectNotesCreateWithHttpInfo(projectId, note);
        return resp.getData();
    }

    /**
     * Create project note
     * Create a new project note
     * @param projectId Project unique identifier (required)
     * @param note Note message (required)
     * @return ApiResponse&lt;Location&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Location> privateProjectNotesCreateWithHttpInfo(Long projectId, ProjectNoteCreate note) throws ApiException {
        com.squareup.okhttp.Call call = privateProjectNotesCreateValidateBeforeCall(projectId, note, null, null);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create project note (asynchronously)
     * Create a new project note
     * @param projectId Project unique identifier (required)
     * @param note Note message (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateProjectNotesCreateAsync(Long projectId, ProjectNoteCreate note, final ApiCallback<Location> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateProjectNotesCreateValidateBeforeCall(projectId, note, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateProjectNotesList
     * @param projectId Project unique identifier (required)
     * @param page Page number. Used for pagination with page_size (optional)
     * @param pageSize The number of results included on a page. Used for pagination with page (optional, default to 10)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateProjectNotesListCall(Long projectId, Long page, Long pageSize, Long limit, Long offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/projects/{project_id}/notes"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page_size", pageSize));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateProjectNotesListValidateBeforeCall(Long projectId, Long page, Long pageSize, Long limit, Long offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling privateProjectNotesList(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateProjectNotesListCall(projectId, page, pageSize, limit, offset, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List project notes
     * List project notes
     * @param projectId Project unique identifier (required)
     * @param page Page number. Used for pagination with page_size (optional)
     * @param pageSize The number of results included on a page. Used for pagination with page (optional, default to 10)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @return List&lt;ProjectNote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ProjectNote> privateProjectNotesList(Long projectId, Long page, Long pageSize, Long limit, Long offset) throws ApiException {
        ApiResponse<List<ProjectNote>> resp = privateProjectNotesListWithHttpInfo(projectId, page, pageSize, limit, offset);
        return resp.getData();
    }

    /**
     * List project notes
     * List project notes
     * @param projectId Project unique identifier (required)
     * @param page Page number. Used for pagination with page_size (optional)
     * @param pageSize The number of results included on a page. Used for pagination with page (optional, default to 10)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @return ApiResponse&lt;List&lt;ProjectNote&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ProjectNote>> privateProjectNotesListWithHttpInfo(Long projectId, Long page, Long pageSize, Long limit, Long offset) throws ApiException {
        com.squareup.okhttp.Call call = privateProjectNotesListValidateBeforeCall(projectId, page, pageSize, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<List<ProjectNote>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List project notes (asynchronously)
     * List project notes
     * @param projectId Project unique identifier (required)
     * @param page Page number. Used for pagination with page_size (optional)
     * @param pageSize The number of results included on a page. Used for pagination with page (optional, default to 10)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateProjectNotesListAsync(Long projectId, Long page, Long pageSize, Long limit, Long offset, final ApiCallback<List<ProjectNote>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateProjectNotesListValidateBeforeCall(projectId, page, pageSize, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ProjectNote>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateProjectPublish
     * @param projectId Project unique identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateProjectPublishCall(Long projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/projects/{project_id}/publish"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateProjectPublishValidateBeforeCall(Long projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling privateProjectPublish(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateProjectPublishCall(projectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Private Project Publish
     * Publish a project. Possible after all items inside it are public
     * @param projectId Project unique identifier (required)
     * @return ResponseMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseMessage privateProjectPublish(Long projectId) throws ApiException {
        ApiResponse<ResponseMessage> resp = privateProjectPublishWithHttpInfo(projectId);
        return resp.getData();
    }

    /**
     * Private Project Publish
     * Publish a project. Possible after all items inside it are public
     * @param projectId Project unique identifier (required)
     * @return ApiResponse&lt;ResponseMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseMessage> privateProjectPublishWithHttpInfo(Long projectId) throws ApiException {
        com.squareup.okhttp.Call call = privateProjectPublishValidateBeforeCall(projectId, null, null);
        Type localVarReturnType = new TypeToken<ResponseMessage>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Private Project Publish (asynchronously)
     * Publish a project. Possible after all items inside it are public
     * @param projectId Project unique identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateProjectPublishAsync(Long projectId, final ApiCallback<ResponseMessage> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateProjectPublishValidateBeforeCall(projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseMessage>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateProjectUpdate
     * @param projectId Project unique identifier (required)
     * @param project Project description (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateProjectUpdateCall(Long projectId, ProjectUpdate project, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = project;
        
        // create path and map variables
        String localVarPath = "/account/projects/{project_id}"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateProjectUpdateValidateBeforeCall(Long projectId, ProjectUpdate project, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling privateProjectUpdate(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling privateProjectUpdate(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateProjectUpdateCall(projectId, project, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update project
     * Updating an project by passing body parameters; request can also be made with the PATCH method.
     * @param projectId Project unique identifier (required)
     * @param project Project description (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void privateProjectUpdate(Long projectId, ProjectUpdate project) throws ApiException {
        privateProjectUpdateWithHttpInfo(projectId, project);
    }

    /**
     * Update project
     * Updating an project by passing body parameters; request can also be made with the PATCH method.
     * @param projectId Project unique identifier (required)
     * @param project Project description (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> privateProjectUpdateWithHttpInfo(Long projectId, ProjectUpdate project) throws ApiException {
        com.squareup.okhttp.Call call = privateProjectUpdateValidateBeforeCall(projectId, project, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update project (asynchronously)
     * Updating an project by passing body parameters; request can also be made with the PATCH method.
     * @param projectId Project unique identifier (required)
     * @param project Project description (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateProjectUpdateAsync(Long projectId, ProjectUpdate project, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateProjectUpdateValidateBeforeCall(projectId, project, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for privateProjectsList
     * @param page Page number. Used for pagination with page_size (optional)
     * @param pageSize The number of results included on a page. Used for pagination with page (optional, default to 10)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @param order The field by which to order. (optional, default to published_date)
     * @param orderDirection  (optional, default to desc)
     * @param storage only return collections from this institution (optional)
     * @param roles Any combination of owner, collaborator, viewer separated by comma. Examples: \&quot;owner\&quot; or \&quot;owner,collaborator\&quot;. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateProjectsListCall(Long page, Long pageSize, Long limit, Long offset, String order, String orderDirection, String storage, String roles, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page_size", pageSize));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "order", order));
        if (orderDirection != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "order_direction", orderDirection));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));
        if (roles != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "roles", roles));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateProjectsListValidateBeforeCall(Long page, Long pageSize, Long limit, Long offset, String order, String orderDirection, String storage, String roles, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = privateProjectsListCall(page, pageSize, limit, offset, order, orderDirection, storage, roles, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Private Projects
     * List private projects
     * @param page Page number. Used for pagination with page_size (optional)
     * @param pageSize The number of results included on a page. Used for pagination with page (optional, default to 10)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @param order The field by which to order. (optional, default to published_date)
     * @param orderDirection  (optional, default to desc)
     * @param storage only return collections from this institution (optional)
     * @param roles Any combination of owner, collaborator, viewer separated by comma. Examples: \&quot;owner\&quot; or \&quot;owner,collaborator\&quot;. (optional)
     * @return List&lt;ProjectPrivate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ProjectPrivate> privateProjectsList(Long page, Long pageSize, Long limit, Long offset, String order, String orderDirection, String storage, String roles) throws ApiException {
        ApiResponse<List<ProjectPrivate>> resp = privateProjectsListWithHttpInfo(page, pageSize, limit, offset, order, orderDirection, storage, roles);
        return resp.getData();
    }

    /**
     * Private Projects
     * List private projects
     * @param page Page number. Used for pagination with page_size (optional)
     * @param pageSize The number of results included on a page. Used for pagination with page (optional, default to 10)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @param order The field by which to order. (optional, default to published_date)
     * @param orderDirection  (optional, default to desc)
     * @param storage only return collections from this institution (optional)
     * @param roles Any combination of owner, collaborator, viewer separated by comma. Examples: \&quot;owner\&quot; or \&quot;owner,collaborator\&quot;. (optional)
     * @return ApiResponse&lt;List&lt;ProjectPrivate&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ProjectPrivate>> privateProjectsListWithHttpInfo(Long page, Long pageSize, Long limit, Long offset, String order, String orderDirection, String storage, String roles) throws ApiException {
        com.squareup.okhttp.Call call = privateProjectsListValidateBeforeCall(page, pageSize, limit, offset, order, orderDirection, storage, roles, null, null);
        Type localVarReturnType = new TypeToken<List<ProjectPrivate>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Private Projects (asynchronously)
     * List private projects
     * @param page Page number. Used for pagination with page_size (optional)
     * @param pageSize The number of results included on a page. Used for pagination with page (optional, default to 10)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @param order The field by which to order. (optional, default to published_date)
     * @param orderDirection  (optional, default to desc)
     * @param storage only return collections from this institution (optional)
     * @param roles Any combination of owner, collaborator, viewer separated by comma. Examples: \&quot;owner\&quot; or \&quot;owner,collaborator\&quot;. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateProjectsListAsync(Long page, Long pageSize, Long limit, Long offset, String order, String orderDirection, String storage, String roles, final ApiCallback<List<ProjectPrivate>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateProjectsListValidateBeforeCall(page, pageSize, limit, offset, order, orderDirection, storage, roles, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ProjectPrivate>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateProjectsSearch
     * @param search Search Parameters (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateProjectsSearchCall(ProjectsSearch search, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = search;
        
        // create path and map variables
        String localVarPath = "/account/projects/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateProjectsSearchValidateBeforeCall(ProjectsSearch search, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = privateProjectsSearchCall(search, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Private Projects search
     * Search inside the private projects
     * @param search Search Parameters (optional)
     * @return List&lt;ProjectPrivate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ProjectPrivate> privateProjectsSearch(ProjectsSearch search) throws ApiException {
        ApiResponse<List<ProjectPrivate>> resp = privateProjectsSearchWithHttpInfo(search);
        return resp.getData();
    }

    /**
     * Private Projects search
     * Search inside the private projects
     * @param search Search Parameters (optional)
     * @return ApiResponse&lt;List&lt;ProjectPrivate&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ProjectPrivate>> privateProjectsSearchWithHttpInfo(ProjectsSearch search) throws ApiException {
        com.squareup.okhttp.Call call = privateProjectsSearchValidateBeforeCall(search, null, null);
        Type localVarReturnType = new TypeToken<List<ProjectPrivate>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Private Projects search (asynchronously)
     * Search inside the private projects
     * @param search Search Parameters (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateProjectsSearchAsync(ProjectsSearch search, final ApiCallback<List<ProjectPrivate>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateProjectsSearchValidateBeforeCall(search, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ProjectPrivate>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for projectArticles
     * @param projectId Project Unique identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call projectArticlesCall(Long projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/projects/{project_id}/articles"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call projectArticlesValidateBeforeCall(Long projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectArticles(Async)");
        }
        
        
        com.squareup.okhttp.Call call = projectArticlesCall(projectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Public Project Articles
     * List articles in project
     * @param projectId Project Unique identifier (required)
     * @return List&lt;Article&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Article> projectArticles(Long projectId) throws ApiException {
        ApiResponse<List<Article>> resp = projectArticlesWithHttpInfo(projectId);
        return resp.getData();
    }

    /**
     * Public Project Articles
     * List articles in project
     * @param projectId Project Unique identifier (required)
     * @return ApiResponse&lt;List&lt;Article&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Article>> projectArticlesWithHttpInfo(Long projectId) throws ApiException {
        com.squareup.okhttp.Call call = projectArticlesValidateBeforeCall(projectId, null, null);
        Type localVarReturnType = new TypeToken<List<Article>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Public Project Articles (asynchronously)
     * List articles in project
     * @param projectId Project Unique identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call projectArticlesAsync(Long projectId, final ApiCallback<List<Article>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = projectArticlesValidateBeforeCall(projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Article>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for projectDetails
     * @param projectId Project Unique identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call projectDetailsCall(Long projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/projects/{project_id}"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call projectDetailsValidateBeforeCall(Long projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectDetails(Async)");
        }
        
        
        com.squareup.okhttp.Call call = projectDetailsCall(projectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Public Project
     * View a project
     * @param projectId Project Unique identifier (required)
     * @return ProjectComplete
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProjectComplete projectDetails(Long projectId) throws ApiException {
        ApiResponse<ProjectComplete> resp = projectDetailsWithHttpInfo(projectId);
        return resp.getData();
    }

    /**
     * Public Project
     * View a project
     * @param projectId Project Unique identifier (required)
     * @return ApiResponse&lt;ProjectComplete&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProjectComplete> projectDetailsWithHttpInfo(Long projectId) throws ApiException {
        com.squareup.okhttp.Call call = projectDetailsValidateBeforeCall(projectId, null, null);
        Type localVarReturnType = new TypeToken<ProjectComplete>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Public Project (asynchronously)
     * View a project
     * @param projectId Project Unique identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call projectDetailsAsync(Long projectId, final ApiCallback<ProjectComplete> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = projectDetailsValidateBeforeCall(projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProjectComplete>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for projectsList
     * @param xCursor Unique hash used for bypassing the item retrieval limit of 9,000 entities. When using this parameter, please note that the offset parameter will not be available, but the limit parameter will still work as expected. (optional)
     * @param page Page number. Used for pagination with page_size (optional)
     * @param pageSize The number of results included on a page. Used for pagination with page (optional, default to 10)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @param order The field by which to order. Default varies by endpoint/resource. (optional, default to published_date)
     * @param orderDirection  (optional, default to desc)
     * @param institution only return collections from this institution (optional)
     * @param publishedSince Filter by article publishing date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD (optional)
     * @param group only return collections from this group (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call projectsListCall(UUID xCursor, Long page, Long pageSize, Long limit, Long offset, String order, String orderDirection, Long institution, String publishedSince, Long group, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page_size", pageSize));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "order", order));
        if (orderDirection != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "order_direction", orderDirection));
        if (institution != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "institution", institution));
        if (publishedSince != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "published_since", publishedSince));
        if (group != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "group", group));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xCursor != null)
        localVarHeaderParams.put("X-Cursor", apiClient.parameterToString(xCursor));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call projectsListValidateBeforeCall(UUID xCursor, Long page, Long pageSize, Long limit, Long offset, String order, String orderDirection, Long institution, String publishedSince, Long group, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = projectsListCall(xCursor, page, pageSize, limit, offset, order, orderDirection, institution, publishedSince, group, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Public Projects
     * Returns a list of public projects
     * @param xCursor Unique hash used for bypassing the item retrieval limit of 9,000 entities. When using this parameter, please note that the offset parameter will not be available, but the limit parameter will still work as expected. (optional)
     * @param page Page number. Used for pagination with page_size (optional)
     * @param pageSize The number of results included on a page. Used for pagination with page (optional, default to 10)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @param order The field by which to order. Default varies by endpoint/resource. (optional, default to published_date)
     * @param orderDirection  (optional, default to desc)
     * @param institution only return collections from this institution (optional)
     * @param publishedSince Filter by article publishing date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD (optional)
     * @param group only return collections from this group (optional)
     * @return List&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Project> projectsList(UUID xCursor, Long page, Long pageSize, Long limit, Long offset, String order, String orderDirection, Long institution, String publishedSince, Long group) throws ApiException {
        ApiResponse<List<Project>> resp = projectsListWithHttpInfo(xCursor, page, pageSize, limit, offset, order, orderDirection, institution, publishedSince, group);
        return resp.getData();
    }

    /**
     * Public Projects
     * Returns a list of public projects
     * @param xCursor Unique hash used for bypassing the item retrieval limit of 9,000 entities. When using this parameter, please note that the offset parameter will not be available, but the limit parameter will still work as expected. (optional)
     * @param page Page number. Used for pagination with page_size (optional)
     * @param pageSize The number of results included on a page. Used for pagination with page (optional, default to 10)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @param order The field by which to order. Default varies by endpoint/resource. (optional, default to published_date)
     * @param orderDirection  (optional, default to desc)
     * @param institution only return collections from this institution (optional)
     * @param publishedSince Filter by article publishing date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD (optional)
     * @param group only return collections from this group (optional)
     * @return ApiResponse&lt;List&lt;Project&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Project>> projectsListWithHttpInfo(UUID xCursor, Long page, Long pageSize, Long limit, Long offset, String order, String orderDirection, Long institution, String publishedSince, Long group) throws ApiException {
        com.squareup.okhttp.Call call = projectsListValidateBeforeCall(xCursor, page, pageSize, limit, offset, order, orderDirection, institution, publishedSince, group, null, null);
        Type localVarReturnType = new TypeToken<List<Project>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Public Projects (asynchronously)
     * Returns a list of public projects
     * @param xCursor Unique hash used for bypassing the item retrieval limit of 9,000 entities. When using this parameter, please note that the offset parameter will not be available, but the limit parameter will still work as expected. (optional)
     * @param page Page number. Used for pagination with page_size (optional)
     * @param pageSize The number of results included on a page. Used for pagination with page (optional, default to 10)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @param order The field by which to order. Default varies by endpoint/resource. (optional, default to published_date)
     * @param orderDirection  (optional, default to desc)
     * @param institution only return collections from this institution (optional)
     * @param publishedSince Filter by article publishing date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD (optional)
     * @param group only return collections from this group (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call projectsListAsync(UUID xCursor, Long page, Long pageSize, Long limit, Long offset, String order, String orderDirection, Long institution, String publishedSince, Long group, final ApiCallback<List<Project>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = projectsListValidateBeforeCall(xCursor, page, pageSize, limit, offset, order, orderDirection, institution, publishedSince, group, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Project>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for projectsSearch
     * @param xCursor Unique hash used for bypassing the item retrieval limit of 9,000 entities. When using this parameter, please note that the offset parameter will not be available, but the limit parameter will still work as expected. (optional)
     * @param search Search Parameters (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call projectsSearchCall(UUID xCursor, ProjectsSearch search, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = search;
        
        // create path and map variables
        String localVarPath = "/projects/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xCursor != null)
        localVarHeaderParams.put("X-Cursor", apiClient.parameterToString(xCursor));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call projectsSearchValidateBeforeCall(UUID xCursor, ProjectsSearch search, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = projectsSearchCall(xCursor, search, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Public Projects Search
     * Returns a list of public articles
     * @param xCursor Unique hash used for bypassing the item retrieval limit of 9,000 entities. When using this parameter, please note that the offset parameter will not be available, but the limit parameter will still work as expected. (optional)
     * @param search Search Parameters (optional)
     * @return List&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Project> projectsSearch(UUID xCursor, ProjectsSearch search) throws ApiException {
        ApiResponse<List<Project>> resp = projectsSearchWithHttpInfo(xCursor, search);
        return resp.getData();
    }

    /**
     * Public Projects Search
     * Returns a list of public articles
     * @param xCursor Unique hash used for bypassing the item retrieval limit of 9,000 entities. When using this parameter, please note that the offset parameter will not be available, but the limit parameter will still work as expected. (optional)
     * @param search Search Parameters (optional)
     * @return ApiResponse&lt;List&lt;Project&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Project>> projectsSearchWithHttpInfo(UUID xCursor, ProjectsSearch search) throws ApiException {
        com.squareup.okhttp.Call call = projectsSearchValidateBeforeCall(xCursor, search, null, null);
        Type localVarReturnType = new TypeToken<List<Project>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Public Projects Search (asynchronously)
     * Returns a list of public articles
     * @param xCursor Unique hash used for bypassing the item retrieval limit of 9,000 entities. When using this parameter, please note that the offset parameter will not be available, but the limit parameter will still work as expected. (optional)
     * @param search Search Parameters (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call projectsSearchAsync(UUID xCursor, ProjectsSearch search, final ApiCallback<List<Project>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = projectsSearchValidateBeforeCall(xCursor, search, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Project>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
