/*
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * RelatedMaterial
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2023-07-14T12:44:49.389+03:00")
public class RelatedMaterial {
  @SerializedName("id")
  private Long id = null;

  @SerializedName("identifier")
  private String identifier = null;

  @SerializedName("title")
  private String title = null;

  /**
   * The relation between the item and the related material; defaults to &#39;References&#39;
   */
  @JsonAdapter(RelationEnum.Adapter.class)
  public enum RelationEnum {
    ISCITEDBY("IsCitedBy"),
    
    CITES("Cites"),
    
    ISSUPPLEMENTTO("IsSupplementTo"),
    
    ISSUPPLEMENTEDBY("IsSupplementedBy"),
    
    ISCONTINUEDBY("IsContinuedBy"),
    
    CONTINUES("Continues"),
    
    DESCRIBES("Describes"),
    
    ISDESCRIBEDBY("IsDescribedBy"),
    
    HASMETADATA("HasMetadata"),
    
    ISMETADATAFOR("IsMetadataFor"),
    
    HASVERSION("HasVersion"),
    
    ISVERSIONOF("IsVersionOf"),
    
    ISNEWVERSIONOF("IsNewVersionOf"),
    
    ISPREVIOUSVERSIONOF("IsPreviousVersionOf"),
    
    ISPARTOF("IsPartOf"),
    
    HASPART("HasPart"),
    
    ISPUBLISHEDIN("IsPublishedIn"),
    
    ISREFERENCEDBY("IsReferencedBy"),
    
    REFERENCES("References"),
    
    ISDOCUMENTEDBY("IsDocumentedBy"),
    
    DOCUMENTS("Documents"),
    
    ISCOMPILEDBY("IsCompiledBy"),
    
    COMPILES("Compiles"),
    
    ISVARIANTFORMOF("IsVariantFormOf"),
    
    ISORIGINALFORMOF("IsOriginalFormOf"),
    
    ISIDENTICALTO("IsIdenticalTo"),
    
    ISREVIEWEDBY("IsReviewedBy"),
    
    REVIEWS("Reviews"),
    
    ISDERIVEDFROM("IsDerivedFrom"),
    
    ISSOURCEOF("IsSourceOf"),
    
    ISREQUIREDBY("IsRequiredBy"),
    
    REQUIRES("Requires"),
    
    ISOBSOLETEDBY("IsObsoletedBy"),
    
    OBSOLETES("Obsoletes");

    private String value;

    RelationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RelationEnum fromValue(String text) {
      for (RelationEnum b : RelationEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<RelationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RelationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RelationEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RelationEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("relation")
  private RelationEnum relation = RelationEnum.REFERENCES;

  /**
   * The type of the identifier of the related material; defaults to &#39;URL&#39;
   */
  @JsonAdapter(IdentifierTypeEnum.Adapter.class)
  public enum IdentifierTypeEnum {
    ARK("ARK"),
    
    ARXIV("arXiv"),
    
    BIBCODE("bibcode"),
    
    DOI("DOI"),
    
    EAN13("EAN13"),
    
    EISSN("EISSN"),
    
    HANDLE("Handle"),
    
    IGSN("IGSN"),
    
    ISBN("ISBN"),
    
    ISSN("ISSN"),
    
    ISTC("ISTC"),
    
    LISSN("LISSN"),
    
    LSID("LSID"),
    
    PMID("PMID"),
    
    PURL("PURL"),
    
    UPC("UPC"),
    
    URL("URL"),
    
    URN("URN"),
    
    W3ID("w3id");

    private String value;

    IdentifierTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IdentifierTypeEnum fromValue(String text) {
      for (IdentifierTypeEnum b : IdentifierTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<IdentifierTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IdentifierTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IdentifierTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return IdentifierTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("identifier_type")
  private IdentifierTypeEnum identifierType = IdentifierTypeEnum.URL;

  @SerializedName("is_linkout")
  private Boolean isLinkout = null;

  @SerializedName("link")
  private String link = null;

  public RelatedMaterial id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * The ID of the related material; can be used to add existing materials of the same account to items.
   * @return id
  **/
  @ApiModelProperty(example = "10432", value = "The ID of the related material; can be used to add existing materials of the same account to items.")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public RelatedMaterial identifier(String identifier) {
    this.identifier = identifier;
    return this;
  }

   /**
   * The related material identifier (e.g., DOI, Handle, ISBN)
   * @return identifier
  **/
  @ApiModelProperty(example = "10.6084/m9.figshare.1407024", value = "The related material identifier (e.g., DOI, Handle, ISBN)")
  public String getIdentifier() {
    return identifier;
  }

  public void setIdentifier(String identifier) {
    this.identifier = identifier;
  }

  public RelatedMaterial title(String title) {
    this.title = title;
    return this;
  }

   /**
   * The related material title
   * @return title
  **/
  @ApiModelProperty(example = "Rooter: A Methodology for the Typical Unification of Access Points and Redundancy", value = "The related material title")
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public RelatedMaterial relation(RelationEnum relation) {
    this.relation = relation;
    return this;
  }

   /**
   * The relation between the item and the related material; defaults to &#39;References&#39;
   * @return relation
  **/
  @ApiModelProperty(example = "IsSupplementTo", value = "The relation between the item and the related material; defaults to 'References'")
  public RelationEnum getRelation() {
    return relation;
  }

  public void setRelation(RelationEnum relation) {
    this.relation = relation;
  }

  public RelatedMaterial identifierType(IdentifierTypeEnum identifierType) {
    this.identifierType = identifierType;
    return this;
  }

   /**
   * The type of the identifier of the related material; defaults to &#39;URL&#39;
   * @return identifierType
  **/
  @ApiModelProperty(example = "DOI", value = "The type of the identifier of the related material; defaults to 'URL'")
  public IdentifierTypeEnum getIdentifierType() {
    return identifierType;
  }

  public void setIdentifierType(IdentifierTypeEnum identifierType) {
    this.identifierType = identifierType;
  }

  public RelatedMaterial isLinkout(Boolean isLinkout) {
    this.isLinkout = isLinkout;
    return this;
  }

   /**
   * Flag for highlighting this related material in the call-out box
   * @return isLinkout
  **/
  @ApiModelProperty(example = "true", value = "Flag for highlighting this related material in the call-out box")
  public Boolean getIsLinkout() {
    return isLinkout;
  }

  public void setIsLinkout(Boolean isLinkout) {
    this.isLinkout = isLinkout;
  }

   /**
   * The full hyperlink for the identifier
   * @return link
  **/
  @ApiModelProperty(example = "https://doi.org/10.6084/m9.figshare.1407024", value = "The full hyperlink for the identifier")
  public String getLink() {
    return link;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RelatedMaterial relatedMaterial = (RelatedMaterial) o;
    return Objects.equals(this.id, relatedMaterial.id) &&
        Objects.equals(this.identifier, relatedMaterial.identifier) &&
        Objects.equals(this.title, relatedMaterial.title) &&
        Objects.equals(this.relation, relatedMaterial.relation) &&
        Objects.equals(this.identifierType, relatedMaterial.identifierType) &&
        Objects.equals(this.isLinkout, relatedMaterial.isLinkout) &&
        Objects.equals(this.link, relatedMaterial.link);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, identifier, title, relation, identifierType, isLinkout, link);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RelatedMaterial {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    relation: ").append(toIndentedString(relation)).append("\n");
    sb.append("    identifierType: ").append(toIndentedString(identifierType)).append("\n");
    sb.append("    isLinkout: ").append(toIndentedString(isLinkout)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

