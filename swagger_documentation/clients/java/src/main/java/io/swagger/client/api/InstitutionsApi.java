/*
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AccountCreate;
import io.swagger.client.model.AccountGroupRoles;
import io.swagger.client.model.AccountGroupRolesCreate;
import io.swagger.client.model.AccountUpdate;
import io.swagger.client.model.Article;
import io.swagger.client.model.Category;
import io.swagger.client.model.Curation;
import io.swagger.client.model.CurationComment;
import io.swagger.client.model.CurationCommentCreate;
import io.swagger.client.model.CurationDetail;
import io.swagger.client.model.ErrorMessage;
import java.io.File;
import io.swagger.client.model.Group;
import io.swagger.client.model.GroupEmbargoOptions;
import io.swagger.client.model.Institution;
import io.swagger.client.model.InstitutionAccountsSearch;
import io.swagger.client.model.ResponseMessage;
import io.swagger.client.model.Role;
import io.swagger.client.model.ShortAccount;
import io.swagger.client.model.ShortCustomField;
import io.swagger.client.model.User;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InstitutionsApi {
    private ApiClient apiClient;

    public InstitutionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InstitutionsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for accountInstitutionCuration
     * @param curationId ID of the curation (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call accountInstitutionCurationCall(Long curationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/institution/review/{curation_id}"
            .replaceAll("\\{" + "curation_id" + "\\}", apiClient.escapeString(curationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call accountInstitutionCurationValidateBeforeCall(Long curationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'curationId' is set
        if (curationId == null) {
            throw new ApiException("Missing the required parameter 'curationId' when calling accountInstitutionCuration(Async)");
        }
        
        
        com.squareup.okhttp.Call call = accountInstitutionCurationCall(curationId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Institution Curation Review
     * Retrieve a certain curation review by its ID
     * @param curationId ID of the curation (required)
     * @return CurationDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CurationDetail accountInstitutionCuration(Long curationId) throws ApiException {
        ApiResponse<CurationDetail> resp = accountInstitutionCurationWithHttpInfo(curationId);
        return resp.getData();
    }

    /**
     * Institution Curation Review
     * Retrieve a certain curation review by its ID
     * @param curationId ID of the curation (required)
     * @return ApiResponse&lt;CurationDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CurationDetail> accountInstitutionCurationWithHttpInfo(Long curationId) throws ApiException {
        com.squareup.okhttp.Call call = accountInstitutionCurationValidateBeforeCall(curationId, null, null);
        Type localVarReturnType = new TypeToken<CurationDetail>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Institution Curation Review (asynchronously)
     * Retrieve a certain curation review by its ID
     * @param curationId ID of the curation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call accountInstitutionCurationAsync(Long curationId, final ApiCallback<CurationDetail> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = accountInstitutionCurationValidateBeforeCall(curationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CurationDetail>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for accountInstitutionCurationComments
     * @param curationId ID of the curation (required)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call accountInstitutionCurationCommentsCall(Long curationId, Long limit, Long offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/institution/review/{curation_id}/comments"
            .replaceAll("\\{" + "curation_id" + "\\}", apiClient.escapeString(curationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call accountInstitutionCurationCommentsValidateBeforeCall(Long curationId, Long limit, Long offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'curationId' is set
        if (curationId == null) {
            throw new ApiException("Missing the required parameter 'curationId' when calling accountInstitutionCurationComments(Async)");
        }
        
        
        com.squareup.okhttp.Call call = accountInstitutionCurationCommentsCall(curationId, limit, offset, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Institution Curation Review Comments
     * Retrieve a certain curation review&#39;s comments.
     * @param curationId ID of the curation (required)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @return CurationComment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CurationComment accountInstitutionCurationComments(Long curationId, Long limit, Long offset) throws ApiException {
        ApiResponse<CurationComment> resp = accountInstitutionCurationCommentsWithHttpInfo(curationId, limit, offset);
        return resp.getData();
    }

    /**
     * Institution Curation Review Comments
     * Retrieve a certain curation review&#39;s comments.
     * @param curationId ID of the curation (required)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @return ApiResponse&lt;CurationComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CurationComment> accountInstitutionCurationCommentsWithHttpInfo(Long curationId, Long limit, Long offset) throws ApiException {
        com.squareup.okhttp.Call call = accountInstitutionCurationCommentsValidateBeforeCall(curationId, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<CurationComment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Institution Curation Review Comments (asynchronously)
     * Retrieve a certain curation review&#39;s comments.
     * @param curationId ID of the curation (required)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call accountInstitutionCurationCommentsAsync(Long curationId, Long limit, Long offset, final ApiCallback<CurationComment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = accountInstitutionCurationCommentsValidateBeforeCall(curationId, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CurationComment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for accountInstitutionCurationComments_0
     * @param curationId ID of the curation (required)
     * @param curationComment The content/value of the comment. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call accountInstitutionCurationComments_0Call(Long curationId, CurationCommentCreate curationComment, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = curationComment;
        
        // create path and map variables
        String localVarPath = "/account/institution/review/{curation_id}/comments"
            .replaceAll("\\{" + "curation_id" + "\\}", apiClient.escapeString(curationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call accountInstitutionCurationComments_0ValidateBeforeCall(Long curationId, CurationCommentCreate curationComment, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'curationId' is set
        if (curationId == null) {
            throw new ApiException("Missing the required parameter 'curationId' when calling accountInstitutionCurationComments_0(Async)");
        }
        
        // verify the required parameter 'curationComment' is set
        if (curationComment == null) {
            throw new ApiException("Missing the required parameter 'curationComment' when calling accountInstitutionCurationComments_0(Async)");
        }
        
        
        com.squareup.okhttp.Call call = accountInstitutionCurationComments_0Call(curationId, curationComment, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * POST Institution Curation Review Comment
     * Add a new comment to the review.
     * @param curationId ID of the curation (required)
     * @param curationComment The content/value of the comment. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void accountInstitutionCurationComments_0(Long curationId, CurationCommentCreate curationComment) throws ApiException {
        accountInstitutionCurationComments_0WithHttpInfo(curationId, curationComment);
    }

    /**
     * POST Institution Curation Review Comment
     * Add a new comment to the review.
     * @param curationId ID of the curation (required)
     * @param curationComment The content/value of the comment. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> accountInstitutionCurationComments_0WithHttpInfo(Long curationId, CurationCommentCreate curationComment) throws ApiException {
        com.squareup.okhttp.Call call = accountInstitutionCurationComments_0ValidateBeforeCall(curationId, curationComment, null, null);
        return apiClient.execute(call);
    }

    /**
     * POST Institution Curation Review Comment (asynchronously)
     * Add a new comment to the review.
     * @param curationId ID of the curation (required)
     * @param curationComment The content/value of the comment. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call accountInstitutionCurationComments_0Async(Long curationId, CurationCommentCreate curationComment, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = accountInstitutionCurationComments_0ValidateBeforeCall(curationId, curationComment, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for accountInstitutionCurations
     * @param groupId Filter by the group ID (optional)
     * @param articleId Retrieve the reviews for this article (optional)
     * @param status Filter by the status of the review (optional)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call accountInstitutionCurationsCall(Long groupId, Long articleId, String status, Long limit, Long offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/institution/reviews";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (groupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "group_id", groupId));
        if (articleId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "article_id", articleId));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "status", status));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call accountInstitutionCurationsValidateBeforeCall(Long groupId, Long articleId, String status, Long limit, Long offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = accountInstitutionCurationsCall(groupId, articleId, status, limit, offset, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Institution Curation Reviews
     * Retrieve a list of curation reviews for this institution
     * @param groupId Filter by the group ID (optional)
     * @param articleId Retrieve the reviews for this article (optional)
     * @param status Filter by the status of the review (optional)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @return Curation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Curation accountInstitutionCurations(Long groupId, Long articleId, String status, Long limit, Long offset) throws ApiException {
        ApiResponse<Curation> resp = accountInstitutionCurationsWithHttpInfo(groupId, articleId, status, limit, offset);
        return resp.getData();
    }

    /**
     * Institution Curation Reviews
     * Retrieve a list of curation reviews for this institution
     * @param groupId Filter by the group ID (optional)
     * @param articleId Retrieve the reviews for this article (optional)
     * @param status Filter by the status of the review (optional)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @return ApiResponse&lt;Curation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Curation> accountInstitutionCurationsWithHttpInfo(Long groupId, Long articleId, String status, Long limit, Long offset) throws ApiException {
        com.squareup.okhttp.Call call = accountInstitutionCurationsValidateBeforeCall(groupId, articleId, status, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<Curation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Institution Curation Reviews (asynchronously)
     * Retrieve a list of curation reviews for this institution
     * @param groupId Filter by the group ID (optional)
     * @param articleId Retrieve the reviews for this article (optional)
     * @param status Filter by the status of the review (optional)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call accountInstitutionCurationsAsync(Long groupId, Long articleId, String status, Long limit, Long offset, final ApiCallback<Curation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = accountInstitutionCurationsValidateBeforeCall(groupId, articleId, status, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Curation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for customFieldsList
     * @param groupId Group_id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call customFieldsListCall(Long groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/institution/custom_fields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (groupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "group_id", groupId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call customFieldsListValidateBeforeCall(Long groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = customFieldsListCall(groupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Private account institution group custom fields
     * Returns the custom fields in the group the user belongs to, or the ones in the group specified, if the user has access.
     * @param groupId Group_id (optional)
     * @return List&lt;ShortCustomField&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ShortCustomField> customFieldsList(Long groupId) throws ApiException {
        ApiResponse<List<ShortCustomField>> resp = customFieldsListWithHttpInfo(groupId);
        return resp.getData();
    }

    /**
     * Private account institution group custom fields
     * Returns the custom fields in the group the user belongs to, or the ones in the group specified, if the user has access.
     * @param groupId Group_id (optional)
     * @return ApiResponse&lt;List&lt;ShortCustomField&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ShortCustomField>> customFieldsListWithHttpInfo(Long groupId) throws ApiException {
        com.squareup.okhttp.Call call = customFieldsListValidateBeforeCall(groupId, null, null);
        Type localVarReturnType = new TypeToken<List<ShortCustomField>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Private account institution group custom fields (asynchronously)
     * Returns the custom fields in the group the user belongs to, or the ones in the group specified, if the user has access.
     * @param groupId Group_id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customFieldsListAsync(Long groupId, final ApiCallback<List<ShortCustomField>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customFieldsListValidateBeforeCall(groupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ShortCustomField>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for customFieldsUpload
     * @param customFieldId Custom field identifier (required)
     * @param externalFile CSV file to be uploaded (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call customFieldsUploadCall(Long customFieldId, File externalFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/institution/custom_fields/{custom_field_id}/items/upload"
            .replaceAll("\\{" + "custom_field_id" + "\\}", apiClient.escapeString(customFieldId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (externalFile != null)
        localVarFormParams.put("external_file", externalFile);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call customFieldsUploadValidateBeforeCall(Long customFieldId, File externalFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'customFieldId' is set
        if (customFieldId == null) {
            throw new ApiException("Missing the required parameter 'customFieldId' when calling customFieldsUpload(Async)");
        }
        
        
        com.squareup.okhttp.Call call = customFieldsUploadCall(customFieldId, externalFile, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Custom fields values files upload
     * Uploads a CSV containing values for a specific custom field of type &lt;b&gt;dropdown_large_list&lt;/b&gt;. More details in the &lt;a href&#x3D;\&quot;#custom_fields\&quot;&gt;Custom Fields section&lt;/a&gt;
     * @param customFieldId Custom field identifier (required)
     * @param externalFile CSV file to be uploaded (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object customFieldsUpload(Long customFieldId, File externalFile) throws ApiException {
        ApiResponse<Object> resp = customFieldsUploadWithHttpInfo(customFieldId, externalFile);
        return resp.getData();
    }

    /**
     * Custom fields values files upload
     * Uploads a CSV containing values for a specific custom field of type &lt;b&gt;dropdown_large_list&lt;/b&gt;. More details in the &lt;a href&#x3D;\&quot;#custom_fields\&quot;&gt;Custom Fields section&lt;/a&gt;
     * @param customFieldId Custom field identifier (required)
     * @param externalFile CSV file to be uploaded (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> customFieldsUploadWithHttpInfo(Long customFieldId, File externalFile) throws ApiException {
        com.squareup.okhttp.Call call = customFieldsUploadValidateBeforeCall(customFieldId, externalFile, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Custom fields values files upload (asynchronously)
     * Uploads a CSV containing values for a specific custom field of type &lt;b&gt;dropdown_large_list&lt;/b&gt;. More details in the &lt;a href&#x3D;\&quot;#custom_fields\&quot;&gt;Custom Fields section&lt;/a&gt;
     * @param customFieldId Custom field identifier (required)
     * @param externalFile CSV file to be uploaded (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customFieldsUploadAsync(Long customFieldId, File externalFile, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customFieldsUploadValidateBeforeCall(customFieldId, externalFile, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for institutionArticles
     * @param institutionStringId  (required)
     * @param resourceId  (required)
     * @param filename  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call institutionArticlesCall(String institutionStringId, String resourceId, String filename, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/institutions/{institution_string_id}/articles/filter-by"
            .replaceAll("\\{" + "institution_string_id" + "\\}", apiClient.escapeString(institutionStringId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (resourceId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "resource_id", resourceId));
        if (filename != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filename", filename));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call institutionArticlesValidateBeforeCall(String institutionStringId, String resourceId, String filename, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'institutionStringId' is set
        if (institutionStringId == null) {
            throw new ApiException("Missing the required parameter 'institutionStringId' when calling institutionArticles(Async)");
        }
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling institutionArticles(Async)");
        }
        
        // verify the required parameter 'filename' is set
        if (filename == null) {
            throw new ApiException("Missing the required parameter 'filename' when calling institutionArticles(Async)");
        }
        
        
        com.squareup.okhttp.Call call = institutionArticlesCall(institutionStringId, resourceId, filename, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Public Licenses
     * Returns a list of articles belonging to the institution
     * @param institutionStringId  (required)
     * @param resourceId  (required)
     * @param filename  (required)
     * @return List&lt;Article&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Article> institutionArticles(String institutionStringId, String resourceId, String filename) throws ApiException {
        ApiResponse<List<Article>> resp = institutionArticlesWithHttpInfo(institutionStringId, resourceId, filename);
        return resp.getData();
    }

    /**
     * Public Licenses
     * Returns a list of articles belonging to the institution
     * @param institutionStringId  (required)
     * @param resourceId  (required)
     * @param filename  (required)
     * @return ApiResponse&lt;List&lt;Article&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Article>> institutionArticlesWithHttpInfo(String institutionStringId, String resourceId, String filename) throws ApiException {
        com.squareup.okhttp.Call call = institutionArticlesValidateBeforeCall(institutionStringId, resourceId, filename, null, null);
        Type localVarReturnType = new TypeToken<List<Article>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Public Licenses (asynchronously)
     * Returns a list of articles belonging to the institution
     * @param institutionStringId  (required)
     * @param resourceId  (required)
     * @param filename  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call institutionArticlesAsync(String institutionStringId, String resourceId, String filename, final ApiCallback<List<Article>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = institutionArticlesValidateBeforeCall(institutionStringId, resourceId, filename, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Article>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for institutionHrfeedUpload
     * @param hrfeed You can find an example in the Hr Feed section (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call institutionHrfeedUploadCall(File hrfeed, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/institution/hrfeed/upload";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (hrfeed != null)
        localVarFormParams.put("hrfeed", hrfeed);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call institutionHrfeedUploadValidateBeforeCall(File hrfeed, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = institutionHrfeedUploadCall(hrfeed, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Private Institution HRfeed Upload
     * More info in the &lt;a href&#x3D;\&quot;#hr_feed\&quot;&gt;HR Feed section&lt;/a&gt;
     * @param hrfeed You can find an example in the Hr Feed section (optional)
     * @return ResponseMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseMessage institutionHrfeedUpload(File hrfeed) throws ApiException {
        ApiResponse<ResponseMessage> resp = institutionHrfeedUploadWithHttpInfo(hrfeed);
        return resp.getData();
    }

    /**
     * Private Institution HRfeed Upload
     * More info in the &lt;a href&#x3D;\&quot;#hr_feed\&quot;&gt;HR Feed section&lt;/a&gt;
     * @param hrfeed You can find an example in the Hr Feed section (optional)
     * @return ApiResponse&lt;ResponseMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseMessage> institutionHrfeedUploadWithHttpInfo(File hrfeed) throws ApiException {
        com.squareup.okhttp.Call call = institutionHrfeedUploadValidateBeforeCall(hrfeed, null, null);
        Type localVarReturnType = new TypeToken<ResponseMessage>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Private Institution HRfeed Upload (asynchronously)
     * More info in the &lt;a href&#x3D;\&quot;#hr_feed\&quot;&gt;HR Feed section&lt;/a&gt;
     * @param hrfeed You can find an example in the Hr Feed section (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call institutionHrfeedUploadAsync(File hrfeed, final ApiCallback<ResponseMessage> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = institutionHrfeedUploadValidateBeforeCall(hrfeed, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseMessage>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateAccountInstitutionUser
     * @param accountId Account identifier the user is associated to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateAccountInstitutionUserCall(Long accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/institution/users/{account_id}"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateAccountInstitutionUserValidateBeforeCall(Long accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling privateAccountInstitutionUser(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateAccountInstitutionUserCall(accountId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Private Account Institution User
     * Retrieve institution user information using the account_id
     * @param accountId Account identifier the user is associated to (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public User privateAccountInstitutionUser(Long accountId) throws ApiException {
        ApiResponse<User> resp = privateAccountInstitutionUserWithHttpInfo(accountId);
        return resp.getData();
    }

    /**
     * Private Account Institution User
     * Retrieve institution user information using the account_id
     * @param accountId Account identifier the user is associated to (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<User> privateAccountInstitutionUserWithHttpInfo(Long accountId) throws ApiException {
        com.squareup.okhttp.Call call = privateAccountInstitutionUserValidateBeforeCall(accountId, null, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Private Account Institution User (asynchronously)
     * Retrieve institution user information using the account_id
     * @param accountId Account identifier the user is associated to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateAccountInstitutionUserAsync(Long accountId, final ApiCallback<User> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateAccountInstitutionUserValidateBeforeCall(accountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateCategoriesList
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateCategoriesListCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateCategoriesListValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = privateCategoriesListCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Private Account Categories
     * List institution categories (including parent Categories)
     * @return List&lt;Category&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Category> privateCategoriesList() throws ApiException {
        ApiResponse<List<Category>> resp = privateCategoriesListWithHttpInfo();
        return resp.getData();
    }

    /**
     * Private Account Categories
     * List institution categories (including parent Categories)
     * @return ApiResponse&lt;List&lt;Category&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Category>> privateCategoriesListWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = privateCategoriesListValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<Category>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Private Account Categories (asynchronously)
     * List institution categories (including parent Categories)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateCategoriesListAsync(final ApiCallback<List<Category>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateCategoriesListValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Category>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateGroupEmbargoOptionsDetails
     * @param groupId Group identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateGroupEmbargoOptionsDetailsCall(Long groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/institution/groups/{group_id}/embargo_options"
            .replaceAll("\\{" + "group_id" + "\\}", apiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateGroupEmbargoOptionsDetailsValidateBeforeCall(Long groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling privateGroupEmbargoOptionsDetails(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateGroupEmbargoOptionsDetailsCall(groupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Private Account Institution Group Embargo Options
     * Account institution group embargo options details
     * @param groupId Group identifier (required)
     * @return List&lt;GroupEmbargoOptions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<GroupEmbargoOptions> privateGroupEmbargoOptionsDetails(Long groupId) throws ApiException {
        ApiResponse<List<GroupEmbargoOptions>> resp = privateGroupEmbargoOptionsDetailsWithHttpInfo(groupId);
        return resp.getData();
    }

    /**
     * Private Account Institution Group Embargo Options
     * Account institution group embargo options details
     * @param groupId Group identifier (required)
     * @return ApiResponse&lt;List&lt;GroupEmbargoOptions&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<GroupEmbargoOptions>> privateGroupEmbargoOptionsDetailsWithHttpInfo(Long groupId) throws ApiException {
        com.squareup.okhttp.Call call = privateGroupEmbargoOptionsDetailsValidateBeforeCall(groupId, null, null);
        Type localVarReturnType = new TypeToken<List<GroupEmbargoOptions>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Private Account Institution Group Embargo Options (asynchronously)
     * Account institution group embargo options details
     * @param groupId Group identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateGroupEmbargoOptionsDetailsAsync(Long groupId, final ApiCallback<List<GroupEmbargoOptions>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateGroupEmbargoOptionsDetailsValidateBeforeCall(groupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<GroupEmbargoOptions>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateInstitutionAccountGroupRoleDelete
     * @param accountId Account identifier for which to remove the role (required)
     * @param groupId Group identifier for which to remove the role (required)
     * @param roleId Role identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateInstitutionAccountGroupRoleDeleteCall(Long accountId, Long groupId, Long roleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/institution/roles/{account_id}/{group_id}/{role_id}"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()))
            .replaceAll("\\{" + "group_id" + "\\}", apiClient.escapeString(groupId.toString()))
            .replaceAll("\\{" + "role_id" + "\\}", apiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateInstitutionAccountGroupRoleDeleteValidateBeforeCall(Long accountId, Long groupId, Long roleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling privateInstitutionAccountGroupRoleDelete(Async)");
        }
        
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling privateInstitutionAccountGroupRoleDelete(Async)");
        }
        
        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling privateInstitutionAccountGroupRoleDelete(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateInstitutionAccountGroupRoleDeleteCall(accountId, groupId, roleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Institution Account Group Role
     * Delete Institution Account Group Role
     * @param accountId Account identifier for which to remove the role (required)
     * @param groupId Group identifier for which to remove the role (required)
     * @param roleId Role identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void privateInstitutionAccountGroupRoleDelete(Long accountId, Long groupId, Long roleId) throws ApiException {
        privateInstitutionAccountGroupRoleDeleteWithHttpInfo(accountId, groupId, roleId);
    }

    /**
     * Delete Institution Account Group Role
     * Delete Institution Account Group Role
     * @param accountId Account identifier for which to remove the role (required)
     * @param groupId Group identifier for which to remove the role (required)
     * @param roleId Role identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> privateInstitutionAccountGroupRoleDeleteWithHttpInfo(Long accountId, Long groupId, Long roleId) throws ApiException {
        com.squareup.okhttp.Call call = privateInstitutionAccountGroupRoleDeleteValidateBeforeCall(accountId, groupId, roleId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete Institution Account Group Role (asynchronously)
     * Delete Institution Account Group Role
     * @param accountId Account identifier for which to remove the role (required)
     * @param groupId Group identifier for which to remove the role (required)
     * @param roleId Role identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateInstitutionAccountGroupRoleDeleteAsync(Long accountId, Long groupId, Long roleId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateInstitutionAccountGroupRoleDeleteValidateBeforeCall(accountId, groupId, roleId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for privateInstitutionAccountGroupRoles
     * @param accountId Account identifier the user is associated to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateInstitutionAccountGroupRolesCall(Long accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/institution/roles/{account_id}"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateInstitutionAccountGroupRolesValidateBeforeCall(Long accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling privateInstitutionAccountGroupRoles(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateInstitutionAccountGroupRolesCall(accountId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List Institution Account Group Roles
     * List Institution Account Group Roles
     * @param accountId Account identifier the user is associated to (required)
     * @return AccountGroupRoles
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountGroupRoles privateInstitutionAccountGroupRoles(Long accountId) throws ApiException {
        ApiResponse<AccountGroupRoles> resp = privateInstitutionAccountGroupRolesWithHttpInfo(accountId);
        return resp.getData();
    }

    /**
     * List Institution Account Group Roles
     * List Institution Account Group Roles
     * @param accountId Account identifier the user is associated to (required)
     * @return ApiResponse&lt;AccountGroupRoles&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountGroupRoles> privateInstitutionAccountGroupRolesWithHttpInfo(Long accountId) throws ApiException {
        com.squareup.okhttp.Call call = privateInstitutionAccountGroupRolesValidateBeforeCall(accountId, null, null);
        Type localVarReturnType = new TypeToken<AccountGroupRoles>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Institution Account Group Roles (asynchronously)
     * List Institution Account Group Roles
     * @param accountId Account identifier the user is associated to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateInstitutionAccountGroupRolesAsync(Long accountId, final ApiCallback<AccountGroupRoles> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateInstitutionAccountGroupRolesValidateBeforeCall(accountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountGroupRoles>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateInstitutionAccountGroupRolesCreate
     * @param accountId Account identifier the user is associated to (required)
     * @param account Account description (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateInstitutionAccountGroupRolesCreateCall(Long accountId, AccountGroupRolesCreate account, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = account;
        
        // create path and map variables
        String localVarPath = "/account/institution/roles/{account_id}"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateInstitutionAccountGroupRolesCreateValidateBeforeCall(Long accountId, AccountGroupRolesCreate account, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling privateInstitutionAccountGroupRolesCreate(Async)");
        }
        
        // verify the required parameter 'account' is set
        if (account == null) {
            throw new ApiException("Missing the required parameter 'account' when calling privateInstitutionAccountGroupRolesCreate(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateInstitutionAccountGroupRolesCreateCall(accountId, account, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add Institution Account Group Roles
     * Add Institution Account Group Roles
     * @param accountId Account identifier the user is associated to (required)
     * @param account Account description (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void privateInstitutionAccountGroupRolesCreate(Long accountId, AccountGroupRolesCreate account) throws ApiException {
        privateInstitutionAccountGroupRolesCreateWithHttpInfo(accountId, account);
    }

    /**
     * Add Institution Account Group Roles
     * Add Institution Account Group Roles
     * @param accountId Account identifier the user is associated to (required)
     * @param account Account description (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> privateInstitutionAccountGroupRolesCreateWithHttpInfo(Long accountId, AccountGroupRolesCreate account) throws ApiException {
        com.squareup.okhttp.Call call = privateInstitutionAccountGroupRolesCreateValidateBeforeCall(accountId, account, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add Institution Account Group Roles (asynchronously)
     * Add Institution Account Group Roles
     * @param accountId Account identifier the user is associated to (required)
     * @param account Account description (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateInstitutionAccountGroupRolesCreateAsync(Long accountId, AccountGroupRolesCreate account, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateInstitutionAccountGroupRolesCreateValidateBeforeCall(accountId, account, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for privateInstitutionAccountsCreate
     * @param account Account description (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateInstitutionAccountsCreateCall(AccountCreate account, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = account;
        
        // create path and map variables
        String localVarPath = "/account/institution/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateInstitutionAccountsCreateValidateBeforeCall(AccountCreate account, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'account' is set
        if (account == null) {
            throw new ApiException("Missing the required parameter 'account' when calling privateInstitutionAccountsCreate(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateInstitutionAccountsCreateCall(account, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create new Institution Account
     * Create a new Account by sending account information
     * @param account Account description (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void privateInstitutionAccountsCreate(AccountCreate account) throws ApiException {
        privateInstitutionAccountsCreateWithHttpInfo(account);
    }

    /**
     * Create new Institution Account
     * Create a new Account by sending account information
     * @param account Account description (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> privateInstitutionAccountsCreateWithHttpInfo(AccountCreate account) throws ApiException {
        com.squareup.okhttp.Call call = privateInstitutionAccountsCreateValidateBeforeCall(account, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create new Institution Account (asynchronously)
     * Create a new Account by sending account information
     * @param account Account description (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateInstitutionAccountsCreateAsync(AccountCreate account, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateInstitutionAccountsCreateValidateBeforeCall(account, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for privateInstitutionAccountsList
     * @param page Page number. Used for pagination with page_size (optional)
     * @param pageSize The number of results included on a page. Used for pagination with page (optional, default to 10)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @param isActive Filter by active status (optional)
     * @param institutionUserId Filter by institution_user_id (optional)
     * @param email Filter by email (optional)
     * @param idLte Retrieve accounts with an ID lower or equal to the specified value (optional)
     * @param idGte Retrieve accounts with an ID greater or equal to the specified value (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateInstitutionAccountsListCall(Long page, Long pageSize, Long limit, Long offset, Long isActive, String institutionUserId, String email, Long idLte, Long idGte, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/institution/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page_size", pageSize));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));
        if (isActive != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "is_active", isActive));
        if (institutionUserId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "institution_user_id", institutionUserId));
        if (email != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "email", email));
        if (idLte != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "id_lte", idLte));
        if (idGte != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "id_gte", idGte));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateInstitutionAccountsListValidateBeforeCall(Long page, Long pageSize, Long limit, Long offset, Long isActive, String institutionUserId, String email, Long idLte, Long idGte, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = privateInstitutionAccountsListCall(page, pageSize, limit, offset, isActive, institutionUserId, email, idLte, idGte, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Private Account Institution Accounts
     * Returns the accounts for which the account has administrative privileges (assigned and inherited).
     * @param page Page number. Used for pagination with page_size (optional)
     * @param pageSize The number of results included on a page. Used for pagination with page (optional, default to 10)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @param isActive Filter by active status (optional)
     * @param institutionUserId Filter by institution_user_id (optional)
     * @param email Filter by email (optional)
     * @param idLte Retrieve accounts with an ID lower or equal to the specified value (optional)
     * @param idGte Retrieve accounts with an ID greater or equal to the specified value (optional)
     * @return List&lt;ShortAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ShortAccount> privateInstitutionAccountsList(Long page, Long pageSize, Long limit, Long offset, Long isActive, String institutionUserId, String email, Long idLte, Long idGte) throws ApiException {
        ApiResponse<List<ShortAccount>> resp = privateInstitutionAccountsListWithHttpInfo(page, pageSize, limit, offset, isActive, institutionUserId, email, idLte, idGte);
        return resp.getData();
    }

    /**
     * Private Account Institution Accounts
     * Returns the accounts for which the account has administrative privileges (assigned and inherited).
     * @param page Page number. Used for pagination with page_size (optional)
     * @param pageSize The number of results included on a page. Used for pagination with page (optional, default to 10)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @param isActive Filter by active status (optional)
     * @param institutionUserId Filter by institution_user_id (optional)
     * @param email Filter by email (optional)
     * @param idLte Retrieve accounts with an ID lower or equal to the specified value (optional)
     * @param idGte Retrieve accounts with an ID greater or equal to the specified value (optional)
     * @return ApiResponse&lt;List&lt;ShortAccount&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ShortAccount>> privateInstitutionAccountsListWithHttpInfo(Long page, Long pageSize, Long limit, Long offset, Long isActive, String institutionUserId, String email, Long idLte, Long idGte) throws ApiException {
        com.squareup.okhttp.Call call = privateInstitutionAccountsListValidateBeforeCall(page, pageSize, limit, offset, isActive, institutionUserId, email, idLte, idGte, null, null);
        Type localVarReturnType = new TypeToken<List<ShortAccount>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Private Account Institution Accounts (asynchronously)
     * Returns the accounts for which the account has administrative privileges (assigned and inherited).
     * @param page Page number. Used for pagination with page_size (optional)
     * @param pageSize The number of results included on a page. Used for pagination with page (optional, default to 10)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @param isActive Filter by active status (optional)
     * @param institutionUserId Filter by institution_user_id (optional)
     * @param email Filter by email (optional)
     * @param idLte Retrieve accounts with an ID lower or equal to the specified value (optional)
     * @param idGte Retrieve accounts with an ID greater or equal to the specified value (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateInstitutionAccountsListAsync(Long page, Long pageSize, Long limit, Long offset, Long isActive, String institutionUserId, String email, Long idLte, Long idGte, final ApiCallback<List<ShortAccount>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateInstitutionAccountsListValidateBeforeCall(page, pageSize, limit, offset, isActive, institutionUserId, email, idLte, idGte, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ShortAccount>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateInstitutionAccountsSearch
     * @param search Search Parameters (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateInstitutionAccountsSearchCall(InstitutionAccountsSearch search, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = search;
        
        // create path and map variables
        String localVarPath = "/account/institution/accounts/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateInstitutionAccountsSearchValidateBeforeCall(InstitutionAccountsSearch search, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'search' is set
        if (search == null) {
            throw new ApiException("Missing the required parameter 'search' when calling privateInstitutionAccountsSearch(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateInstitutionAccountsSearchCall(search, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Private Account Institution Accounts Search
     * Returns the accounts for which the account has administrative privileges (assigned and inherited).
     * @param search Search Parameters (required)
     * @return List&lt;ShortAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ShortAccount> privateInstitutionAccountsSearch(InstitutionAccountsSearch search) throws ApiException {
        ApiResponse<List<ShortAccount>> resp = privateInstitutionAccountsSearchWithHttpInfo(search);
        return resp.getData();
    }

    /**
     * Private Account Institution Accounts Search
     * Returns the accounts for which the account has administrative privileges (assigned and inherited).
     * @param search Search Parameters (required)
     * @return ApiResponse&lt;List&lt;ShortAccount&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ShortAccount>> privateInstitutionAccountsSearchWithHttpInfo(InstitutionAccountsSearch search) throws ApiException {
        com.squareup.okhttp.Call call = privateInstitutionAccountsSearchValidateBeforeCall(search, null, null);
        Type localVarReturnType = new TypeToken<List<ShortAccount>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Private Account Institution Accounts Search (asynchronously)
     * Returns the accounts for which the account has administrative privileges (assigned and inherited).
     * @param search Search Parameters (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateInstitutionAccountsSearchAsync(InstitutionAccountsSearch search, final ApiCallback<List<ShortAccount>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateInstitutionAccountsSearchValidateBeforeCall(search, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ShortAccount>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateInstitutionAccountsUpdate
     * @param accountId Account identifier the user is associated to (required)
     * @param account Account description (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateInstitutionAccountsUpdateCall(Long accountId, AccountUpdate account, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = account;
        
        // create path and map variables
        String localVarPath = "/account/institution/accounts/{account_id}"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateInstitutionAccountsUpdateValidateBeforeCall(Long accountId, AccountUpdate account, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling privateInstitutionAccountsUpdate(Async)");
        }
        
        // verify the required parameter 'account' is set
        if (account == null) {
            throw new ApiException("Missing the required parameter 'account' when calling privateInstitutionAccountsUpdate(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateInstitutionAccountsUpdateCall(accountId, account, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update Institution Account
     * Update Institution Account
     * @param accountId Account identifier the user is associated to (required)
     * @param account Account description (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void privateInstitutionAccountsUpdate(Long accountId, AccountUpdate account) throws ApiException {
        privateInstitutionAccountsUpdateWithHttpInfo(accountId, account);
    }

    /**
     * Update Institution Account
     * Update Institution Account
     * @param accountId Account identifier the user is associated to (required)
     * @param account Account description (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> privateInstitutionAccountsUpdateWithHttpInfo(Long accountId, AccountUpdate account) throws ApiException {
        com.squareup.okhttp.Call call = privateInstitutionAccountsUpdateValidateBeforeCall(accountId, account, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update Institution Account (asynchronously)
     * Update Institution Account
     * @param accountId Account identifier the user is associated to (required)
     * @param account Account description (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateInstitutionAccountsUpdateAsync(Long accountId, AccountUpdate account, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateInstitutionAccountsUpdateValidateBeforeCall(accountId, account, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for privateInstitutionArticles
     * @param page Page number. Used for pagination with page_size (optional)
     * @param pageSize The number of results included on a page. Used for pagination with page (optional, default to 10)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @param order The field by which to order. Default varies by endpoint/resource. (optional, default to published_date)
     * @param orderDirection  (optional, default to desc)
     * @param publishedSince Filter by article publishing date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD (optional)
     * @param modifiedSince Filter by article modified date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD (optional)
     * @param status only return collections with this status (optional)
     * @param resourceDoi only return collections with this resource_doi (optional)
     * @param itemType Only return articles with the respective type. Mapping for item_type is: 1 - Figure, 2 - Media, 3 - Dataset, 5 - Poster, 6 - Journal contribution, 7 - Presentation, 8 - Thesis, 9 - Software, 11 - Online resource, 12 - Preprint, 13 - Book, 14 - Conference contribution, 15 - Chapter, 16 - Peer review, 17 - Educational resource, 18 - Report, 19 - Standard, 20 - Composition, 21 - Funding, 22 - Physical object, 23 - Data management plan, 24 - Workflow, 25 - Monograph, 26 - Performance, 27 - Event, 28 - Service, 29 - Model (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateInstitutionArticlesCall(Long page, Long pageSize, Long limit, Long offset, String order, String orderDirection, String publishedSince, String modifiedSince, Long status, String resourceDoi, Long itemType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/institution/articles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page_size", pageSize));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "order", order));
        if (orderDirection != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "order_direction", orderDirection));
        if (publishedSince != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "published_since", publishedSince));
        if (modifiedSince != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "modified_since", modifiedSince));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "status", status));
        if (resourceDoi != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "resource_doi", resourceDoi));
        if (itemType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "item_type", itemType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateInstitutionArticlesValidateBeforeCall(Long page, Long pageSize, Long limit, Long offset, String order, String orderDirection, String publishedSince, String modifiedSince, Long status, String resourceDoi, Long itemType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = privateInstitutionArticlesCall(page, pageSize, limit, offset, order, orderDirection, publishedSince, modifiedSince, status, resourceDoi, itemType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Private Institution Articles
     * Get Articles from own institution. User must be administrator of the institution
     * @param page Page number. Used for pagination with page_size (optional)
     * @param pageSize The number of results included on a page. Used for pagination with page (optional, default to 10)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @param order The field by which to order. Default varies by endpoint/resource. (optional, default to published_date)
     * @param orderDirection  (optional, default to desc)
     * @param publishedSince Filter by article publishing date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD (optional)
     * @param modifiedSince Filter by article modified date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD (optional)
     * @param status only return collections with this status (optional)
     * @param resourceDoi only return collections with this resource_doi (optional)
     * @param itemType Only return articles with the respective type. Mapping for item_type is: 1 - Figure, 2 - Media, 3 - Dataset, 5 - Poster, 6 - Journal contribution, 7 - Presentation, 8 - Thesis, 9 - Software, 11 - Online resource, 12 - Preprint, 13 - Book, 14 - Conference contribution, 15 - Chapter, 16 - Peer review, 17 - Educational resource, 18 - Report, 19 - Standard, 20 - Composition, 21 - Funding, 22 - Physical object, 23 - Data management plan, 24 - Workflow, 25 - Monograph, 26 - Performance, 27 - Event, 28 - Service, 29 - Model (optional)
     * @return List&lt;Article&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Article> privateInstitutionArticles(Long page, Long pageSize, Long limit, Long offset, String order, String orderDirection, String publishedSince, String modifiedSince, Long status, String resourceDoi, Long itemType) throws ApiException {
        ApiResponse<List<Article>> resp = privateInstitutionArticlesWithHttpInfo(page, pageSize, limit, offset, order, orderDirection, publishedSince, modifiedSince, status, resourceDoi, itemType);
        return resp.getData();
    }

    /**
     * Private Institution Articles
     * Get Articles from own institution. User must be administrator of the institution
     * @param page Page number. Used for pagination with page_size (optional)
     * @param pageSize The number of results included on a page. Used for pagination with page (optional, default to 10)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @param order The field by which to order. Default varies by endpoint/resource. (optional, default to published_date)
     * @param orderDirection  (optional, default to desc)
     * @param publishedSince Filter by article publishing date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD (optional)
     * @param modifiedSince Filter by article modified date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD (optional)
     * @param status only return collections with this status (optional)
     * @param resourceDoi only return collections with this resource_doi (optional)
     * @param itemType Only return articles with the respective type. Mapping for item_type is: 1 - Figure, 2 - Media, 3 - Dataset, 5 - Poster, 6 - Journal contribution, 7 - Presentation, 8 - Thesis, 9 - Software, 11 - Online resource, 12 - Preprint, 13 - Book, 14 - Conference contribution, 15 - Chapter, 16 - Peer review, 17 - Educational resource, 18 - Report, 19 - Standard, 20 - Composition, 21 - Funding, 22 - Physical object, 23 - Data management plan, 24 - Workflow, 25 - Monograph, 26 - Performance, 27 - Event, 28 - Service, 29 - Model (optional)
     * @return ApiResponse&lt;List&lt;Article&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Article>> privateInstitutionArticlesWithHttpInfo(Long page, Long pageSize, Long limit, Long offset, String order, String orderDirection, String publishedSince, String modifiedSince, Long status, String resourceDoi, Long itemType) throws ApiException {
        com.squareup.okhttp.Call call = privateInstitutionArticlesValidateBeforeCall(page, pageSize, limit, offset, order, orderDirection, publishedSince, modifiedSince, status, resourceDoi, itemType, null, null);
        Type localVarReturnType = new TypeToken<List<Article>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Private Institution Articles (asynchronously)
     * Get Articles from own institution. User must be administrator of the institution
     * @param page Page number. Used for pagination with page_size (optional)
     * @param pageSize The number of results included on a page. Used for pagination with page (optional, default to 10)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @param order The field by which to order. Default varies by endpoint/resource. (optional, default to published_date)
     * @param orderDirection  (optional, default to desc)
     * @param publishedSince Filter by article publishing date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD (optional)
     * @param modifiedSince Filter by article modified date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD (optional)
     * @param status only return collections with this status (optional)
     * @param resourceDoi only return collections with this resource_doi (optional)
     * @param itemType Only return articles with the respective type. Mapping for item_type is: 1 - Figure, 2 - Media, 3 - Dataset, 5 - Poster, 6 - Journal contribution, 7 - Presentation, 8 - Thesis, 9 - Software, 11 - Online resource, 12 - Preprint, 13 - Book, 14 - Conference contribution, 15 - Chapter, 16 - Peer review, 17 - Educational resource, 18 - Report, 19 - Standard, 20 - Composition, 21 - Funding, 22 - Physical object, 23 - Data management plan, 24 - Workflow, 25 - Monograph, 26 - Performance, 27 - Event, 28 - Service, 29 - Model (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateInstitutionArticlesAsync(Long page, Long pageSize, Long limit, Long offset, String order, String orderDirection, String publishedSince, String modifiedSince, Long status, String resourceDoi, Long itemType, final ApiCallback<List<Article>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateInstitutionArticlesValidateBeforeCall(page, pageSize, limit, offset, order, orderDirection, publishedSince, modifiedSince, status, resourceDoi, itemType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Article>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateInstitutionDetails
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateInstitutionDetailsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/institution";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateInstitutionDetailsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = privateInstitutionDetailsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Private Account Institutions
     * Account institution details
     * @return Institution
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Institution privateInstitutionDetails() throws ApiException {
        ApiResponse<Institution> resp = privateInstitutionDetailsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Private Account Institutions
     * Account institution details
     * @return ApiResponse&lt;Institution&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Institution> privateInstitutionDetailsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = privateInstitutionDetailsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<Institution>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Private Account Institutions (asynchronously)
     * Account institution details
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateInstitutionDetailsAsync(final ApiCallback<Institution> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateInstitutionDetailsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Institution>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateInstitutionEmbargoOptionsDetails
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateInstitutionEmbargoOptionsDetailsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/institution/embargo_options";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateInstitutionEmbargoOptionsDetailsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = privateInstitutionEmbargoOptionsDetailsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Private Account Institution embargo options
     * Account institution embargo options details
     * @return List&lt;GroupEmbargoOptions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<GroupEmbargoOptions> privateInstitutionEmbargoOptionsDetails() throws ApiException {
        ApiResponse<List<GroupEmbargoOptions>> resp = privateInstitutionEmbargoOptionsDetailsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Private Account Institution embargo options
     * Account institution embargo options details
     * @return ApiResponse&lt;List&lt;GroupEmbargoOptions&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<GroupEmbargoOptions>> privateInstitutionEmbargoOptionsDetailsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = privateInstitutionEmbargoOptionsDetailsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<GroupEmbargoOptions>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Private Account Institution embargo options (asynchronously)
     * Account institution embargo options details
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateInstitutionEmbargoOptionsDetailsAsync(final ApiCallback<List<GroupEmbargoOptions>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateInstitutionEmbargoOptionsDetailsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<GroupEmbargoOptions>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateInstitutionGroupsList
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateInstitutionGroupsListCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/institution/groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateInstitutionGroupsListValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = privateInstitutionGroupsListCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Private Account Institution Groups
     * Returns the groups for which the account has administrative privileges (assigned and inherited).
     * @return List&lt;Group&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Group> privateInstitutionGroupsList() throws ApiException {
        ApiResponse<List<Group>> resp = privateInstitutionGroupsListWithHttpInfo();
        return resp.getData();
    }

    /**
     * Private Account Institution Groups
     * Returns the groups for which the account has administrative privileges (assigned and inherited).
     * @return ApiResponse&lt;List&lt;Group&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Group>> privateInstitutionGroupsListWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = privateInstitutionGroupsListValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<Group>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Private Account Institution Groups (asynchronously)
     * Returns the groups for which the account has administrative privileges (assigned and inherited).
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateInstitutionGroupsListAsync(final ApiCallback<List<Group>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateInstitutionGroupsListValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Group>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateInstitutionRolesList
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateInstitutionRolesListCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/institution/roles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateInstitutionRolesListValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = privateInstitutionRolesListCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Private Account Institution Roles
     * Returns the roles available for groups and the institution group.
     * @return List&lt;Role&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Role> privateInstitutionRolesList() throws ApiException {
        ApiResponse<List<Role>> resp = privateInstitutionRolesListWithHttpInfo();
        return resp.getData();
    }

    /**
     * Private Account Institution Roles
     * Returns the roles available for groups and the institution group.
     * @return ApiResponse&lt;List&lt;Role&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Role>> privateInstitutionRolesListWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = privateInstitutionRolesListValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<Role>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Private Account Institution Roles (asynchronously)
     * Returns the roles available for groups and the institution group.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateInstitutionRolesListAsync(final ApiCallback<List<Role>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateInstitutionRolesListValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Role>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
