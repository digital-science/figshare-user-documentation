/*
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Article;
import io.swagger.client.model.ArticlesCreator;
import io.swagger.client.model.Author;
import io.swagger.client.model.AuthorsCreator;
import io.swagger.client.model.CategoriesCreator;
import io.swagger.client.model.Category;
import io.swagger.client.model.Collection;
import io.swagger.client.model.CollectionComplete;
import io.swagger.client.model.CollectionCompletePrivate;
import io.swagger.client.model.CollectionCreate;
import io.swagger.client.model.CollectionDOI;
import io.swagger.client.model.CollectionHandle;
import io.swagger.client.model.CollectionPrivateLinkCreator;
import io.swagger.client.model.CollectionSearch;
import io.swagger.client.model.CollectionUpdate;
import io.swagger.client.model.CollectionVersions;
import io.swagger.client.model.ErrorMessage;
import io.swagger.client.model.Location;
import io.swagger.client.model.LocationWarnings;
import io.swagger.client.model.LocationWarningsUpdate;
import io.swagger.client.model.PrivateCollectionSearch;
import io.swagger.client.model.PrivateLink;
import io.swagger.client.model.PrivateLinkResponse;
import io.swagger.client.model.Resource;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CollectionsApi {
    private ApiClient apiClient;

    public CollectionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CollectionsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for collectionArticles
     * @param collectionId Collection Unique identifier (required)
     * @param page Page number. Used for pagination with page_size (optional)
     * @param pageSize The number of results included on a page. Used for pagination with page (optional, default to 10)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call collectionArticlesCall(Long collectionId, Long page, Long pageSize, Long limit, Long offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/collections/{collection_id}/articles"
            .replaceAll("\\{" + "collection_id" + "\\}", apiClient.escapeString(collectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page_size", pageSize));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call collectionArticlesValidateBeforeCall(Long collectionId, Long page, Long pageSize, Long limit, Long offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling collectionArticles(Async)");
        }
        
        
        com.squareup.okhttp.Call call = collectionArticlesCall(collectionId, page, pageSize, limit, offset, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Public Collection Articles
     * Returns a list of public collection articles
     * @param collectionId Collection Unique identifier (required)
     * @param page Page number. Used for pagination with page_size (optional)
     * @param pageSize The number of results included on a page. Used for pagination with page (optional, default to 10)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @return List&lt;Article&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Article> collectionArticles(Long collectionId, Long page, Long pageSize, Long limit, Long offset) throws ApiException {
        ApiResponse<List<Article>> resp = collectionArticlesWithHttpInfo(collectionId, page, pageSize, limit, offset);
        return resp.getData();
    }

    /**
     * Public Collection Articles
     * Returns a list of public collection articles
     * @param collectionId Collection Unique identifier (required)
     * @param page Page number. Used for pagination with page_size (optional)
     * @param pageSize The number of results included on a page. Used for pagination with page (optional, default to 10)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @return ApiResponse&lt;List&lt;Article&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Article>> collectionArticlesWithHttpInfo(Long collectionId, Long page, Long pageSize, Long limit, Long offset) throws ApiException {
        com.squareup.okhttp.Call call = collectionArticlesValidateBeforeCall(collectionId, page, pageSize, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<List<Article>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Public Collection Articles (asynchronously)
     * Returns a list of public collection articles
     * @param collectionId Collection Unique identifier (required)
     * @param page Page number. Used for pagination with page_size (optional)
     * @param pageSize The number of results included on a page. Used for pagination with page (optional, default to 10)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call collectionArticlesAsync(Long collectionId, Long page, Long pageSize, Long limit, Long offset, final ApiCallback<List<Article>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = collectionArticlesValidateBeforeCall(collectionId, page, pageSize, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Article>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for collectionDetails
     * @param collectionId Collection Unique identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call collectionDetailsCall(Long collectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/collections/{collection_id}"
            .replaceAll("\\{" + "collection_id" + "\\}", apiClient.escapeString(collectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call collectionDetailsValidateBeforeCall(Long collectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling collectionDetails(Async)");
        }
        
        
        com.squareup.okhttp.Call call = collectionDetailsCall(collectionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Collection details
     * View a collection
     * @param collectionId Collection Unique identifier (required)
     * @return CollectionComplete
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CollectionComplete collectionDetails(Long collectionId) throws ApiException {
        ApiResponse<CollectionComplete> resp = collectionDetailsWithHttpInfo(collectionId);
        return resp.getData();
    }

    /**
     * Collection details
     * View a collection
     * @param collectionId Collection Unique identifier (required)
     * @return ApiResponse&lt;CollectionComplete&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CollectionComplete> collectionDetailsWithHttpInfo(Long collectionId) throws ApiException {
        com.squareup.okhttp.Call call = collectionDetailsValidateBeforeCall(collectionId, null, null);
        Type localVarReturnType = new TypeToken<CollectionComplete>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Collection details (asynchronously)
     * View a collection
     * @param collectionId Collection Unique identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call collectionDetailsAsync(Long collectionId, final ApiCallback<CollectionComplete> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = collectionDetailsValidateBeforeCall(collectionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CollectionComplete>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for collectionVersionDetails
     * @param collectionId Collection Unique identifier (required)
     * @param versionId Version Number (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call collectionVersionDetailsCall(Long collectionId, Long versionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/collections/{collection_id}/versions/{version_id}"
            .replaceAll("\\{" + "collection_id" + "\\}", apiClient.escapeString(collectionId.toString()))
            .replaceAll("\\{" + "version_id" + "\\}", apiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call collectionVersionDetailsValidateBeforeCall(Long collectionId, Long versionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling collectionVersionDetails(Async)");
        }
        
        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling collectionVersionDetails(Async)");
        }
        
        
        com.squareup.okhttp.Call call = collectionVersionDetailsCall(collectionId, versionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Collection Version details
     * View details for a certain version of a collection
     * @param collectionId Collection Unique identifier (required)
     * @param versionId Version Number (required)
     * @return CollectionComplete
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CollectionComplete collectionVersionDetails(Long collectionId, Long versionId) throws ApiException {
        ApiResponse<CollectionComplete> resp = collectionVersionDetailsWithHttpInfo(collectionId, versionId);
        return resp.getData();
    }

    /**
     * Collection Version details
     * View details for a certain version of a collection
     * @param collectionId Collection Unique identifier (required)
     * @param versionId Version Number (required)
     * @return ApiResponse&lt;CollectionComplete&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CollectionComplete> collectionVersionDetailsWithHttpInfo(Long collectionId, Long versionId) throws ApiException {
        com.squareup.okhttp.Call call = collectionVersionDetailsValidateBeforeCall(collectionId, versionId, null, null);
        Type localVarReturnType = new TypeToken<CollectionComplete>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Collection Version details (asynchronously)
     * View details for a certain version of a collection
     * @param collectionId Collection Unique identifier (required)
     * @param versionId Version Number (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call collectionVersionDetailsAsync(Long collectionId, Long versionId, final ApiCallback<CollectionComplete> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = collectionVersionDetailsValidateBeforeCall(collectionId, versionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CollectionComplete>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for collectionVersions
     * @param collectionId Collection Unique identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call collectionVersionsCall(Long collectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/collections/{collection_id}/versions"
            .replaceAll("\\{" + "collection_id" + "\\}", apiClient.escapeString(collectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call collectionVersionsValidateBeforeCall(Long collectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling collectionVersions(Async)");
        }
        
        
        com.squareup.okhttp.Call call = collectionVersionsCall(collectionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Collection Versions list
     * Returns a list of public collection Versions
     * @param collectionId Collection Unique identifier (required)
     * @return List&lt;CollectionVersions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<CollectionVersions> collectionVersions(Long collectionId) throws ApiException {
        ApiResponse<List<CollectionVersions>> resp = collectionVersionsWithHttpInfo(collectionId);
        return resp.getData();
    }

    /**
     * Collection Versions list
     * Returns a list of public collection Versions
     * @param collectionId Collection Unique identifier (required)
     * @return ApiResponse&lt;List&lt;CollectionVersions&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<CollectionVersions>> collectionVersionsWithHttpInfo(Long collectionId) throws ApiException {
        com.squareup.okhttp.Call call = collectionVersionsValidateBeforeCall(collectionId, null, null);
        Type localVarReturnType = new TypeToken<List<CollectionVersions>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Collection Versions list (asynchronously)
     * Returns a list of public collection Versions
     * @param collectionId Collection Unique identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call collectionVersionsAsync(Long collectionId, final ApiCallback<List<CollectionVersions>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = collectionVersionsValidateBeforeCall(collectionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<CollectionVersions>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for collectionsList
     * @param xCursor Unique hash used for bypassing the item retrieval limit of 9,000 entities. When using this parameter, please note that the offset parameter will not be available, but the limit parameter will still work as expected. (optional)
     * @param page Page number. Used for pagination with page_size (optional)
     * @param pageSize The number of results included on a page. Used for pagination with page (optional, default to 10)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @param order The field by which to order. Default varies by endpoint/resource. (optional, default to published_date)
     * @param orderDirection  (optional, default to desc)
     * @param institution only return collections from this institution (optional)
     * @param publishedSince Filter by collection publishing date. Will only return collections published after the date. date(ISO 8601) YYYY-MM-DD (optional)
     * @param modifiedSince Filter by collection modified date. Will only return collections published after the date. date(ISO 8601) YYYY-MM-DD (optional)
     * @param group only return collections from this group (optional)
     * @param resourceDoi only return collections with this resource_doi (optional)
     * @param doi only return collections with this doi (optional)
     * @param handle only return collections with this handle (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call collectionsListCall(UUID xCursor, Long page, Long pageSize, Long limit, Long offset, String order, String orderDirection, Long institution, String publishedSince, String modifiedSince, Long group, String resourceDoi, String doi, String handle, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/collections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page_size", pageSize));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "order", order));
        if (orderDirection != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "order_direction", orderDirection));
        if (institution != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "institution", institution));
        if (publishedSince != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "published_since", publishedSince));
        if (modifiedSince != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "modified_since", modifiedSince));
        if (group != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "group", group));
        if (resourceDoi != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "resource_doi", resourceDoi));
        if (doi != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "doi", doi));
        if (handle != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "handle", handle));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xCursor != null)
        localVarHeaderParams.put("X-Cursor", apiClient.parameterToString(xCursor));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call collectionsListValidateBeforeCall(UUID xCursor, Long page, Long pageSize, Long limit, Long offset, String order, String orderDirection, Long institution, String publishedSince, String modifiedSince, Long group, String resourceDoi, String doi, String handle, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = collectionsListCall(xCursor, page, pageSize, limit, offset, order, orderDirection, institution, publishedSince, modifiedSince, group, resourceDoi, doi, handle, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Public Collections
     * Returns a list of public collections
     * @param xCursor Unique hash used for bypassing the item retrieval limit of 9,000 entities. When using this parameter, please note that the offset parameter will not be available, but the limit parameter will still work as expected. (optional)
     * @param page Page number. Used for pagination with page_size (optional)
     * @param pageSize The number of results included on a page. Used for pagination with page (optional, default to 10)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @param order The field by which to order. Default varies by endpoint/resource. (optional, default to published_date)
     * @param orderDirection  (optional, default to desc)
     * @param institution only return collections from this institution (optional)
     * @param publishedSince Filter by collection publishing date. Will only return collections published after the date. date(ISO 8601) YYYY-MM-DD (optional)
     * @param modifiedSince Filter by collection modified date. Will only return collections published after the date. date(ISO 8601) YYYY-MM-DD (optional)
     * @param group only return collections from this group (optional)
     * @param resourceDoi only return collections with this resource_doi (optional)
     * @param doi only return collections with this doi (optional)
     * @param handle only return collections with this handle (optional)
     * @return List&lt;Collection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Collection> collectionsList(UUID xCursor, Long page, Long pageSize, Long limit, Long offset, String order, String orderDirection, Long institution, String publishedSince, String modifiedSince, Long group, String resourceDoi, String doi, String handle) throws ApiException {
        ApiResponse<List<Collection>> resp = collectionsListWithHttpInfo(xCursor, page, pageSize, limit, offset, order, orderDirection, institution, publishedSince, modifiedSince, group, resourceDoi, doi, handle);
        return resp.getData();
    }

    /**
     * Public Collections
     * Returns a list of public collections
     * @param xCursor Unique hash used for bypassing the item retrieval limit of 9,000 entities. When using this parameter, please note that the offset parameter will not be available, but the limit parameter will still work as expected. (optional)
     * @param page Page number. Used for pagination with page_size (optional)
     * @param pageSize The number of results included on a page. Used for pagination with page (optional, default to 10)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @param order The field by which to order. Default varies by endpoint/resource. (optional, default to published_date)
     * @param orderDirection  (optional, default to desc)
     * @param institution only return collections from this institution (optional)
     * @param publishedSince Filter by collection publishing date. Will only return collections published after the date. date(ISO 8601) YYYY-MM-DD (optional)
     * @param modifiedSince Filter by collection modified date. Will only return collections published after the date. date(ISO 8601) YYYY-MM-DD (optional)
     * @param group only return collections from this group (optional)
     * @param resourceDoi only return collections with this resource_doi (optional)
     * @param doi only return collections with this doi (optional)
     * @param handle only return collections with this handle (optional)
     * @return ApiResponse&lt;List&lt;Collection&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Collection>> collectionsListWithHttpInfo(UUID xCursor, Long page, Long pageSize, Long limit, Long offset, String order, String orderDirection, Long institution, String publishedSince, String modifiedSince, Long group, String resourceDoi, String doi, String handle) throws ApiException {
        com.squareup.okhttp.Call call = collectionsListValidateBeforeCall(xCursor, page, pageSize, limit, offset, order, orderDirection, institution, publishedSince, modifiedSince, group, resourceDoi, doi, handle, null, null);
        Type localVarReturnType = new TypeToken<List<Collection>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Public Collections (asynchronously)
     * Returns a list of public collections
     * @param xCursor Unique hash used for bypassing the item retrieval limit of 9,000 entities. When using this parameter, please note that the offset parameter will not be available, but the limit parameter will still work as expected. (optional)
     * @param page Page number. Used for pagination with page_size (optional)
     * @param pageSize The number of results included on a page. Used for pagination with page (optional, default to 10)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @param order The field by which to order. Default varies by endpoint/resource. (optional, default to published_date)
     * @param orderDirection  (optional, default to desc)
     * @param institution only return collections from this institution (optional)
     * @param publishedSince Filter by collection publishing date. Will only return collections published after the date. date(ISO 8601) YYYY-MM-DD (optional)
     * @param modifiedSince Filter by collection modified date. Will only return collections published after the date. date(ISO 8601) YYYY-MM-DD (optional)
     * @param group only return collections from this group (optional)
     * @param resourceDoi only return collections with this resource_doi (optional)
     * @param doi only return collections with this doi (optional)
     * @param handle only return collections with this handle (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call collectionsListAsync(UUID xCursor, Long page, Long pageSize, Long limit, Long offset, String order, String orderDirection, Long institution, String publishedSince, String modifiedSince, Long group, String resourceDoi, String doi, String handle, final ApiCallback<List<Collection>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = collectionsListValidateBeforeCall(xCursor, page, pageSize, limit, offset, order, orderDirection, institution, publishedSince, modifiedSince, group, resourceDoi, doi, handle, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Collection>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for collectionsSearch
     * @param xCursor Unique hash used for bypassing the item retrieval limit of 9,000 entities. When using this parameter, please note that the offset parameter will not be available, but the limit parameter will still work as expected. (optional)
     * @param search Search Parameters (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call collectionsSearchCall(UUID xCursor, CollectionSearch search, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = search;
        
        // create path and map variables
        String localVarPath = "/collections/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xCursor != null)
        localVarHeaderParams.put("X-Cursor", apiClient.parameterToString(xCursor));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call collectionsSearchValidateBeforeCall(UUID xCursor, CollectionSearch search, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = collectionsSearchCall(xCursor, search, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Public Collections Search
     * Returns a list of public collections
     * @param xCursor Unique hash used for bypassing the item retrieval limit of 9,000 entities. When using this parameter, please note that the offset parameter will not be available, but the limit parameter will still work as expected. (optional)
     * @param search Search Parameters (optional)
     * @return List&lt;Collection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Collection> collectionsSearch(UUID xCursor, CollectionSearch search) throws ApiException {
        ApiResponse<List<Collection>> resp = collectionsSearchWithHttpInfo(xCursor, search);
        return resp.getData();
    }

    /**
     * Public Collections Search
     * Returns a list of public collections
     * @param xCursor Unique hash used for bypassing the item retrieval limit of 9,000 entities. When using this parameter, please note that the offset parameter will not be available, but the limit parameter will still work as expected. (optional)
     * @param search Search Parameters (optional)
     * @return ApiResponse&lt;List&lt;Collection&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Collection>> collectionsSearchWithHttpInfo(UUID xCursor, CollectionSearch search) throws ApiException {
        com.squareup.okhttp.Call call = collectionsSearchValidateBeforeCall(xCursor, search, null, null);
        Type localVarReturnType = new TypeToken<List<Collection>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Public Collections Search (asynchronously)
     * Returns a list of public collections
     * @param xCursor Unique hash used for bypassing the item retrieval limit of 9,000 entities. When using this parameter, please note that the offset parameter will not be available, but the limit parameter will still work as expected. (optional)
     * @param search Search Parameters (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call collectionsSearchAsync(UUID xCursor, CollectionSearch search, final ApiCallback<List<Collection>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = collectionsSearchValidateBeforeCall(xCursor, search, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Collection>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateCollectionArticleDelete
     * @param collectionId Collection unique identifier (required)
     * @param articleId Collection article unique identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateCollectionArticleDeleteCall(Long collectionId, Long articleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/collections/{collection_id}/articles/{article_id}"
            .replaceAll("\\{" + "collection_id" + "\\}", apiClient.escapeString(collectionId.toString()))
            .replaceAll("\\{" + "article_id" + "\\}", apiClient.escapeString(articleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateCollectionArticleDeleteValidateBeforeCall(Long collectionId, Long articleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling privateCollectionArticleDelete(Async)");
        }
        
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling privateCollectionArticleDelete(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateCollectionArticleDeleteCall(collectionId, articleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete collection article
     * De-associate article from collection
     * @param collectionId Collection unique identifier (required)
     * @param articleId Collection article unique identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void privateCollectionArticleDelete(Long collectionId, Long articleId) throws ApiException {
        privateCollectionArticleDeleteWithHttpInfo(collectionId, articleId);
    }

    /**
     * Delete collection article
     * De-associate article from collection
     * @param collectionId Collection unique identifier (required)
     * @param articleId Collection article unique identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> privateCollectionArticleDeleteWithHttpInfo(Long collectionId, Long articleId) throws ApiException {
        com.squareup.okhttp.Call call = privateCollectionArticleDeleteValidateBeforeCall(collectionId, articleId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete collection article (asynchronously)
     * De-associate article from collection
     * @param collectionId Collection unique identifier (required)
     * @param articleId Collection article unique identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateCollectionArticleDeleteAsync(Long collectionId, Long articleId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateCollectionArticleDeleteValidateBeforeCall(collectionId, articleId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for privateCollectionArticlesAdd
     * @param collectionId Collection unique identifier (required)
     * @param articles Articles list (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateCollectionArticlesAddCall(Long collectionId, ArticlesCreator articles, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = articles;
        
        // create path and map variables
        String localVarPath = "/account/collections/{collection_id}/articles"
            .replaceAll("\\{" + "collection_id" + "\\}", apiClient.escapeString(collectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateCollectionArticlesAddValidateBeforeCall(Long collectionId, ArticlesCreator articles, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling privateCollectionArticlesAdd(Async)");
        }
        
        // verify the required parameter 'articles' is set
        if (articles == null) {
            throw new ApiException("Missing the required parameter 'articles' when calling privateCollectionArticlesAdd(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateCollectionArticlesAddCall(collectionId, articles, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add collection articles
     * Associate new articles with the collection. This will add new articles to the list of already associated articles
     * @param collectionId Collection unique identifier (required)
     * @param articles Articles list (required)
     * @return Location
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Location privateCollectionArticlesAdd(Long collectionId, ArticlesCreator articles) throws ApiException {
        ApiResponse<Location> resp = privateCollectionArticlesAddWithHttpInfo(collectionId, articles);
        return resp.getData();
    }

    /**
     * Add collection articles
     * Associate new articles with the collection. This will add new articles to the list of already associated articles
     * @param collectionId Collection unique identifier (required)
     * @param articles Articles list (required)
     * @return ApiResponse&lt;Location&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Location> privateCollectionArticlesAddWithHttpInfo(Long collectionId, ArticlesCreator articles) throws ApiException {
        com.squareup.okhttp.Call call = privateCollectionArticlesAddValidateBeforeCall(collectionId, articles, null, null);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add collection articles (asynchronously)
     * Associate new articles with the collection. This will add new articles to the list of already associated articles
     * @param collectionId Collection unique identifier (required)
     * @param articles Articles list (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateCollectionArticlesAddAsync(Long collectionId, ArticlesCreator articles, final ApiCallback<Location> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateCollectionArticlesAddValidateBeforeCall(collectionId, articles, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateCollectionArticlesList
     * @param collectionId Collection unique identifier (required)
     * @param page Page number. Used for pagination with page_size (optional)
     * @param pageSize The number of results included on a page. Used for pagination with page (optional, default to 10)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateCollectionArticlesListCall(Long collectionId, Long page, Long pageSize, Long limit, Long offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/collections/{collection_id}/articles"
            .replaceAll("\\{" + "collection_id" + "\\}", apiClient.escapeString(collectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page_size", pageSize));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateCollectionArticlesListValidateBeforeCall(Long collectionId, Long page, Long pageSize, Long limit, Long offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling privateCollectionArticlesList(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateCollectionArticlesListCall(collectionId, page, pageSize, limit, offset, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List collection articles
     * List collection articles
     * @param collectionId Collection unique identifier (required)
     * @param page Page number. Used for pagination with page_size (optional)
     * @param pageSize The number of results included on a page. Used for pagination with page (optional, default to 10)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @return List&lt;Article&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Article> privateCollectionArticlesList(Long collectionId, Long page, Long pageSize, Long limit, Long offset) throws ApiException {
        ApiResponse<List<Article>> resp = privateCollectionArticlesListWithHttpInfo(collectionId, page, pageSize, limit, offset);
        return resp.getData();
    }

    /**
     * List collection articles
     * List collection articles
     * @param collectionId Collection unique identifier (required)
     * @param page Page number. Used for pagination with page_size (optional)
     * @param pageSize The number of results included on a page. Used for pagination with page (optional, default to 10)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @return ApiResponse&lt;List&lt;Article&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Article>> privateCollectionArticlesListWithHttpInfo(Long collectionId, Long page, Long pageSize, Long limit, Long offset) throws ApiException {
        com.squareup.okhttp.Call call = privateCollectionArticlesListValidateBeforeCall(collectionId, page, pageSize, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<List<Article>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List collection articles (asynchronously)
     * List collection articles
     * @param collectionId Collection unique identifier (required)
     * @param page Page number. Used for pagination with page_size (optional)
     * @param pageSize The number of results included on a page. Used for pagination with page (optional, default to 10)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateCollectionArticlesListAsync(Long collectionId, Long page, Long pageSize, Long limit, Long offset, final ApiCallback<List<Article>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateCollectionArticlesListValidateBeforeCall(collectionId, page, pageSize, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Article>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateCollectionArticlesReplace
     * @param collectionId Collection unique identifier (required)
     * @param articles Articles List (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateCollectionArticlesReplaceCall(Long collectionId, ArticlesCreator articles, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = articles;
        
        // create path and map variables
        String localVarPath = "/account/collections/{collection_id}/articles"
            .replaceAll("\\{" + "collection_id" + "\\}", apiClient.escapeString(collectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateCollectionArticlesReplaceValidateBeforeCall(Long collectionId, ArticlesCreator articles, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling privateCollectionArticlesReplace(Async)");
        }
        
        // verify the required parameter 'articles' is set
        if (articles == null) {
            throw new ApiException("Missing the required parameter 'articles' when calling privateCollectionArticlesReplace(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateCollectionArticlesReplaceCall(collectionId, articles, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Replace collection articles
     * Associate new articles with the collection. This will remove all already associated articles and add these new ones
     * @param collectionId Collection unique identifier (required)
     * @param articles Articles List (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void privateCollectionArticlesReplace(Long collectionId, ArticlesCreator articles) throws ApiException {
        privateCollectionArticlesReplaceWithHttpInfo(collectionId, articles);
    }

    /**
     * Replace collection articles
     * Associate new articles with the collection. This will remove all already associated articles and add these new ones
     * @param collectionId Collection unique identifier (required)
     * @param articles Articles List (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> privateCollectionArticlesReplaceWithHttpInfo(Long collectionId, ArticlesCreator articles) throws ApiException {
        com.squareup.okhttp.Call call = privateCollectionArticlesReplaceValidateBeforeCall(collectionId, articles, null, null);
        return apiClient.execute(call);
    }

    /**
     * Replace collection articles (asynchronously)
     * Associate new articles with the collection. This will remove all already associated articles and add these new ones
     * @param collectionId Collection unique identifier (required)
     * @param articles Articles List (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateCollectionArticlesReplaceAsync(Long collectionId, ArticlesCreator articles, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateCollectionArticlesReplaceValidateBeforeCall(collectionId, articles, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for privateCollectionAuthorDelete
     * @param collectionId Collection unique identifier (required)
     * @param authorId Collection Author unique identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateCollectionAuthorDeleteCall(Long collectionId, Long authorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/collections/{collection_id}/authors/{author_id}"
            .replaceAll("\\{" + "collection_id" + "\\}", apiClient.escapeString(collectionId.toString()))
            .replaceAll("\\{" + "author_id" + "\\}", apiClient.escapeString(authorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateCollectionAuthorDeleteValidateBeforeCall(Long collectionId, Long authorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling privateCollectionAuthorDelete(Async)");
        }
        
        // verify the required parameter 'authorId' is set
        if (authorId == null) {
            throw new ApiException("Missing the required parameter 'authorId' when calling privateCollectionAuthorDelete(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateCollectionAuthorDeleteCall(collectionId, authorId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete collection author
     * Delete collection author
     * @param collectionId Collection unique identifier (required)
     * @param authorId Collection Author unique identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void privateCollectionAuthorDelete(Long collectionId, Long authorId) throws ApiException {
        privateCollectionAuthorDeleteWithHttpInfo(collectionId, authorId);
    }

    /**
     * Delete collection author
     * Delete collection author
     * @param collectionId Collection unique identifier (required)
     * @param authorId Collection Author unique identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> privateCollectionAuthorDeleteWithHttpInfo(Long collectionId, Long authorId) throws ApiException {
        com.squareup.okhttp.Call call = privateCollectionAuthorDeleteValidateBeforeCall(collectionId, authorId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete collection author (asynchronously)
     * Delete collection author
     * @param collectionId Collection unique identifier (required)
     * @param authorId Collection Author unique identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateCollectionAuthorDeleteAsync(Long collectionId, Long authorId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateCollectionAuthorDeleteValidateBeforeCall(collectionId, authorId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for privateCollectionAuthorsAdd
     * @param collectionId Collection unique identifier (required)
     * @param authors List of authors (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateCollectionAuthorsAddCall(Long collectionId, AuthorsCreator authors, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = authors;
        
        // create path and map variables
        String localVarPath = "/account/collections/{collection_id}/authors"
            .replaceAll("\\{" + "collection_id" + "\\}", apiClient.escapeString(collectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateCollectionAuthorsAddValidateBeforeCall(Long collectionId, AuthorsCreator authors, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling privateCollectionAuthorsAdd(Async)");
        }
        
        // verify the required parameter 'authors' is set
        if (authors == null) {
            throw new ApiException("Missing the required parameter 'authors' when calling privateCollectionAuthorsAdd(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateCollectionAuthorsAddCall(collectionId, authors, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add collection authors
     * Associate new authors with the collection. This will add new authors to the list of already associated authors
     * @param collectionId Collection unique identifier (required)
     * @param authors List of authors (required)
     * @return Location
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Location privateCollectionAuthorsAdd(Long collectionId, AuthorsCreator authors) throws ApiException {
        ApiResponse<Location> resp = privateCollectionAuthorsAddWithHttpInfo(collectionId, authors);
        return resp.getData();
    }

    /**
     * Add collection authors
     * Associate new authors with the collection. This will add new authors to the list of already associated authors
     * @param collectionId Collection unique identifier (required)
     * @param authors List of authors (required)
     * @return ApiResponse&lt;Location&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Location> privateCollectionAuthorsAddWithHttpInfo(Long collectionId, AuthorsCreator authors) throws ApiException {
        com.squareup.okhttp.Call call = privateCollectionAuthorsAddValidateBeforeCall(collectionId, authors, null, null);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add collection authors (asynchronously)
     * Associate new authors with the collection. This will add new authors to the list of already associated authors
     * @param collectionId Collection unique identifier (required)
     * @param authors List of authors (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateCollectionAuthorsAddAsync(Long collectionId, AuthorsCreator authors, final ApiCallback<Location> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateCollectionAuthorsAddValidateBeforeCall(collectionId, authors, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateCollectionAuthorsList
     * @param collectionId Collection unique identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateCollectionAuthorsListCall(Long collectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/collections/{collection_id}/authors"
            .replaceAll("\\{" + "collection_id" + "\\}", apiClient.escapeString(collectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateCollectionAuthorsListValidateBeforeCall(Long collectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling privateCollectionAuthorsList(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateCollectionAuthorsListCall(collectionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List collection authors
     * List collection authors
     * @param collectionId Collection unique identifier (required)
     * @return List&lt;Author&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Author> privateCollectionAuthorsList(Long collectionId) throws ApiException {
        ApiResponse<List<Author>> resp = privateCollectionAuthorsListWithHttpInfo(collectionId);
        return resp.getData();
    }

    /**
     * List collection authors
     * List collection authors
     * @param collectionId Collection unique identifier (required)
     * @return ApiResponse&lt;List&lt;Author&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Author>> privateCollectionAuthorsListWithHttpInfo(Long collectionId) throws ApiException {
        com.squareup.okhttp.Call call = privateCollectionAuthorsListValidateBeforeCall(collectionId, null, null);
        Type localVarReturnType = new TypeToken<List<Author>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List collection authors (asynchronously)
     * List collection authors
     * @param collectionId Collection unique identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateCollectionAuthorsListAsync(Long collectionId, final ApiCallback<List<Author>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateCollectionAuthorsListValidateBeforeCall(collectionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Author>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateCollectionAuthorsReplace
     * @param collectionId Collection unique identifier (required)
     * @param authors List of authors (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateCollectionAuthorsReplaceCall(Long collectionId, AuthorsCreator authors, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = authors;
        
        // create path and map variables
        String localVarPath = "/account/collections/{collection_id}/authors"
            .replaceAll("\\{" + "collection_id" + "\\}", apiClient.escapeString(collectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateCollectionAuthorsReplaceValidateBeforeCall(Long collectionId, AuthorsCreator authors, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling privateCollectionAuthorsReplace(Async)");
        }
        
        // verify the required parameter 'authors' is set
        if (authors == null) {
            throw new ApiException("Missing the required parameter 'authors' when calling privateCollectionAuthorsReplace(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateCollectionAuthorsReplaceCall(collectionId, authors, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Replace collection authors
     * Associate new authors with the collection. This will remove all already associated authors and add these new ones
     * @param collectionId Collection unique identifier (required)
     * @param authors List of authors (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void privateCollectionAuthorsReplace(Long collectionId, AuthorsCreator authors) throws ApiException {
        privateCollectionAuthorsReplaceWithHttpInfo(collectionId, authors);
    }

    /**
     * Replace collection authors
     * Associate new authors with the collection. This will remove all already associated authors and add these new ones
     * @param collectionId Collection unique identifier (required)
     * @param authors List of authors (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> privateCollectionAuthorsReplaceWithHttpInfo(Long collectionId, AuthorsCreator authors) throws ApiException {
        com.squareup.okhttp.Call call = privateCollectionAuthorsReplaceValidateBeforeCall(collectionId, authors, null, null);
        return apiClient.execute(call);
    }

    /**
     * Replace collection authors (asynchronously)
     * Associate new authors with the collection. This will remove all already associated authors and add these new ones
     * @param collectionId Collection unique identifier (required)
     * @param authors List of authors (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateCollectionAuthorsReplaceAsync(Long collectionId, AuthorsCreator authors, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateCollectionAuthorsReplaceValidateBeforeCall(collectionId, authors, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for privateCollectionCategoriesAdd
     * @param collectionId Collection unique identifier (required)
     * @param categories Categories list (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateCollectionCategoriesAddCall(Long collectionId, CategoriesCreator categories, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = categories;
        
        // create path and map variables
        String localVarPath = "/account/collections/{collection_id}/categories"
            .replaceAll("\\{" + "collection_id" + "\\}", apiClient.escapeString(collectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateCollectionCategoriesAddValidateBeforeCall(Long collectionId, CategoriesCreator categories, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling privateCollectionCategoriesAdd(Async)");
        }
        
        // verify the required parameter 'categories' is set
        if (categories == null) {
            throw new ApiException("Missing the required parameter 'categories' when calling privateCollectionCategoriesAdd(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateCollectionCategoriesAddCall(collectionId, categories, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add collection categories
     * Associate new categories with the collection. This will add new categories to the list of already associated categories
     * @param collectionId Collection unique identifier (required)
     * @param categories Categories list (required)
     * @return Location
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Location privateCollectionCategoriesAdd(Long collectionId, CategoriesCreator categories) throws ApiException {
        ApiResponse<Location> resp = privateCollectionCategoriesAddWithHttpInfo(collectionId, categories);
        return resp.getData();
    }

    /**
     * Add collection categories
     * Associate new categories with the collection. This will add new categories to the list of already associated categories
     * @param collectionId Collection unique identifier (required)
     * @param categories Categories list (required)
     * @return ApiResponse&lt;Location&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Location> privateCollectionCategoriesAddWithHttpInfo(Long collectionId, CategoriesCreator categories) throws ApiException {
        com.squareup.okhttp.Call call = privateCollectionCategoriesAddValidateBeforeCall(collectionId, categories, null, null);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add collection categories (asynchronously)
     * Associate new categories with the collection. This will add new categories to the list of already associated categories
     * @param collectionId Collection unique identifier (required)
     * @param categories Categories list (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateCollectionCategoriesAddAsync(Long collectionId, CategoriesCreator categories, final ApiCallback<Location> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateCollectionCategoriesAddValidateBeforeCall(collectionId, categories, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateCollectionCategoriesList
     * @param collectionId Collection unique identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateCollectionCategoriesListCall(Long collectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/collections/{collection_id}/categories"
            .replaceAll("\\{" + "collection_id" + "\\}", apiClient.escapeString(collectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateCollectionCategoriesListValidateBeforeCall(Long collectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling privateCollectionCategoriesList(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateCollectionCategoriesListCall(collectionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List collection categories
     * List collection categories
     * @param collectionId Collection unique identifier (required)
     * @return List&lt;Category&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Category> privateCollectionCategoriesList(Long collectionId) throws ApiException {
        ApiResponse<List<Category>> resp = privateCollectionCategoriesListWithHttpInfo(collectionId);
        return resp.getData();
    }

    /**
     * List collection categories
     * List collection categories
     * @param collectionId Collection unique identifier (required)
     * @return ApiResponse&lt;List&lt;Category&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Category>> privateCollectionCategoriesListWithHttpInfo(Long collectionId) throws ApiException {
        com.squareup.okhttp.Call call = privateCollectionCategoriesListValidateBeforeCall(collectionId, null, null);
        Type localVarReturnType = new TypeToken<List<Category>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List collection categories (asynchronously)
     * List collection categories
     * @param collectionId Collection unique identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateCollectionCategoriesListAsync(Long collectionId, final ApiCallback<List<Category>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateCollectionCategoriesListValidateBeforeCall(collectionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Category>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateCollectionCategoriesReplace
     * @param collectionId Collection unique identifier (required)
     * @param categories Categories list (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateCollectionCategoriesReplaceCall(Long collectionId, CategoriesCreator categories, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = categories;
        
        // create path and map variables
        String localVarPath = "/account/collections/{collection_id}/categories"
            .replaceAll("\\{" + "collection_id" + "\\}", apiClient.escapeString(collectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateCollectionCategoriesReplaceValidateBeforeCall(Long collectionId, CategoriesCreator categories, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling privateCollectionCategoriesReplace(Async)");
        }
        
        // verify the required parameter 'categories' is set
        if (categories == null) {
            throw new ApiException("Missing the required parameter 'categories' when calling privateCollectionCategoriesReplace(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateCollectionCategoriesReplaceCall(collectionId, categories, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Replace collection categories
     * Associate new categories with the collection. This will remove all already associated categories and add these new ones
     * @param collectionId Collection unique identifier (required)
     * @param categories Categories list (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void privateCollectionCategoriesReplace(Long collectionId, CategoriesCreator categories) throws ApiException {
        privateCollectionCategoriesReplaceWithHttpInfo(collectionId, categories);
    }

    /**
     * Replace collection categories
     * Associate new categories with the collection. This will remove all already associated categories and add these new ones
     * @param collectionId Collection unique identifier (required)
     * @param categories Categories list (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> privateCollectionCategoriesReplaceWithHttpInfo(Long collectionId, CategoriesCreator categories) throws ApiException {
        com.squareup.okhttp.Call call = privateCollectionCategoriesReplaceValidateBeforeCall(collectionId, categories, null, null);
        return apiClient.execute(call);
    }

    /**
     * Replace collection categories (asynchronously)
     * Associate new categories with the collection. This will remove all already associated categories and add these new ones
     * @param collectionId Collection unique identifier (required)
     * @param categories Categories list (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateCollectionCategoriesReplaceAsync(Long collectionId, CategoriesCreator categories, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateCollectionCategoriesReplaceValidateBeforeCall(collectionId, categories, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for privateCollectionCategoryDelete
     * @param collectionId Collection unique identifier (required)
     * @param categoryId Collection category unique identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateCollectionCategoryDeleteCall(Long collectionId, Long categoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/collections/{collection_id}/categories/{category_id}"
            .replaceAll("\\{" + "collection_id" + "\\}", apiClient.escapeString(collectionId.toString()))
            .replaceAll("\\{" + "category_id" + "\\}", apiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateCollectionCategoryDeleteValidateBeforeCall(Long collectionId, Long categoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling privateCollectionCategoryDelete(Async)");
        }
        
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling privateCollectionCategoryDelete(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateCollectionCategoryDeleteCall(collectionId, categoryId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete collection category
     * De-associate category from collection
     * @param collectionId Collection unique identifier (required)
     * @param categoryId Collection category unique identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void privateCollectionCategoryDelete(Long collectionId, Long categoryId) throws ApiException {
        privateCollectionCategoryDeleteWithHttpInfo(collectionId, categoryId);
    }

    /**
     * Delete collection category
     * De-associate category from collection
     * @param collectionId Collection unique identifier (required)
     * @param categoryId Collection category unique identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> privateCollectionCategoryDeleteWithHttpInfo(Long collectionId, Long categoryId) throws ApiException {
        com.squareup.okhttp.Call call = privateCollectionCategoryDeleteValidateBeforeCall(collectionId, categoryId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete collection category (asynchronously)
     * De-associate category from collection
     * @param collectionId Collection unique identifier (required)
     * @param categoryId Collection category unique identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateCollectionCategoryDeleteAsync(Long collectionId, Long categoryId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateCollectionCategoryDeleteValidateBeforeCall(collectionId, categoryId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for privateCollectionCreate
     * @param collection Collection description (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateCollectionCreateCall(CollectionCreate collection, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = collection;
        
        // create path and map variables
        String localVarPath = "/account/collections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateCollectionCreateValidateBeforeCall(CollectionCreate collection, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'collection' is set
        if (collection == null) {
            throw new ApiException("Missing the required parameter 'collection' when calling privateCollectionCreate(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateCollectionCreateCall(collection, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create collection
     * Create a new Collection by sending collection information
     * @param collection Collection description (required)
     * @return LocationWarnings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LocationWarnings privateCollectionCreate(CollectionCreate collection) throws ApiException {
        ApiResponse<LocationWarnings> resp = privateCollectionCreateWithHttpInfo(collection);
        return resp.getData();
    }

    /**
     * Create collection
     * Create a new Collection by sending collection information
     * @param collection Collection description (required)
     * @return ApiResponse&lt;LocationWarnings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LocationWarnings> privateCollectionCreateWithHttpInfo(CollectionCreate collection) throws ApiException {
        com.squareup.okhttp.Call call = privateCollectionCreateValidateBeforeCall(collection, null, null);
        Type localVarReturnType = new TypeToken<LocationWarnings>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create collection (asynchronously)
     * Create a new Collection by sending collection information
     * @param collection Collection description (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateCollectionCreateAsync(CollectionCreate collection, final ApiCallback<LocationWarnings> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateCollectionCreateValidateBeforeCall(collection, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LocationWarnings>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateCollectionDelete
     * @param collectionId Collection Unique identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateCollectionDeleteCall(Long collectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/collections/{collection_id}"
            .replaceAll("\\{" + "collection_id" + "\\}", apiClient.escapeString(collectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateCollectionDeleteValidateBeforeCall(Long collectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling privateCollectionDelete(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateCollectionDeleteCall(collectionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete collection
     * Delete n collection
     * @param collectionId Collection Unique identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void privateCollectionDelete(Long collectionId) throws ApiException {
        privateCollectionDeleteWithHttpInfo(collectionId);
    }

    /**
     * Delete collection
     * Delete n collection
     * @param collectionId Collection Unique identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> privateCollectionDeleteWithHttpInfo(Long collectionId) throws ApiException {
        com.squareup.okhttp.Call call = privateCollectionDeleteValidateBeforeCall(collectionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete collection (asynchronously)
     * Delete n collection
     * @param collectionId Collection Unique identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateCollectionDeleteAsync(Long collectionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateCollectionDeleteValidateBeforeCall(collectionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for privateCollectionDetails
     * @param collectionId Collection Unique identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateCollectionDetailsCall(Long collectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/collections/{collection_id}"
            .replaceAll("\\{" + "collection_id" + "\\}", apiClient.escapeString(collectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateCollectionDetailsValidateBeforeCall(Long collectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling privateCollectionDetails(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateCollectionDetailsCall(collectionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Collection details
     * View a collection
     * @param collectionId Collection Unique identifier (required)
     * @return CollectionCompletePrivate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CollectionCompletePrivate privateCollectionDetails(Long collectionId) throws ApiException {
        ApiResponse<CollectionCompletePrivate> resp = privateCollectionDetailsWithHttpInfo(collectionId);
        return resp.getData();
    }

    /**
     * Collection details
     * View a collection
     * @param collectionId Collection Unique identifier (required)
     * @return ApiResponse&lt;CollectionCompletePrivate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CollectionCompletePrivate> privateCollectionDetailsWithHttpInfo(Long collectionId) throws ApiException {
        com.squareup.okhttp.Call call = privateCollectionDetailsValidateBeforeCall(collectionId, null, null);
        Type localVarReturnType = new TypeToken<CollectionCompletePrivate>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Collection details (asynchronously)
     * View a collection
     * @param collectionId Collection Unique identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateCollectionDetailsAsync(Long collectionId, final ApiCallback<CollectionCompletePrivate> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateCollectionDetailsValidateBeforeCall(collectionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CollectionCompletePrivate>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateCollectionPrivateLinkCreate
     * @param collectionId Collection unique identifier (required)
     * @param privateLink  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateCollectionPrivateLinkCreateCall(Long collectionId, CollectionPrivateLinkCreator privateLink, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = privateLink;
        
        // create path and map variables
        String localVarPath = "/account/collections/{collection_id}/private_links"
            .replaceAll("\\{" + "collection_id" + "\\}", apiClient.escapeString(collectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateCollectionPrivateLinkCreateValidateBeforeCall(Long collectionId, CollectionPrivateLinkCreator privateLink, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling privateCollectionPrivateLinkCreate(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateCollectionPrivateLinkCreateCall(collectionId, privateLink, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create collection private link
     * Create new private link
     * @param collectionId Collection unique identifier (required)
     * @param privateLink  (optional)
     * @return PrivateLinkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PrivateLinkResponse privateCollectionPrivateLinkCreate(Long collectionId, CollectionPrivateLinkCreator privateLink) throws ApiException {
        ApiResponse<PrivateLinkResponse> resp = privateCollectionPrivateLinkCreateWithHttpInfo(collectionId, privateLink);
        return resp.getData();
    }

    /**
     * Create collection private link
     * Create new private link
     * @param collectionId Collection unique identifier (required)
     * @param privateLink  (optional)
     * @return ApiResponse&lt;PrivateLinkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PrivateLinkResponse> privateCollectionPrivateLinkCreateWithHttpInfo(Long collectionId, CollectionPrivateLinkCreator privateLink) throws ApiException {
        com.squareup.okhttp.Call call = privateCollectionPrivateLinkCreateValidateBeforeCall(collectionId, privateLink, null, null);
        Type localVarReturnType = new TypeToken<PrivateLinkResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create collection private link (asynchronously)
     * Create new private link
     * @param collectionId Collection unique identifier (required)
     * @param privateLink  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateCollectionPrivateLinkCreateAsync(Long collectionId, CollectionPrivateLinkCreator privateLink, final ApiCallback<PrivateLinkResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateCollectionPrivateLinkCreateValidateBeforeCall(collectionId, privateLink, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PrivateLinkResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateCollectionPrivateLinkDelete
     * @param collectionId Collection unique identifier (required)
     * @param linkId Private link token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateCollectionPrivateLinkDeleteCall(Long collectionId, String linkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/collections/{collection_id}/private_links/{link_id}"
            .replaceAll("\\{" + "collection_id" + "\\}", apiClient.escapeString(collectionId.toString()))
            .replaceAll("\\{" + "link_id" + "\\}", apiClient.escapeString(linkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateCollectionPrivateLinkDeleteValidateBeforeCall(Long collectionId, String linkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling privateCollectionPrivateLinkDelete(Async)");
        }
        
        // verify the required parameter 'linkId' is set
        if (linkId == null) {
            throw new ApiException("Missing the required parameter 'linkId' when calling privateCollectionPrivateLinkDelete(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateCollectionPrivateLinkDeleteCall(collectionId, linkId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Disable private link
     * Disable/delete private link for this collection
     * @param collectionId Collection unique identifier (required)
     * @param linkId Private link token (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void privateCollectionPrivateLinkDelete(Long collectionId, String linkId) throws ApiException {
        privateCollectionPrivateLinkDeleteWithHttpInfo(collectionId, linkId);
    }

    /**
     * Disable private link
     * Disable/delete private link for this collection
     * @param collectionId Collection unique identifier (required)
     * @param linkId Private link token (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> privateCollectionPrivateLinkDeleteWithHttpInfo(Long collectionId, String linkId) throws ApiException {
        com.squareup.okhttp.Call call = privateCollectionPrivateLinkDeleteValidateBeforeCall(collectionId, linkId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Disable private link (asynchronously)
     * Disable/delete private link for this collection
     * @param collectionId Collection unique identifier (required)
     * @param linkId Private link token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateCollectionPrivateLinkDeleteAsync(Long collectionId, String linkId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateCollectionPrivateLinkDeleteValidateBeforeCall(collectionId, linkId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for privateCollectionPrivateLinkUpdate
     * @param collectionId Collection unique identifier (required)
     * @param linkId Private link token (required)
     * @param privateLink  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateCollectionPrivateLinkUpdateCall(Long collectionId, String linkId, CollectionPrivateLinkCreator privateLink, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = privateLink;
        
        // create path and map variables
        String localVarPath = "/account/collections/{collection_id}/private_links/{link_id}"
            .replaceAll("\\{" + "collection_id" + "\\}", apiClient.escapeString(collectionId.toString()))
            .replaceAll("\\{" + "link_id" + "\\}", apiClient.escapeString(linkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateCollectionPrivateLinkUpdateValidateBeforeCall(Long collectionId, String linkId, CollectionPrivateLinkCreator privateLink, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling privateCollectionPrivateLinkUpdate(Async)");
        }
        
        // verify the required parameter 'linkId' is set
        if (linkId == null) {
            throw new ApiException("Missing the required parameter 'linkId' when calling privateCollectionPrivateLinkUpdate(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateCollectionPrivateLinkUpdateCall(collectionId, linkId, privateLink, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update collection private link
     * Update existing private link for this collection
     * @param collectionId Collection unique identifier (required)
     * @param linkId Private link token (required)
     * @param privateLink  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void privateCollectionPrivateLinkUpdate(Long collectionId, String linkId, CollectionPrivateLinkCreator privateLink) throws ApiException {
        privateCollectionPrivateLinkUpdateWithHttpInfo(collectionId, linkId, privateLink);
    }

    /**
     * Update collection private link
     * Update existing private link for this collection
     * @param collectionId Collection unique identifier (required)
     * @param linkId Private link token (required)
     * @param privateLink  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> privateCollectionPrivateLinkUpdateWithHttpInfo(Long collectionId, String linkId, CollectionPrivateLinkCreator privateLink) throws ApiException {
        com.squareup.okhttp.Call call = privateCollectionPrivateLinkUpdateValidateBeforeCall(collectionId, linkId, privateLink, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update collection private link (asynchronously)
     * Update existing private link for this collection
     * @param collectionId Collection unique identifier (required)
     * @param linkId Private link token (required)
     * @param privateLink  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateCollectionPrivateLinkUpdateAsync(Long collectionId, String linkId, CollectionPrivateLinkCreator privateLink, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateCollectionPrivateLinkUpdateValidateBeforeCall(collectionId, linkId, privateLink, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for privateCollectionPrivateLinksList
     * @param collectionId Collection unique identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateCollectionPrivateLinksListCall(Long collectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/collections/{collection_id}/private_links"
            .replaceAll("\\{" + "collection_id" + "\\}", apiClient.escapeString(collectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateCollectionPrivateLinksListValidateBeforeCall(Long collectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling privateCollectionPrivateLinksList(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateCollectionPrivateLinksListCall(collectionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List collection private links
     * List article private links
     * @param collectionId Collection unique identifier (required)
     * @return List&lt;PrivateLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<PrivateLink> privateCollectionPrivateLinksList(Long collectionId) throws ApiException {
        ApiResponse<List<PrivateLink>> resp = privateCollectionPrivateLinksListWithHttpInfo(collectionId);
        return resp.getData();
    }

    /**
     * List collection private links
     * List article private links
     * @param collectionId Collection unique identifier (required)
     * @return ApiResponse&lt;List&lt;PrivateLink&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<PrivateLink>> privateCollectionPrivateLinksListWithHttpInfo(Long collectionId) throws ApiException {
        com.squareup.okhttp.Call call = privateCollectionPrivateLinksListValidateBeforeCall(collectionId, null, null);
        Type localVarReturnType = new TypeToken<List<PrivateLink>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List collection private links (asynchronously)
     * List article private links
     * @param collectionId Collection unique identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateCollectionPrivateLinksListAsync(Long collectionId, final ApiCallback<List<PrivateLink>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateCollectionPrivateLinksListValidateBeforeCall(collectionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<PrivateLink>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateCollectionPublish
     * @param collectionId Collection Unique identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateCollectionPublishCall(Long collectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/collections/{collection_id}/publish"
            .replaceAll("\\{" + "collection_id" + "\\}", apiClient.escapeString(collectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateCollectionPublishValidateBeforeCall(Long collectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling privateCollectionPublish(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateCollectionPublishCall(collectionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Private Collection Publish
     * When a collection is published, a new public version will be generated. Any further updates to the collection will affect the private collection data. In order to make these changes publicly visible, an explicit publish operation is needed.
     * @param collectionId Collection Unique identifier (required)
     * @return Location
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Location privateCollectionPublish(Long collectionId) throws ApiException {
        ApiResponse<Location> resp = privateCollectionPublishWithHttpInfo(collectionId);
        return resp.getData();
    }

    /**
     * Private Collection Publish
     * When a collection is published, a new public version will be generated. Any further updates to the collection will affect the private collection data. In order to make these changes publicly visible, an explicit publish operation is needed.
     * @param collectionId Collection Unique identifier (required)
     * @return ApiResponse&lt;Location&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Location> privateCollectionPublishWithHttpInfo(Long collectionId) throws ApiException {
        com.squareup.okhttp.Call call = privateCollectionPublishValidateBeforeCall(collectionId, null, null);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Private Collection Publish (asynchronously)
     * When a collection is published, a new public version will be generated. Any further updates to the collection will affect the private collection data. In order to make these changes publicly visible, an explicit publish operation is needed.
     * @param collectionId Collection Unique identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateCollectionPublishAsync(Long collectionId, final ApiCallback<Location> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateCollectionPublishValidateBeforeCall(collectionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateCollectionReserveDoi
     * @param collectionId Collection Unique identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateCollectionReserveDoiCall(Long collectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/collections/{collection_id}/reserve_doi"
            .replaceAll("\\{" + "collection_id" + "\\}", apiClient.escapeString(collectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateCollectionReserveDoiValidateBeforeCall(Long collectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling privateCollectionReserveDoi(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateCollectionReserveDoiCall(collectionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Private Collection Reserve DOI
     * Reserve DOI for collection
     * @param collectionId Collection Unique identifier (required)
     * @return CollectionDOI
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CollectionDOI privateCollectionReserveDoi(Long collectionId) throws ApiException {
        ApiResponse<CollectionDOI> resp = privateCollectionReserveDoiWithHttpInfo(collectionId);
        return resp.getData();
    }

    /**
     * Private Collection Reserve DOI
     * Reserve DOI for collection
     * @param collectionId Collection Unique identifier (required)
     * @return ApiResponse&lt;CollectionDOI&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CollectionDOI> privateCollectionReserveDoiWithHttpInfo(Long collectionId) throws ApiException {
        com.squareup.okhttp.Call call = privateCollectionReserveDoiValidateBeforeCall(collectionId, null, null);
        Type localVarReturnType = new TypeToken<CollectionDOI>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Private Collection Reserve DOI (asynchronously)
     * Reserve DOI for collection
     * @param collectionId Collection Unique identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateCollectionReserveDoiAsync(Long collectionId, final ApiCallback<CollectionDOI> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateCollectionReserveDoiValidateBeforeCall(collectionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CollectionDOI>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateCollectionReserveHandle
     * @param collectionId Collection Unique identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateCollectionReserveHandleCall(Long collectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/collections/{collection_id}/reserve_handle"
            .replaceAll("\\{" + "collection_id" + "\\}", apiClient.escapeString(collectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateCollectionReserveHandleValidateBeforeCall(Long collectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling privateCollectionReserveHandle(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateCollectionReserveHandleCall(collectionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Private Collection Reserve Handle
     * Reserve Handle for collection
     * @param collectionId Collection Unique identifier (required)
     * @return CollectionHandle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CollectionHandle privateCollectionReserveHandle(Long collectionId) throws ApiException {
        ApiResponse<CollectionHandle> resp = privateCollectionReserveHandleWithHttpInfo(collectionId);
        return resp.getData();
    }

    /**
     * Private Collection Reserve Handle
     * Reserve Handle for collection
     * @param collectionId Collection Unique identifier (required)
     * @return ApiResponse&lt;CollectionHandle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CollectionHandle> privateCollectionReserveHandleWithHttpInfo(Long collectionId) throws ApiException {
        com.squareup.okhttp.Call call = privateCollectionReserveHandleValidateBeforeCall(collectionId, null, null);
        Type localVarReturnType = new TypeToken<CollectionHandle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Private Collection Reserve Handle (asynchronously)
     * Reserve Handle for collection
     * @param collectionId Collection Unique identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateCollectionReserveHandleAsync(Long collectionId, final ApiCallback<CollectionHandle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateCollectionReserveHandleValidateBeforeCall(collectionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CollectionHandle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateCollectionResource
     * @param collectionId Collection unique identifier (required)
     * @param resource Resource data (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateCollectionResourceCall(Long collectionId, Resource resource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = resource;
        
        // create path and map variables
        String localVarPath = "/account/collections/{collection_id}/resource"
            .replaceAll("\\{" + "collection_id" + "\\}", apiClient.escapeString(collectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateCollectionResourceValidateBeforeCall(Long collectionId, Resource resource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling privateCollectionResource(Async)");
        }
        
        // verify the required parameter 'resource' is set
        if (resource == null) {
            throw new ApiException("Missing the required parameter 'resource' when calling privateCollectionResource(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateCollectionResourceCall(collectionId, resource, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Private Collection Resource
     * Edit collection resource data.
     * @param collectionId Collection unique identifier (required)
     * @param resource Resource data (required)
     * @return Location
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Location privateCollectionResource(Long collectionId, Resource resource) throws ApiException {
        ApiResponse<Location> resp = privateCollectionResourceWithHttpInfo(collectionId, resource);
        return resp.getData();
    }

    /**
     * Private Collection Resource
     * Edit collection resource data.
     * @param collectionId Collection unique identifier (required)
     * @param resource Resource data (required)
     * @return ApiResponse&lt;Location&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Location> privateCollectionResourceWithHttpInfo(Long collectionId, Resource resource) throws ApiException {
        com.squareup.okhttp.Call call = privateCollectionResourceValidateBeforeCall(collectionId, resource, null, null);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Private Collection Resource (asynchronously)
     * Edit collection resource data.
     * @param collectionId Collection unique identifier (required)
     * @param resource Resource data (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateCollectionResourceAsync(Long collectionId, Resource resource, final ApiCallback<Location> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateCollectionResourceValidateBeforeCall(collectionId, resource, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateCollectionUpdate
     * @param collectionId Collection Unique identifier (required)
     * @param collection Collection description (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateCollectionUpdateCall(Long collectionId, CollectionUpdate collection, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = collection;
        
        // create path and map variables
        String localVarPath = "/account/collections/{collection_id}"
            .replaceAll("\\{" + "collection_id" + "\\}", apiClient.escapeString(collectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateCollectionUpdateValidateBeforeCall(Long collectionId, CollectionUpdate collection, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling privateCollectionUpdate(Async)");
        }
        
        // verify the required parameter 'collection' is set
        if (collection == null) {
            throw new ApiException("Missing the required parameter 'collection' when calling privateCollectionUpdate(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateCollectionUpdateCall(collectionId, collection, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update collection
     * Update collection details; request can also be made with the PATCH method.
     * @param collectionId Collection Unique identifier (required)
     * @param collection Collection description (required)
     * @return LocationWarningsUpdate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LocationWarningsUpdate privateCollectionUpdate(Long collectionId, CollectionUpdate collection) throws ApiException {
        ApiResponse<LocationWarningsUpdate> resp = privateCollectionUpdateWithHttpInfo(collectionId, collection);
        return resp.getData();
    }

    /**
     * Update collection
     * Update collection details; request can also be made with the PATCH method.
     * @param collectionId Collection Unique identifier (required)
     * @param collection Collection description (required)
     * @return ApiResponse&lt;LocationWarningsUpdate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LocationWarningsUpdate> privateCollectionUpdateWithHttpInfo(Long collectionId, CollectionUpdate collection) throws ApiException {
        com.squareup.okhttp.Call call = privateCollectionUpdateValidateBeforeCall(collectionId, collection, null, null);
        Type localVarReturnType = new TypeToken<LocationWarningsUpdate>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update collection (asynchronously)
     * Update collection details; request can also be made with the PATCH method.
     * @param collectionId Collection Unique identifier (required)
     * @param collection Collection description (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateCollectionUpdateAsync(Long collectionId, CollectionUpdate collection, final ApiCallback<LocationWarningsUpdate> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateCollectionUpdateValidateBeforeCall(collectionId, collection, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LocationWarningsUpdate>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateCollectionsList
     * @param page Page number. Used for pagination with page_size (optional)
     * @param pageSize The number of results included on a page. Used for pagination with page (optional, default to 10)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @param order The field by which to order. Default varies by endpoint/resource. (optional, default to published_date)
     * @param orderDirection  (optional, default to desc)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateCollectionsListCall(Long page, Long pageSize, Long limit, Long offset, String order, String orderDirection, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account/collections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page_size", pageSize));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "order", order));
        if (orderDirection != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "order_direction", orderDirection));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateCollectionsListValidateBeforeCall(Long page, Long pageSize, Long limit, Long offset, String order, String orderDirection, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = privateCollectionsListCall(page, pageSize, limit, offset, order, orderDirection, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Private Collections List
     * List private collections
     * @param page Page number. Used for pagination with page_size (optional)
     * @param pageSize The number of results included on a page. Used for pagination with page (optional, default to 10)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @param order The field by which to order. Default varies by endpoint/resource. (optional, default to published_date)
     * @param orderDirection  (optional, default to desc)
     * @return List&lt;Collection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Collection> privateCollectionsList(Long page, Long pageSize, Long limit, Long offset, String order, String orderDirection) throws ApiException {
        ApiResponse<List<Collection>> resp = privateCollectionsListWithHttpInfo(page, pageSize, limit, offset, order, orderDirection);
        return resp.getData();
    }

    /**
     * Private Collections List
     * List private collections
     * @param page Page number. Used for pagination with page_size (optional)
     * @param pageSize The number of results included on a page. Used for pagination with page (optional, default to 10)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @param order The field by which to order. Default varies by endpoint/resource. (optional, default to published_date)
     * @param orderDirection  (optional, default to desc)
     * @return ApiResponse&lt;List&lt;Collection&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Collection>> privateCollectionsListWithHttpInfo(Long page, Long pageSize, Long limit, Long offset, String order, String orderDirection) throws ApiException {
        com.squareup.okhttp.Call call = privateCollectionsListValidateBeforeCall(page, pageSize, limit, offset, order, orderDirection, null, null);
        Type localVarReturnType = new TypeToken<List<Collection>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Private Collections List (asynchronously)
     * List private collections
     * @param page Page number. Used for pagination with page_size (optional)
     * @param pageSize The number of results included on a page. Used for pagination with page (optional, default to 10)
     * @param limit Number of results included on a page. Used for pagination with query (optional)
     * @param offset Where to start the listing(the offset of the first result). Used for pagination with limit (optional)
     * @param order The field by which to order. Default varies by endpoint/resource. (optional, default to published_date)
     * @param orderDirection  (optional, default to desc)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateCollectionsListAsync(Long page, Long pageSize, Long limit, Long offset, String order, String orderDirection, final ApiCallback<List<Collection>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateCollectionsListValidateBeforeCall(page, pageSize, limit, offset, order, orderDirection, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Collection>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for privateCollectionsSearch
     * @param search Search Parameters (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call privateCollectionsSearchCall(PrivateCollectionSearch search, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = search;
        
        // create path and map variables
        String localVarPath = "/account/collections/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call privateCollectionsSearchValidateBeforeCall(PrivateCollectionSearch search, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'search' is set
        if (search == null) {
            throw new ApiException("Missing the required parameter 'search' when calling privateCollectionsSearch(Async)");
        }
        
        
        com.squareup.okhttp.Call call = privateCollectionsSearchCall(search, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Private Collections Search
     * Returns a list of private Collections
     * @param search Search Parameters (required)
     * @return List&lt;Collection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Collection> privateCollectionsSearch(PrivateCollectionSearch search) throws ApiException {
        ApiResponse<List<Collection>> resp = privateCollectionsSearchWithHttpInfo(search);
        return resp.getData();
    }

    /**
     * Private Collections Search
     * Returns a list of private Collections
     * @param search Search Parameters (required)
     * @return ApiResponse&lt;List&lt;Collection&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Collection>> privateCollectionsSearchWithHttpInfo(PrivateCollectionSearch search) throws ApiException {
        com.squareup.okhttp.Call call = privateCollectionsSearchValidateBeforeCall(search, null, null);
        Type localVarReturnType = new TypeToken<List<Collection>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Private Collections Search (asynchronously)
     * Returns a list of private Collections
     * @param search Search Parameters (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call privateCollectionsSearchAsync(PrivateCollectionSearch search, final ApiCallback<List<Collection>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = privateCollectionsSearchValidateBeforeCall(search, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Collection>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
