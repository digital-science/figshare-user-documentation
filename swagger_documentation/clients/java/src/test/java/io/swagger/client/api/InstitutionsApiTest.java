/*
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.AccountCreate;
import io.swagger.client.model.AccountGroupRoles;
import io.swagger.client.model.AccountGroupRolesCreate;
import io.swagger.client.model.AccountUpdate;
import io.swagger.client.model.Article;
import io.swagger.client.model.Category;
import io.swagger.client.model.Curation;
import io.swagger.client.model.CurationComment;
import io.swagger.client.model.CurationCommentCreate;
import io.swagger.client.model.CurationDetail;
import io.swagger.client.model.ErrorMessage;
import java.io.File;
import io.swagger.client.model.Group;
import io.swagger.client.model.GroupEmbargoOptions;
import io.swagger.client.model.Institution;
import io.swagger.client.model.InstitutionAccountsSearch;
import io.swagger.client.model.ResponseMessage;
import io.swagger.client.model.Role;
import io.swagger.client.model.ShortAccount;
import io.swagger.client.model.ShortCustomField;
import io.swagger.client.model.User;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for InstitutionsApi
 */
@Ignore
public class InstitutionsApiTest {

    private final InstitutionsApi api = new InstitutionsApi();

    
    /**
     * Institution Curation Review
     *
     * Retrieve a certain curation review by its ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void accountInstitutionCurationTest() throws ApiException {
        Long curationId = null;
        CurationDetail response = api.accountInstitutionCuration(curationId);

        // TODO: test validations
    }
    
    /**
     * Institution Curation Review Comments
     *
     * Retrieve a certain curation review&#39;s comments.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void accountInstitutionCurationCommentsTest() throws ApiException {
        Long curationId = null;
        Long limit = null;
        Long offset = null;
        CurationComment response = api.accountInstitutionCurationComments(curationId, limit, offset);

        // TODO: test validations
    }
    
    /**
     * POST Institution Curation Review Comment
     *
     * Add a new comment to the review.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void accountInstitutionCurationComments_0Test() throws ApiException {
        Long curationId = null;
        CurationCommentCreate curationComment = null;
        api.accountInstitutionCurationComments_0(curationId, curationComment);

        // TODO: test validations
    }
    
    /**
     * Institution Curation Reviews
     *
     * Retrieve a list of curation reviews for this institution
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void accountInstitutionCurationsTest() throws ApiException {
        Long groupId = null;
        Long articleId = null;
        String status = null;
        Long limit = null;
        Long offset = null;
        Curation response = api.accountInstitutionCurations(groupId, articleId, status, limit, offset);

        // TODO: test validations
    }
    
    /**
     * Private account institution group custom fields
     *
     * Returns the custom fields in the group the user belongs to, or the ones in the group specified, if the user has access.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customFieldsListTest() throws ApiException {
        Long groupId = null;
        List<ShortCustomField> response = api.customFieldsList(groupId);

        // TODO: test validations
    }
    
    /**
     * Custom fields values files upload
     *
     * Uploads a CSV containing values for a specific custom field of type &lt;b&gt;dropdown_large_list&lt;/b&gt;. More details in the &lt;a href&#x3D;\&quot;#custom_fields\&quot;&gt;Custom Fields section&lt;/a&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customFieldsUploadTest() throws ApiException {
        Long customFieldId = null;
        File externalFile = null;
        Object response = api.customFieldsUpload(customFieldId, externalFile);

        // TODO: test validations
    }
    
    /**
     * Public Licenses
     *
     * Returns a list of articles belonging to the institution
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void institutionArticlesTest() throws ApiException {
        String institutionStringId = null;
        String resourceId = null;
        String filename = null;
        List<Article> response = api.institutionArticles(institutionStringId, resourceId, filename);

        // TODO: test validations
    }
    
    /**
     * Private Institution HRfeed Upload
     *
     * More info in the &lt;a href&#x3D;\&quot;#hr_feed\&quot;&gt;HR Feed section&lt;/a&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void institutionHrfeedUploadTest() throws ApiException {
        File hrfeed = null;
        ResponseMessage response = api.institutionHrfeedUpload(hrfeed);

        // TODO: test validations
    }
    
    /**
     * Private Account Institution User
     *
     * Retrieve institution user information using the account_id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void privateAccountInstitutionUserTest() throws ApiException {
        Long accountId = null;
        User response = api.privateAccountInstitutionUser(accountId);

        // TODO: test validations
    }
    
    /**
     * Private Account Categories
     *
     * List institution categories (including parent Categories)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void privateCategoriesListTest() throws ApiException {
        List<Category> response = api.privateCategoriesList();

        // TODO: test validations
    }
    
    /**
     * Private Account Institution Group Embargo Options
     *
     * Account institution group embargo options details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void privateGroupEmbargoOptionsDetailsTest() throws ApiException {
        Long groupId = null;
        List<GroupEmbargoOptions> response = api.privateGroupEmbargoOptionsDetails(groupId);

        // TODO: test validations
    }
    
    /**
     * Delete Institution Account Group Role
     *
     * Delete Institution Account Group Role
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void privateInstitutionAccountGroupRoleDeleteTest() throws ApiException {
        Long accountId = null;
        Long groupId = null;
        Long roleId = null;
        api.privateInstitutionAccountGroupRoleDelete(accountId, groupId, roleId);

        // TODO: test validations
    }
    
    /**
     * List Institution Account Group Roles
     *
     * List Institution Account Group Roles
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void privateInstitutionAccountGroupRolesTest() throws ApiException {
        Long accountId = null;
        AccountGroupRoles response = api.privateInstitutionAccountGroupRoles(accountId);

        // TODO: test validations
    }
    
    /**
     * Add Institution Account Group Roles
     *
     * Add Institution Account Group Roles
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void privateInstitutionAccountGroupRolesCreateTest() throws ApiException {
        Long accountId = null;
        AccountGroupRolesCreate account = null;
        api.privateInstitutionAccountGroupRolesCreate(accountId, account);

        // TODO: test validations
    }
    
    /**
     * Create new Institution Account
     *
     * Create a new Account by sending account information
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void privateInstitutionAccountsCreateTest() throws ApiException {
        AccountCreate account = null;
        api.privateInstitutionAccountsCreate(account);

        // TODO: test validations
    }
    
    /**
     * Private Account Institution Accounts
     *
     * Returns the accounts for which the account has administrative privileges (assigned and inherited).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void privateInstitutionAccountsListTest() throws ApiException {
        Long page = null;
        Long pageSize = null;
        Long limit = null;
        Long offset = null;
        Long isActive = null;
        String institutionUserId = null;
        String email = null;
        Long idLte = null;
        Long idGte = null;
        List<ShortAccount> response = api.privateInstitutionAccountsList(page, pageSize, limit, offset, isActive, institutionUserId, email, idLte, idGte);

        // TODO: test validations
    }
    
    /**
     * Private Account Institution Accounts Search
     *
     * Returns the accounts for which the account has administrative privileges (assigned and inherited).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void privateInstitutionAccountsSearchTest() throws ApiException {
        InstitutionAccountsSearch search = null;
        List<ShortAccount> response = api.privateInstitutionAccountsSearch(search);

        // TODO: test validations
    }
    
    /**
     * Update Institution Account
     *
     * Update Institution Account
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void privateInstitutionAccountsUpdateTest() throws ApiException {
        Long accountId = null;
        AccountUpdate account = null;
        api.privateInstitutionAccountsUpdate(accountId, account);

        // TODO: test validations
    }
    
    /**
     * Private Institution Articles
     *
     * Get Articles from own institution. User must be administrator of the institution
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void privateInstitutionArticlesTest() throws ApiException {
        Long page = null;
        Long pageSize = null;
        Long limit = null;
        Long offset = null;
        String order = null;
        String orderDirection = null;
        String publishedSince = null;
        String modifiedSince = null;
        Long status = null;
        String resourceDoi = null;
        Long itemType = null;
        List<Article> response = api.privateInstitutionArticles(page, pageSize, limit, offset, order, orderDirection, publishedSince, modifiedSince, status, resourceDoi, itemType);

        // TODO: test validations
    }
    
    /**
     * Private Account Institutions
     *
     * Account institution details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void privateInstitutionDetailsTest() throws ApiException {
        Institution response = api.privateInstitutionDetails();

        // TODO: test validations
    }
    
    /**
     * Private Account Institution embargo options
     *
     * Account institution embargo options details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void privateInstitutionEmbargoOptionsDetailsTest() throws ApiException {
        List<GroupEmbargoOptions> response = api.privateInstitutionEmbargoOptionsDetails();

        // TODO: test validations
    }
    
    /**
     * Private Account Institution Groups
     *
     * Returns the groups for which the account has administrative privileges (assigned and inherited).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void privateInstitutionGroupsListTest() throws ApiException {
        List<Group> response = api.privateInstitutionGroupsList();

        // TODO: test validations
    }
    
    /**
     * Private Account Institution Roles
     *
     * Returns the roles available for groups and the institution group.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void privateInstitutionRolesListTest() throws ApiException {
        List<Role> response = api.privateInstitutionRolesList();

        // TODO: test validations
    }
    
}
